
LORA_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08004f70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004f70  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac55  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de1  00000000  00000000  0002aced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002d608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009803  00000000  00000000  0002e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000031cf  00000000  00000000  0003783b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0003aa0a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002fe0  00000000  00000000  0003aa5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e14 	.word	0x08004e14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004e14 	.word	0x08004e14

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8d8 	bl	8000678 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8d3 	bl	8000678 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzsi2>:
 800063c:	211c      	movs	r1, #28
 800063e:	2301      	movs	r3, #1
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	4298      	cmp	r0, r3
 8000644:	d301      	bcc.n	800064a <__clzsi2+0xe>
 8000646:	0c00      	lsrs	r0, r0, #16
 8000648:	3910      	subs	r1, #16
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	4298      	cmp	r0, r3
 800064e:	d301      	bcc.n	8000654 <__clzsi2+0x18>
 8000650:	0a00      	lsrs	r0, r0, #8
 8000652:	3908      	subs	r1, #8
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0x22>
 800065a:	0900      	lsrs	r0, r0, #4
 800065c:	3904      	subs	r1, #4
 800065e:	a202      	add	r2, pc, #8	; (adr r2, 8000668 <__clzsi2+0x2c>)
 8000660:	5c10      	ldrb	r0, [r2, r0]
 8000662:	1840      	adds	r0, r0, r1
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	02020304 	.word	0x02020304
 800066c:	01010101 	.word	0x01010101
	...

08000678 <__clzdi2>:
 8000678:	b510      	push	{r4, lr}
 800067a:	2900      	cmp	r1, #0
 800067c:	d103      	bne.n	8000686 <__clzdi2+0xe>
 800067e:	f7ff ffdd 	bl	800063c <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e002      	b.n	800068c <__clzdi2+0x14>
 8000686:	0008      	movs	r0, r1
 8000688:	f7ff ffd8 	bl	800063c <__clzsi2>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08f      	sub	sp, #60	; 0x3c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000698:	200c      	movs	r0, #12
 800069a:	183b      	adds	r3, r7, r0
 800069c:	22b2      	movs	r2, #178	; 0xb2
 800069e:	32ff      	adds	r2, #255	; 0xff
 80006a0:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 80006a2:	183b      	adds	r3, r7, r0
 80006a4:	2224      	movs	r2, #36	; 0x24
 80006a6:	2107      	movs	r1, #7
 80006a8:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	2225      	movs	r2, #37	; 0x25
 80006ae:	2107      	movs	r1, #7
 80006b0:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	2226      	movs	r2, #38	; 0x26
 80006b6:	2101      	movs	r1, #1
 80006b8:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	222a      	movs	r2, #42	; 0x2a
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 80006c2:	183b      	adds	r3, r7, r0
 80006c4:	222b      	movs	r2, #43	; 0x2b
 80006c6:	2164      	movs	r1, #100	; 0x64
 80006c8:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 80006ca:	0001      	movs	r1, r0
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2208      	movs	r2, #8
 80006d0:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	187a      	adds	r2, r7, r1
 80006d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006d8:	c313      	stmia	r3!, {r0, r1, r4}
 80006da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006dc:	c313      	stmia	r3!, {r0, r1, r4}
 80006de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e0:	c313      	stmia	r3!, {r0, r1, r4}
 80006e2:	ca03      	ldmia	r2!, {r0, r1}
 80006e4:	c303      	stmia	r3!, {r0, r1}
}
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b00f      	add	sp, #60	; 0x3c
 80006ec:	bd90      	pop	{r4, r7, pc}

080006ee <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6898      	ldr	r0, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	899b      	ldrh	r3, [r3, #12]
 80006fe:	2200      	movs	r2, #0
 8000700:	0019      	movs	r1, r3
 8000702:	f001 fc77 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f001 fa1e 	bl	8001b48 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6898      	ldr	r0, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	899b      	ldrh	r3, [r3, #12]
 8000714:	2201      	movs	r2, #1
 8000716:	0019      	movs	r1, r3
 8000718:	f001 fc6c 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f001 fa13 	bl	8001b48 <HAL_Delay>
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}

0800072a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800072a:	b5b0      	push	{r4, r5, r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000734:	250e      	movs	r5, #14
 8000736:	197c      	adds	r4, r7, r5
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f000 f9e8 	bl	8000b12 <LoRa_read>
 8000742:	0003      	movs	r3, r0
 8000744:	7023      	strb	r3, [r4, #0]
	data = read;
 8000746:	200f      	movs	r0, #15
 8000748:	183b      	adds	r3, r7, r0
 800074a:	0029      	movs	r1, r5
 800074c:	187a      	adds	r2, r7, r1
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d109      	bne.n	800076c <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8000758:	183b      	adds	r3, r7, r0
 800075a:	187a      	adds	r2, r7, r1
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	2107      	movs	r1, #7
 8000760:	438a      	bics	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
 800076a:	e04e      	b.n	800080a <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d110      	bne.n	8000794 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000772:	230e      	movs	r3, #14
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	2207      	movs	r2, #7
 800077c:	4393      	bics	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	2201      	movs	r2, #1
 8000782:	4313      	orrs	r3, r2
 8000784:	b25a      	sxtb	r2, r3
 8000786:	230f      	movs	r3, #15
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
 8000792:	e03a      	b.n	800080a <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2b03      	cmp	r3, #3
 8000798:	d110      	bne.n	80007bc <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 800079a:	230e      	movs	r3, #14
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	2207      	movs	r2, #7
 80007a4:	4393      	bics	r3, r2
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	2203      	movs	r2, #3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	230f      	movs	r3, #15
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2203      	movs	r2, #3
 80007b8:	61da      	str	r2, [r3, #28]
 80007ba:	e026      	b.n	800080a <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d110      	bne.n	80007e4 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80007c2:	230e      	movs	r3, #14
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	2207      	movs	r2, #7
 80007cc:	4393      	bics	r3, r2
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	2205      	movs	r2, #5
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	230f      	movs	r3, #15
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2205      	movs	r2, #5
 80007e0:	61da      	str	r2, [r3, #28]
 80007e2:	e012      	b.n	800080a <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d10f      	bne.n	800080a <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 80007ea:	230e      	movs	r3, #14
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	2207      	movs	r2, #7
 80007f4:	4393      	bics	r3, r2
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	2206      	movs	r2, #6
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	230f      	movs	r3, #15
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2206      	movs	r2, #6
 8000808:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800080a:	230f      	movs	r3, #15
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2101      	movs	r1, #1
 8000814:	0018      	movs	r0, r3
 8000816:	f000 f99a 	bl	8000b4e <LoRa_write>
	//HAL_Delay(10);
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bdb0      	pop	{r4, r5, r7, pc}

08000822 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000822:	b590      	push	{r4, r7, lr}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	1dbb      	adds	r3, r7, #6
 8000830:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	889b      	ldrh	r3, [r3, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	0019      	movs	r1, r3
 800083e:	f001 fbd9 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6998      	ldr	r0, [r3, #24]
 8000846:	23fa      	movs	r3, #250	; 0xfa
 8000848:	00dc      	lsls	r4, r3, #3
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	0023      	movs	r3, r4
 8000852:	f002 fd29 	bl	80032a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	0018      	movs	r0, r3
 800085e:	f003 f97a 	bl	8003b56 <HAL_SPI_GetState>
 8000862:	0003      	movs	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d1f7      	bne.n	8000858 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6998      	ldr	r0, [r3, #24]
 800086c:	23fa      	movs	r3, #250	; 0xfa
 800086e:	00dc      	lsls	r4, r3, #3
 8000870:	2320      	movs	r3, #32
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	881a      	ldrh	r2, [r3, #0]
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	0023      	movs	r3, r4
 800087a:	f002 fe73 	bl	8003564 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	0018      	movs	r0, r3
 8000886:	f003 f966 	bl	8003b56 <HAL_SPI_GetState>
 800088a:	0003      	movs	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d1f7      	bne.n	8000880 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	889b      	ldrh	r3, [r3, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	0019      	movs	r1, r3
 800089c:	f001 fbaa 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b005      	add	sp, #20
 80008a6:	bd90      	pop	{r4, r7, pc}

080008a8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	1dbb      	adds	r3, r7, #6
 80008b6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	0019      	movs	r1, r3
 80008c4:	f001 fb96 	bl	8001ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6998      	ldr	r0, [r3, #24]
 80008cc:	23fa      	movs	r3, #250	; 0xfa
 80008ce:	00dc      	lsls	r4, r3, #3
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	0023      	movs	r3, r4
 80008d8:	f002 fce6 	bl	80032a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	0018      	movs	r0, r3
 80008e4:	f003 f937 	bl	8003b56 <HAL_SPI_GetState>
 80008e8:	0003      	movs	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d1f7      	bne.n	80008de <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6998      	ldr	r0, [r3, #24]
 80008f2:	23fa      	movs	r3, #250	; 0xfa
 80008f4:	00dc      	lsls	r4, r3, #3
 80008f6:	2320      	movs	r3, #32
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	881a      	ldrh	r2, [r3, #0]
 80008fc:	6839      	ldr	r1, [r7, #0]
 80008fe:	0023      	movs	r3, r4
 8000900:	f002 fcd2 	bl	80032a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	0018      	movs	r0, r3
 800090c:	f003 f923 	bl	8003b56 <HAL_SPI_GetState>
 8000910:	0003      	movs	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d1f7      	bne.n	8000906 <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	0019      	movs	r1, r3
 8000922:	f001 fb67 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b005      	add	sp, #20
 800092c:	bd90      	pop	{r4, r7, pc}

0800092e <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800092e:	b590      	push	{r4, r7, lr}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	04db      	lsls	r3, r3, #19
 800093c:	115b      	asrs	r3, r3, #5
 800093e:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	0c1a      	lsrs	r2, r3, #16
 8000944:	240b      	movs	r4, #11
 8000946:	193b      	adds	r3, r7, r4
 8000948:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 800094a:	193b      	adds	r3, r7, r4
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2106      	movs	r1, #6
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f8fb 	bl	8000b4e <LoRa_write>
	HAL_Delay(5);
 8000958:	2005      	movs	r0, #5
 800095a:	f001 f8f5 	bl	8001b48 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	0a1a      	lsrs	r2, r3, #8
 8000962:	193b      	adds	r3, r7, r4
 8000964:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8000966:	193b      	adds	r3, r7, r4
 8000968:	781a      	ldrb	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2107      	movs	r1, #7
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f8ed 	bl	8000b4e <LoRa_write>
	HAL_Delay(5);
 8000974:	2005      	movs	r0, #5
 8000976:	f001 f8e7 	bl	8001b48 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000980:	193b      	adds	r3, r7, r4
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2108      	movs	r1, #8
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f8e0 	bl	8000b4e <LoRa_write>
	HAL_Delay(5);
 800098e:	2005      	movs	r0, #5
 8000990:	f001 f8da 	bl	8001b48 <HAL_Delay>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b005      	add	sp, #20
 800099a:	bd90      	pop	{r4, r7, pc}

0800099c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b0c      	cmp	r3, #12
 80009aa:	dd01      	ble.n	80009b0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80009ac:	230c      	movs	r3, #12
 80009ae:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	dc01      	bgt.n	80009ba <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80009b6:	2307      	movs	r3, #7
 80009b8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80009ba:	250f      	movs	r5, #15
 80009bc:	197c      	adds	r4, r7, r5
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	211e      	movs	r1, #30
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 f8a5 	bl	8000b12 <LoRa_read>
 80009c8:	0003      	movs	r3, r0
 80009ca:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f001 f8bb 	bl	8001b48 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	197b      	adds	r3, r7, r5
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	220f      	movs	r2, #15
 80009e0:	4013      	ands	r3, r2
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	200e      	movs	r0, #14
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	188a      	adds	r2, r1, r2
 80009ea:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80009ec:	183b      	adds	r3, r7, r0
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	211e      	movs	r1, #30
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 f8aa 	bl	8000b4e <LoRa_write>
	HAL_Delay(10);
 80009fa:	200a      	movs	r0, #10
 80009fc:	f001 f8a4 	bl	8001b48 <HAL_Delay>
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bdb0      	pop	{r4, r5, r7, pc}

08000a08 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	000a      	movs	r2, r1
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000a16:	1cfb      	adds	r3, r7, #3
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2109      	movs	r1, #9
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f895 	bl	8000b4e <LoRa_write>
	HAL_Delay(10);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f001 f88f 	bl	8001b48 <HAL_Delay>
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	1cfb      	adds	r3, r7, #3
 8000a3e:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000a40:	230f      	movs	r3, #15
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8000a48:	1cfb      	adds	r3, r7, #3
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a4e:	d802      	bhi.n	8000a56 <LoRa_setOCP+0x24>
		current = 45;
 8000a50:	1cfb      	adds	r3, r7, #3
 8000a52:	222d      	movs	r2, #45	; 0x2d
 8000a54:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8000a56:	1cfb      	adds	r3, r7, #3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2bf0      	cmp	r3, #240	; 0xf0
 8000a5c:	d902      	bls.n	8000a64 <LoRa_setOCP+0x32>
		current = 240;
 8000a5e:	1cfb      	adds	r3, r7, #3
 8000a60:	22f0      	movs	r2, #240	; 0xf0
 8000a62:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000a64:	1cfb      	adds	r3, r7, #3
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b78      	cmp	r3, #120	; 0x78
 8000a6a:	d80c      	bhi.n	8000a86 <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000a6c:	1cfb      	adds	r3, r7, #3
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	3b2d      	subs	r3, #45	; 0x2d
 8000a72:	2105      	movs	r1, #5
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fbdb 	bl	8000230 <__divsi3>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	230f      	movs	r3, #15
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e00f      	b.n	8000aa6 <LoRa_setOCP+0x74>
	else if(current <= 240)
 8000a86:	1cfb      	adds	r3, r7, #3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2bf0      	cmp	r3, #240	; 0xf0
 8000a8c:	d80b      	bhi.n	8000aa6 <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8000a8e:	1cfb      	adds	r3, r7, #3
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	331e      	adds	r3, #30
 8000a94:	210a      	movs	r1, #10
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff fbca 	bl	8000230 <__divsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	3220      	adds	r2, #32
 8000ab0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	210b      	movs	r1, #11
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f847 	bl	8000b4e <LoRa_write>
	HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f001 f841 	bl	8001b48 <HAL_Delay>
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}

08000ace <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000ace:	b5b0      	push	{r4, r5, r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000ad6:	250f      	movs	r5, #15
 8000ad8:	197c      	adds	r4, r7, r5
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	211e      	movs	r1, #30
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f817 	bl	8000b12 <LoRa_read>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8000ae8:	200e      	movs	r0, #14
 8000aea:	183b      	adds	r3, r7, r0
 8000aec:	197a      	adds	r2, r7, r5
 8000aee:	7812      	ldrb	r2, [r2, #0]
 8000af0:	2107      	movs	r1, #7
 8000af2:	430a      	orrs	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	211e      	movs	r1, #30
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f825 	bl	8000b4e <LoRa_write>
	HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f001 f81f 	bl	8001b48 <HAL_Delay>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}

08000b12 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000b12:	b590      	push	{r4, r7, lr}
 8000b14:	b087      	sub	sp, #28
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	1cfb      	adds	r3, r7, #3
 8000b1e:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000b20:	1cfb      	adds	r3, r7, #3
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	227f      	movs	r2, #127	; 0x7f
 8000b26:	4013      	ands	r3, r2
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	210e      	movs	r1, #14
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000b30:	240f      	movs	r4, #15
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	1879      	adds	r1, r7, r1
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	9200      	str	r2, [sp, #0]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f7ff fe70 	bl	8000822 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	781b      	ldrb	r3, [r3, #0]
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b005      	add	sp, #20
 8000b4c:	bd90      	pop	{r4, r7, pc}

08000b4e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	0008      	movs	r0, r1
 8000b58:	0011      	movs	r1, r2
 8000b5a:	1cfb      	adds	r3, r7, #3
 8000b5c:	1c02      	adds	r2, r0, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000b66:	1cfb      	adds	r3, r7, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	210e      	movs	r1, #14
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	701a      	strb	r2, [r3, #0]
	data = value;
 8000b78:	200f      	movs	r0, #15
 8000b7a:	183b      	adds	r3, r7, r0
 8000b7c:	1cba      	adds	r2, r7, #2
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000b82:	183b      	adds	r3, r7, r0
 8000b84:	1879      	adds	r1, r7, r1
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	9200      	str	r2, [sp, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f7ff fe8b 	bl	80008a8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b004      	add	sp, #16
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000b9a:	b590      	push	{r4, r7, lr}
 8000b9c:	b087      	sub	sp, #28
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	0008      	movs	r0, r1
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	240b      	movs	r4, #11
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	1c02      	adds	r2, r0, #0
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	1c0a      	adds	r2, r1, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	4252      	negs	r2, r2
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	2417      	movs	r4, #23
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	889b      	ldrh	r3, [r3, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	f001 fa0d 	bl	8001ff4 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6998      	ldr	r0, [r3, #24]
 8000bde:	23fa      	movs	r3, #250	; 0xfa
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1939      	adds	r1, r7, r4
 8000be4:	2201      	movs	r2, #1
 8000be6:	f002 fb5f 	bl	80032a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 ffb0 	bl	8003b56 <HAL_SPI_GetState>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d1f7      	bne.n	8000bec <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6998      	ldr	r0, [r3, #24]
 8000c00:	230a      	movs	r3, #10
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	23fa      	movs	r3, #250	; 0xfa
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	f002 fb4b 	bl	80032a8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 ff9c 	bl	8003b56 <HAL_SPI_GetState>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d1f7      	bne.n	8000c14 <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	889b      	ldrh	r3, [r3, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	0019      	movs	r1, r3
 8000c30:	f001 f9e0 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b007      	add	sp, #28
 8000c3a:	bd90      	pop	{r4, r7, pc}

08000c3c <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000c4e:	b5b0      	push	{r4, r5, r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	1c0a      	adds	r2, r1, #0
 8000c62:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fd5b 	bl	800072a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000c74:	2513      	movs	r5, #19
 8000c76:	197c      	adds	r4, r7, r5
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	210e      	movs	r1, #14
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff48 	bl	8000b12 <LoRa_read>
 8000c82:	0003      	movs	r3, r0
 8000c84:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000c86:	197b      	adds	r3, r7, r5
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	210d      	movs	r1, #13
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff5d 	bl	8000b4e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2122      	movs	r1, #34	; 0x22
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff56 	bl	8000b4e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	2100      	movs	r1, #0
 8000cac:	f7ff ff75 	bl	8000b9a <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fd38 	bl	800072a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000cba:	2513      	movs	r5, #19
 8000cbc:	197c      	adds	r4, r7, r5
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2112      	movs	r1, #18
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff ff25 	bl	8000b12 <LoRa_read>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8000ccc:	197b      	adds	r3, r7, r5
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d00d      	beq.n	8000cf2 <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	2112      	movs	r1, #18
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff36 	bl	8000b4e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fd1e 	bl	800072a <LoRa_gotoMode>
			return 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e014      	b.n	8000d1c <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	1d3a      	adds	r2, r7, #4
 8000cf6:	8812      	ldrh	r2, [r2, #0]
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d107      	bne.n	8000d14 <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fd0d 	bl	800072a <LoRa_gotoMode>
				return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e003      	b.n	8000d1c <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 ff17 	bl	8001b48 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000d1a:	e7ce      	b.n	8000cba <LoRa_transmit+0x6c>
	}

}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b006      	add	sp, #24
 8000d22:	bdb0      	pop	{r4, r5, r7, pc}

08000d24 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2105      	movs	r1, #5
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fcfa 	bl	800072a <LoRa_gotoMode>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d40:	b089      	sub	sp, #36	; 0x24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000d4c:	231f      	movs	r3, #31
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	e007      	b.n	8000d6a <LoRa_receive+0x2c>
		data[i]=0;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	18d3      	adds	r3, r2, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	3301      	adds	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf2      	blt.n	8000d5a <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2101      	movs	r1, #1
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fcd6 	bl	800072a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000d7e:	2513      	movs	r5, #19
 8000d80:	197c      	adds	r4, r7, r5
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2112      	movs	r1, #18
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fec3 	bl	8000b12 <LoRa_read>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2240      	movs	r2, #64	; 0x40
 8000d96:	4013      	ands	r3, r2
 8000d98:	d03f      	beq.n	8000e1a <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	2112      	movs	r1, #18
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fed4 	bl	8000b4e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000da6:	2612      	movs	r6, #18
 8000da8:	19bc      	adds	r4, r7, r6
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2113      	movs	r1, #19
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff feaf 	bl	8000b12 <LoRa_read>
 8000db4:	0003      	movs	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000db8:	197c      	adds	r4, r7, r5
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fea7 	bl	8000b12 <LoRa_read>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000dc8:	197b      	adds	r3, r7, r5
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	210d      	movs	r1, #13
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff febc 	bl	8000b4e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000dd6:	231f      	movs	r3, #31
 8000dd8:	18fa      	adds	r2, r7, r3
 8000dda:	19bb      	adds	r3, r7, r6
 8000ddc:	1df9      	adds	r1, r7, #7
 8000dde:	780c      	ldrb	r4, [r1, #0]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2d8      	uxtb	r0, r3
 8000de4:	b2e1      	uxtb	r1, r4
 8000de6:	4288      	cmp	r0, r1
 8000de8:	d900      	bls.n	8000dec <LoRa_receive+0xae>
 8000dea:	1c23      	adds	r3, r4, #0
 8000dec:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e00c      	b.n	8000e0e <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	18d4      	adds	r4, r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff fe87 	bl	8000b12 <LoRa_read>
 8000e04:	0003      	movs	r3, r0
 8000e06:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	231f      	movs	r3, #31
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbec      	blt.n	8000df4 <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fc83 	bl	800072a <LoRa_gotoMode>
    return min;
 8000e24:	231f      	movs	r3, #31
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	781b      	ldrb	r3, [r3, #0]
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b009      	add	sp, #36	; 0x24
 8000e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e32 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fefd 	bl	8000c3c <LoRa_isvalid>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d100      	bne.n	8000e48 <LoRa_init+0x16>
 8000e46:	e0b3      	b.n	8000fb0 <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fc6c 	bl	800072a <LoRa_gotoMode>
			HAL_Delay(10);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 fe78 	bl	8001b48 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000e58:	260f      	movs	r6, #15
 8000e5a:	19bc      	adds	r4, r7, r6
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2101      	movs	r1, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fe56 	bl	8000b12 <LoRa_read>
 8000e66:	0003      	movs	r3, r0
 8000e68:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f000 fe6c 	bl	8001b48 <HAL_Delay>
			data = read | 0x80;
 8000e70:	250e      	movs	r5, #14
 8000e72:	197b      	adds	r3, r7, r5
 8000e74:	0034      	movs	r4, r6
 8000e76:	193a      	adds	r2, r7, r4
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	4249      	negs	r1, r1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8000e82:	197b      	adds	r3, r7, r5
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fe5f 	bl	8000b4e <LoRa_write>
			HAL_Delay(100);
 8000e90:	2064      	movs	r0, #100	; 0x64
 8000e92:	f000 fe59 	bl	8001b48 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fd45 	bl	800092e <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	222a      	movs	r2, #42	; 0x2a
 8000ea8:	5c9a      	ldrb	r2, [r3, r2]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f7ff fdaa 	bl	8000a08 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	222b      	movs	r2, #43	; 0x2b
 8000eb8:	5c9a      	ldrb	r2, [r3, r2]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fdb7 	bl	8000a32 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2223      	movs	r2, #35	; 0x23
 8000ec8:	210c      	movs	r1, #12
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fe3f 	bl	8000b4e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fdfb 	bl	8000ace <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2224      	movs	r2, #36	; 0x24
 8000edc:	5c9b      	ldrb	r3, [r3, r2]
 8000ede:	001a      	movs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fd59 	bl	800099c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	211f      	movs	r1, #31
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fe2c 	bl	8000b4e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000ef6:	197b      	adds	r3, r7, r5
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2225      	movs	r2, #37	; 0x25
 8000f00:	5c9b      	ldrb	r3, [r3, r2]
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	b2d9      	uxtb	r1, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2226      	movs	r2, #38	; 0x26
 8000f0a:	5c9b      	ldrb	r3, [r3, r2]
 8000f0c:	18db      	adds	r3, r3, r3
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	197b      	adds	r3, r7, r5
 8000f12:	188a      	adds	r2, r1, r2
 8000f14:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000f16:	197b      	adds	r3, r7, r5
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	211d      	movs	r1, #29
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fe15 	bl	8000b4e <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2120      	movs	r1, #32
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff fe0b 	bl	8000b4e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2121      	movs	r1, #33	; 0x21
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff fe03 	bl	8000b4e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000f48:	0026      	movs	r6, r4
 8000f4a:	193c      	adds	r4, r7, r4
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff fdde 	bl	8000b12 <LoRa_read>
 8000f56:	0003      	movs	r3, r0
 8000f58:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8000f5a:	197b      	adds	r3, r7, r5
 8000f5c:	0034      	movs	r4, r6
 8000f5e:	193a      	adds	r2, r7, r4
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	213f      	movs	r1, #63	; 0x3f
 8000f64:	430a      	orrs	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000f68:	197b      	adds	r3, r7, r5
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff fdec 	bl	8000b4e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff fbd5 	bl	800072a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f000 fdde 	bl	8001b48 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000f8c:	0025      	movs	r5, r4
 8000f8e:	193c      	adds	r4, r7, r4
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2142      	movs	r1, #66	; 0x42
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fdbc 	bl	8000b12 <LoRa_read>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8000f9e:	197b      	adds	r3, r7, r5
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d101      	bne.n	8000faa <LoRa_init+0x178>
				return LORA_OK;
 8000fa6:	23c8      	movs	r3, #200	; 0xc8
 8000fa8:	e004      	b.n	8000fb4 <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8000faa:	23ca      	movs	r3, #202	; 0xca
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	e001      	b.n	8000fb4 <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8000fb0:	23f8      	movs	r3, #248	; 0xf8
 8000fb2:	33ff      	adds	r3, #255	; 0xff
	}
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b005      	add	sp, #20
 8000fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b08f      	sub	sp, #60	; 0x3c
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fd51 	bl	8001a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f8a7 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 f9cf 	bl	800136c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fce:	f000 f995 	bl	80012fc <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fd2:	f000 f953 	bl	800127c <MX_I2C2_Init>
  MX_I2C1_Init();
 8000fd6:	f000 f911 	bl	80011fc <MX_I2C1_Init>



  /* USER CODE BEGIN 2 */
  	myLoRa = newLoRa();
 8000fda:	4c46      	ldr	r4, [pc, #280]	; (80010f4 <main+0x138>)
 8000fdc:	003b      	movs	r3, r7
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fb56 	bl	8000690 <newLoRa>
 8000fe4:	003a      	movs	r2, r7
 8000fe6:	0023      	movs	r3, r4
 8000fe8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fea:	c313      	stmia	r3!, {r0, r1, r4}
 8000fec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fee:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ff2:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff4:	ca03      	ldmia	r2!, {r0, r1}
 8000ff6:	c303      	stmia	r3!, {r0, r1}

  	myLoRa.hSPIx                 = &hspi1;
 8000ff8:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <main+0x138>)
 8000ffa:	4a3f      	ldr	r2, [pc, #252]	; (80010f8 <main+0x13c>)
 8000ffc:	619a      	str	r2, [r3, #24]
  	myLoRa.CS_port               = NSS_GPIO_Port;
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <main+0x138>)
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <main+0x140>)
 8001002:	601a      	str	r2, [r3, #0]
  	myLoRa.CS_pin                = NSS_Pin;
 8001004:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <main+0x138>)
 8001006:	4a3e      	ldr	r2, [pc, #248]	; (8001100 <main+0x144>)
 8001008:	809a      	strh	r2, [r3, #4]
  	myLoRa.reset_port            = RESET_GPIO_Port;
 800100a:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <main+0x138>)
 800100c:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <main+0x140>)
 800100e:	609a      	str	r2, [r3, #8]
  	myLoRa.reset_pin             = RESET_Pin;
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <main+0x138>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	01d2      	lsls	r2, r2, #7
 8001016:	819a      	strh	r2, [r3, #12]
  	myLoRa.DIO0_port						 = DIO0_GPIO_Port;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <main+0x138>)
 800101a:	4a38      	ldr	r2, [pc, #224]	; (80010fc <main+0x140>)
 800101c:	611a      	str	r2, [r3, #16]
  	myLoRa.DIO0_pin							 = DIO0_Pin;
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <main+0x138>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0192      	lsls	r2, r2, #6
 8001024:	829a      	strh	r2, [r3, #20]

  	myLoRa.frequency             = 433;							  // default = 433 MHz
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <main+0x138>)
 8001028:	22b2      	movs	r2, #178	; 0xb2
 800102a:	32ff      	adds	r2, #255	; 0xff
 800102c:	621a      	str	r2, [r3, #32]
  	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <main+0x138>)
 8001030:	2224      	movs	r2, #36	; 0x24
 8001032:	2107      	movs	r1, #7
 8001034:	5499      	strb	r1, [r3, r2]
  	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <main+0x138>)
 8001038:	2225      	movs	r2, #37	; 0x25
 800103a:	2107      	movs	r1, #7
 800103c:	5499      	strb	r1, [r3, r2]
  	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <main+0x138>)
 8001040:	2226      	movs	r2, #38	; 0x26
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]
  	myLoRa.power					       = POWER_20db;				// default = 20db
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <main+0x138>)
 8001048:	222a      	movs	r2, #42	; 0x2a
 800104a:	21ff      	movs	r1, #255	; 0xff
 800104c:	5499      	strb	r1, [r3, r2]
  	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 800104e:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <main+0x138>)
 8001050:	222b      	movs	r2, #43	; 0x2b
 8001052:	2178      	movs	r1, #120	; 0x78
 8001054:	5499      	strb	r1, [r3, r2]
  	myLoRa.preamble				       = 10;		  					// default = 8;
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <main+0x138>)
 8001058:	220a      	movs	r2, #10
 800105a:	851a      	strh	r2, [r3, #40]	; 0x28

  	LoRa_reset(&myLoRa);
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <main+0x138>)
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fb45 	bl	80006ee <LoRa_reset>
  	LoRa_init(&myLoRa);
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <main+0x138>)
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff fee3 	bl	8000e32 <LoRa_init>

  	// START CONTINUOUS RECEIVING -----------------------------------
  	LoRa_startReceiving(&myLoRa);
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <main+0x138>)
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff fe58 	bl	8000d24 <LoRa_startReceiving>
  	//---------------------------------------------------------------

  	Neighbor* rt = NULL ;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  	rt = create_example_routing_table(rt);
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fad1 	bl	8001622 <create_example_routing_table>
 8001080:	0003      	movs	r3, r0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30

    while (1)
    {
    	/* USER CODE BEGIN WHILE */
  		// SENDING DATA - - - - - - - - - - - - - - - - - - - - - - - - -
  		send_data[0] = 0x3B; // MY ADDRESS
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <main+0x148>)
 8001086:	223b      	movs	r2, #59	; 0x3b
 8001088:	701a      	strb	r2, [r3, #0]
  		for(int i=0; i<26; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
 800108e:	e00a      	b.n	80010a6 <main+0xea>
  			send_data[i+1] = 48+i;
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	b2da      	uxtb	r2, r3
 8001094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001096:	3301      	adds	r3, #1
 8001098:	3230      	adds	r2, #48	; 0x30
 800109a:	b2d1      	uxtb	r1, r2
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <main+0x148>)
 800109e:	54d1      	strb	r1, [r2, r3]
  		for(int i=0; i<26; i++)
 80010a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a2:	3301      	adds	r3, #1
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	2b19      	cmp	r3, #25
 80010aa:	ddf1      	ble.n	8001090 <main+0xd4>
  		LoRa_transmit(&myLoRa, send_data, 128, 500);
 80010ac:	23fa      	movs	r3, #250	; 0xfa
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4914      	ldr	r1, [pc, #80]	; (8001104 <main+0x148>)
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <main+0x138>)
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	f7ff fdca 	bl	8000c4e <LoRa_transmit>
  		HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 fd44 	bl	8001b48 <HAL_Delay>
  		printf("message sent");
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <main+0x14c>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f002 ffb0 	bl	8004028 <iprintf>

  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <main+0x150>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 ffae 	bl	800202e <HAL_GPIO_TogglePin>
  		HAL_Delay(1500);  // Delay to keep the LED on for a while
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <main+0x154>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fd37 	bl	8001b48 <HAL_Delay>
  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <main+0x150>)
 80010dc:	2101      	movs	r1, #1
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 ffa5 	bl	800202e <HAL_GPIO_TogglePin>
  		// RECEIVING DATA - - - - - - - - - - - - - - - - - - - - - - - -
  		LoRa_receive(&myLoRa, read_data, 128);
 80010e4:	490b      	ldr	r1, [pc, #44]	; (8001114 <main+0x158>)
 80010e6:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <main+0x138>)
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff fe27 	bl	8000d3e <LoRa_receive>
  		send_data[0] = 0x3B; // MY ADDRESS
 80010f0:	e7c8      	b.n	8001084 <main+0xc8>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	2000018c 	.word	0x2000018c
 80010f8:	20000134 	.word	0x20000134
 80010fc:	50001000 	.word	0x50001000
 8001100:	ffff8000 	.word	0xffff8000
 8001104:	20000238 	.word	0x20000238
 8001108:	08004e2c 	.word	0x08004e2c
 800110c:	50000400 	.word	0x50000400
 8001110:	000005dc 	.word	0x000005dc
 8001114:	200001b8 	.word	0x200001b8

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b09f      	sub	sp, #124	; 0x7c
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	2440      	movs	r4, #64	; 0x40
 8001120:	193b      	adds	r3, r7, r4
 8001122:	0018      	movs	r0, r3
 8001124:	2338      	movs	r3, #56	; 0x38
 8001126:	001a      	movs	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	f002 fe93 	bl	8003e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112e:	232c      	movs	r3, #44	; 0x2c
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	0018      	movs	r0, r3
 8001134:	2314      	movs	r3, #20
 8001136:	001a      	movs	r2, r3
 8001138:	2100      	movs	r1, #0
 800113a:	f002 fe8b 	bl	8003e54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	0018      	movs	r0, r3
 8001142:	2328      	movs	r3, #40	; 0x28
 8001144:	001a      	movs	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	f002 fe84 	bl	8003e54 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <SystemClock_Config+0xdc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <SystemClock_Config+0xe0>)
 8001152:	401a      	ands	r2, r3
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemClock_Config+0xdc>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0109      	lsls	r1, r1, #4
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115e:	0021      	movs	r1, r4
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	22a0      	movs	r2, #160	; 0xa0
 800116a:	02d2      	lsls	r2, r2, #11
 800116c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2202      	movs	r2, #2
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	0252      	lsls	r2, r2, #9
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	22c0      	movs	r2, #192	; 0xc0
 8001180:	0312      	lsls	r2, r2, #12
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	03d2      	lsls	r2, r2, #15
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	187b      	adds	r3, r7, r1
 800118e:	0018      	movs	r0, r3
 8001190:	f001 f896 	bl	80022c0 <HAL_RCC_OscConfig>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001198:	f000 f970 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	212c      	movs	r1, #44	; 0x2c
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	220f      	movs	r2, #15
 80011a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2203      	movs	r2, #3
 80011a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2101      	movs	r1, #1
 80011c0:	0018      	movs	r0, r3
 80011c2:	f001 fc51 	bl	8002a68 <HAL_RCC_ClockConfig>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011ca:	f000 f957 	bl	800147c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2208      	movs	r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	0018      	movs	r0, r3
 80011de:	f001 fe31 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011e6:	f000 f949 	bl	800147c <Error_Handler>
  }
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b01f      	add	sp, #124	; 0x7c
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	40007000 	.word	0x40007000
 80011f8:	ffffe7ff 	.word	0xffffe7ff

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_I2C1_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <MX_I2C1_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_I2C1_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <MX_I2C1_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_I2C1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_I2C1_Init+0x74>)
 8001238:	0018      	movs	r0, r3
 800123a:	f000 ff13 	bl	8002064 <HAL_I2C_Init>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001242:	f000 f91b 	bl	800147c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_I2C1_Init+0x74>)
 8001248:	2100      	movs	r1, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f000 ffa0 	bl	8002190 <HAL_I2CEx_ConfigAnalogFilter>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 f912 	bl	800147c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <MX_I2C1_Init+0x74>)
 800125a:	2100      	movs	r1, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f000 ffe3 	bl	8002228 <HAL_I2CEx_ConfigDigitalFilter>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 f909 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000008c 	.word	0x2000008c
 8001274:	40005400 	.word	0x40005400
 8001278:	00707cbb 	.word	0x00707cbb

0800127c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_I2C2_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_I2C2_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 fed3 	bl	8002064 <HAL_I2C_Init>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 f8db 	bl	800147c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 ff60 	bl	8002190 <HAL_I2CEx_ConfigAnalogFilter>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 f8d2 	bl	800147c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012da:	2100      	movs	r1, #0
 80012dc:	0018      	movs	r0, r3
 80012de:	f000 ffa3 	bl	8002228 <HAL_I2CEx_ConfigDigitalFilter>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f8c9 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000e0 	.word	0x200000e0
 80012f4:	40005800 	.word	0x40005800
 80012f8:	00707cbb 	.word	0x00707cbb

080012fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_SPI1_Init+0x68>)
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <MX_SPI1_Init+0x6c>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0x68>)
 8001308:	2282      	movs	r2, #130	; 0x82
 800130a:	0052      	lsls	r2, r2, #1
 800130c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_SPI1_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_SPI1_Init+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI1_Init+0x68>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_SPI1_Init+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI1_Init+0x68>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_SPI1_Init+0x68>)
 8001330:	2210      	movs	r2, #16
 8001332:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_SPI1_Init+0x68>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI1_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_SPI1_Init+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI1_Init+0x68>)
 8001348:	2207      	movs	r2, #7
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <MX_SPI1_Init+0x68>)
 800134e:	0018      	movs	r0, r3
 8001350:	f001 ff16 	bl	8003180 <HAL_SPI_Init>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001358:	f000 f890 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	20000134 	.word	0x20000134
 8001368:	40013000 	.word	0x40013000

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	2414      	movs	r4, #20
 8001374:	193b      	adds	r3, r7, r4
 8001376:	0018      	movs	r0, r3
 8001378:	2314      	movs	r3, #20
 800137a:	001a      	movs	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f002 fd69 	bl	8003e54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <MX_GPIO_Init+0x104>)
 8001384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001386:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <MX_GPIO_Init+0x104>)
 8001388:	2104      	movs	r1, #4
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <MX_GPIO_Init+0x104>)
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	2204      	movs	r2, #4
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <MX_GPIO_Init+0x104>)
 800139c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <MX_GPIO_Init+0x104>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	430a      	orrs	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <MX_GPIO_Init+0x104>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_GPIO_Init+0x104>)
 80013b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MX_GPIO_Init+0x104>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	430a      	orrs	r2, r1
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_GPIO_Init+0x104>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_GPIO_Init+0x104>)
 80013cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_GPIO_Init+0x104>)
 80013d0:	2102      	movs	r1, #2
 80013d2:	430a      	orrs	r2, r1
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_GPIO_Init+0x104>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 80013e2:	4924      	ldr	r1, [pc, #144]	; (8001474 <MX_GPIO_Init+0x108>)
 80013e4:	23a0      	movs	r3, #160	; 0xa0
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	2201      	movs	r2, #1
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 fe02 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0192      	lsls	r2, r2, #6
 80013f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2284      	movs	r2, #132	; 0x84
 80013fc:	0392      	lsls	r2, r2, #14
 80013fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	193b      	adds	r3, r7, r4
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001406:	193b      	adds	r3, r7, r4
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <MX_GPIO_Init+0x10c>)
 800140a:	0019      	movs	r1, r3
 800140c:	0010      	movs	r0, r2
 800140e:	f000 fc73 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin PA3 */
  GPIO_InitStruct.Pin = NSS_Pin|GPIO_PIN_3;
 8001412:	193b      	adds	r3, r7, r4
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_GPIO_Init+0x108>)
 8001416:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2201      	movs	r2, #1
 800141c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	193b      	adds	r3, r7, r4
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	193b      	adds	r3, r7, r4
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	193a      	adds	r2, r7, r4
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	0011      	movs	r1, r2
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fc60 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001438:	0021      	movs	r1, r4
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2204      	movs	r2, #4
 800143e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2202      	movs	r2, #2
 8001444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2203      	movs	r2, #3
 8001450:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2204      	movs	r2, #4
 8001456:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001458:	187a      	adds	r2, r7, r1
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	0011      	movs	r1, r2
 8001460:	0018      	movs	r0, r3
 8001462:	f000 fc49 	bl	8001cf8 <HAL_GPIO_Init>

}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b00b      	add	sp, #44	; 0x2c
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40021000 	.word	0x40021000
 8001474:	00008008 	.word	0x00008008
 8001478:	50000800 	.word	0x50000800

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <create_second_hop_node>:
#include <stdbool.h>
#include "routing_table.h"



SecondHop* create_second_hop_node(int id, int SF) {
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
    SecondHop* new_node = malloc(sizeof(SecondHop));
 8001490:	2010      	movs	r0, #16
 8001492:	f002 fcd5 	bl	8003e40 <malloc>
 8001496:	0003      	movs	r3, r0
 8001498:	60fb      	str	r3, [r7, #12]
    new_node->id = id;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	601a      	str	r2, [r3, #0]
    new_node->SF = SF;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
    new_node->left = NULL;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
    new_node->right = NULL;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
    return new_node;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b004      	add	sp, #16
 80014ba:	bd80      	pop	{r7, pc}

080014bc <create_neighbor_node>:

Neighbor* create_neighbor_node(int id, int SF) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    Neighbor* new_node = malloc(sizeof(Neighbor));
 80014c6:	2014      	movs	r0, #20
 80014c8:	f002 fcba 	bl	8003e40 <malloc>
 80014cc:	0003      	movs	r3, r0
 80014ce:	60fb      	str	r3, [r7, #12]
    new_node->id = id;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
    new_node->SF = SF;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	605a      	str	r2, [r3, #4]
    new_node->left = NULL;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    new_node->right = NULL;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    new_node->second_hop = NULL;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
    return new_node;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <insert_neighbor>:

//Insert neighbour in the binary tree
Neighbor* insert_neighbor(Neighbor* root, int id, int SF) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    if (root == NULL) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <insert_neighbor+0x22>
        return create_neighbor_node(id, SF);
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ffd3 	bl	80014bc <create_neighbor_node>
 8001516:	0003      	movs	r3, r0
 8001518:	e01f      	b.n	800155a <insert_neighbor+0x62>
    }
    if (id < root->id) {
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0a      	bge.n	800153a <insert_neighbor+0x42>
        root->left = insert_neighbor(root->left, id, SF);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ffe3 	bl	80014f8 <insert_neighbor>
 8001532:	0002      	movs	r2, r0
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	e00e      	b.n	8001558 <insert_neighbor+0x60>
    } else if (id > root->id) {
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	dd09      	ble.n	8001558 <insert_neighbor+0x60>
        root->right = insert_neighbor(root->right, id, SF);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ffd3 	bl	80014f8 <insert_neighbor>
 8001552:	0002      	movs	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	60da      	str	r2, [r3, #12]
    }
    return root;
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}

08001562 <insert_second_hop>:

//Insert 2nd-hop neighbor
SecondHop* insert_second_hop(SecondHop* root, int id, int SF) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
    if (root == NULL) {
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <insert_second_hop+0x22>
        return create_second_hop_node(id, SF);
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	0011      	movs	r1, r2
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff ff83 	bl	8001486 <create_second_hop_node>
 8001580:	0003      	movs	r3, r0
 8001582:	e01f      	b.n	80015c4 <insert_second_hop+0x62>
    }
    if (id < root->id) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	429a      	cmp	r2, r3
 800158c:	da0a      	bge.n	80015a4 <insert_second_hop+0x42>
        root->left = insert_second_hop(root->left, id, SF);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff ffe3 	bl	8001562 <insert_second_hop>
 800159c:	0002      	movs	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	e00e      	b.n	80015c2 <insert_second_hop+0x60>
    } else if (id > root->id) {
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dd09      	ble.n	80015c2 <insert_second_hop+0x60>
        root->right = insert_second_hop(root->right, id, SF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff ffd3 	bl	8001562 <insert_second_hop>
 80015bc:	0002      	movs	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	60da      	str	r2, [r3, #12]
    }
    return root;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}

080015cc <search_neighbor>:

Neighbor* search_neighbor(Neighbor* root, int id) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
    if (root == NULL) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <search_neighbor+0x14>
        return NULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	e01c      	b.n	800161a <search_neighbor+0x4e>
    } else if (root->id == id) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d101      	bne.n	80015ee <search_neighbor+0x22>
        return root;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	e015      	b.n	800161a <search_neighbor+0x4e>
    } else if (id < root->id) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	da08      	bge.n	800160a <search_neighbor+0x3e>
        return search_neighbor(root->left, id);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	0011      	movs	r1, r2
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff ffe3 	bl	80015cc <search_neighbor>
 8001606:	0003      	movs	r3, r0
 8001608:	e007      	b.n	800161a <search_neighbor+0x4e>
    } else {
        return search_neighbor(root->right, id);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	0011      	movs	r1, r2
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff ffda 	bl	80015cc <search_neighbor>
 8001618:	0003      	movs	r3, r0
    }
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}

08001622 <create_example_routing_table>:

    return root;
}


Neighbor* create_example_routing_table(Neighbor* routing_table) {
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]


    // Insert 1st hop neighbors
    routing_table = insert_neighbor(routing_table, 1, 10);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	220a      	movs	r2, #10
 800162e:	2101      	movs	r1, #1
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff ff61 	bl	80014f8 <insert_neighbor>
 8001636:	0003      	movs	r3, r0
 8001638:	607b      	str	r3, [r7, #4]
    routing_table = insert_neighbor(routing_table, 2, 8);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2208      	movs	r2, #8
 800163e:	2102      	movs	r1, #2
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff ff59 	bl	80014f8 <insert_neighbor>
 8001646:	0003      	movs	r3, r0
 8001648:	607b      	str	r3, [r7, #4]
    routing_table = insert_neighbor(routing_table, 3, 9);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2209      	movs	r2, #9
 800164e:	2103      	movs	r1, #3
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff ff51 	bl	80014f8 <insert_neighbor>
 8001656:	0003      	movs	r3, r0
 8001658:	607b      	str	r3, [r7, #4]

    // Find each 1st hop neighbor and insert its 2nd hop neighbors
    Neighbor* first_hop_neighbor = search_neighbor(routing_table, 1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2101      	movs	r1, #1
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff ffb4 	bl	80015cc <search_neighbor>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
    if (first_hop_neighbor != NULL) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d013      	beq.n	8001696 <create_example_routing_table+0x74>
        first_hop_neighbor->second_hop = insert_second_hop(first_hop_neighbor->second_hop, 4, 7);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2207      	movs	r2, #7
 8001674:	2104      	movs	r1, #4
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff ff73 	bl	8001562 <insert_second_hop>
 800167c:	0002      	movs	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	611a      	str	r2, [r3, #16]
        first_hop_neighbor->second_hop = insert_second_hop(first_hop_neighbor->second_hop, 5, 6);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2206      	movs	r2, #6
 8001688:	2105      	movs	r1, #5
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff ff69 	bl	8001562 <insert_second_hop>
 8001690:	0002      	movs	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	611a      	str	r2, [r3, #16]
    }

    first_hop_neighbor = search_neighbor(routing_table, 2);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2102      	movs	r1, #2
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff ff96 	bl	80015cc <search_neighbor>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
    if (first_hop_neighbor != NULL) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <create_example_routing_table+0x9c>
        first_hop_neighbor->second_hop = insert_second_hop(first_hop_neighbor->second_hop, 6, 5);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2205      	movs	r2, #5
 80016b0:	2106      	movs	r1, #6
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff ff55 	bl	8001562 <insert_second_hop>
 80016b8:	0002      	movs	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	611a      	str	r2, [r3, #16]
    }

    first_hop_neighbor = search_neighbor(routing_table, 3);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2103      	movs	r1, #3
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ff82 	bl	80015cc <search_neighbor>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
    if (first_hop_neighbor != NULL) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d013      	beq.n	80016fa <create_example_routing_table+0xd8>
        first_hop_neighbor->second_hop = insert_second_hop(first_hop_neighbor->second_hop, 7, 8);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2208      	movs	r2, #8
 80016d8:	2107      	movs	r1, #7
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff ff41 	bl	8001562 <insert_second_hop>
 80016e0:	0002      	movs	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	611a      	str	r2, [r3, #16]
        first_hop_neighbor->second_hop = insert_second_hop(first_hop_neighbor->second_hop, 8, 9);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2209      	movs	r2, #9
 80016ec:	2108      	movs	r1, #8
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff ff37 	bl	8001562 <insert_second_hop>
 80016f4:	0002      	movs	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	611a      	str	r2, [r3, #16]
    }

    return routing_table;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_MspInit+0x24>)
 800170a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x24>)
 800170e:	2101      	movs	r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_MspInit+0x24>)
 8001716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_MspInit+0x24>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0549      	lsls	r1, r1, #21
 800171e:	430a      	orrs	r2, r1
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	2414      	movs	r4, #20
 8001736:	193b      	adds	r3, r7, r4
 8001738:	0018      	movs	r0, r3
 800173a:	2314      	movs	r3, #20
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f002 fb88 	bl	8003e54 <memset>
  if(hi2c->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <HAL_I2C_MspInit+0xe0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12a      	bne.n	80017a4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001754:	2102      	movs	r1, #2
 8001756:	430a      	orrs	r2, r1
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	22c0      	movs	r2, #192	; 0xc0
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	0021      	movs	r1, r4
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2212      	movs	r2, #18
 8001774:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2203      	movs	r2, #3
 8001780:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2204      	movs	r2, #4
 8001786:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	187b      	adds	r3, r7, r1
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_I2C_MspInit+0xe8>)
 800178c:	0019      	movs	r1, r3
 800178e:	0010      	movs	r0, r2
 8001790:	f000 fab2 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	0389      	lsls	r1, r1, #14
 800179e:	430a      	orrs	r2, r1
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017a2:	e02e      	b.n	8001802 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_I2C_MspInit+0xec>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d129      	bne.n	8001802 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017b4:	2102      	movs	r1, #2
 80017b6:	430a      	orrs	r2, r1
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80017c6:	2114      	movs	r1, #20
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	22c0      	movs	r2, #192	; 0xc0
 80017cc:	01d2      	lsls	r2, r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2212      	movs	r2, #18
 80017d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2203      	movs	r2, #3
 80017e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2205      	movs	r2, #5
 80017e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_I2C_MspInit+0xe8>)
 80017ec:	0019      	movs	r1, r3
 80017ee:	0010      	movs	r0, r2
 80017f0:	f000 fa82 	bl	8001cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	03c9      	lsls	r1, r1, #15
 80017fe:	430a      	orrs	r2, r1
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b00b      	add	sp, #44	; 0x2c
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40005400 	.word	0x40005400
 8001810:	40021000 	.word	0x40021000
 8001814:	50000400 	.word	0x50000400
 8001818:	40005800 	.word	0x40005800

0800181c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	240c      	movs	r4, #12
 8001826:	193b      	adds	r3, r7, r4
 8001828:	0018      	movs	r0, r3
 800182a:	2314      	movs	r3, #20
 800182c:	001a      	movs	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	f002 fb10 	bl	8003e54 <memset>
  if(hspi->Instance==SPI1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_SPI_MspInit+0x80>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d129      	bne.n	8001892 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_SPI_MspInit+0x84>)
 8001840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_SPI_MspInit+0x84>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0149      	lsls	r1, r1, #5
 8001848:	430a      	orrs	r2, r1
 800184a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_SPI_MspInit+0x84>)
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_SPI_MspInit+0x84>)
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_SPI_MspInit+0x84>)
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001864:	0021      	movs	r1, r4
 8001866:	187b      	adds	r3, r7, r1
 8001868:	22f0      	movs	r2, #240	; 0xf0
 800186a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2202      	movs	r2, #2
 8001870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2203      	movs	r2, #3
 800187c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	187a      	adds	r2, r7, r1
 8001886:	23a0      	movs	r3, #160	; 0xa0
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	0011      	movs	r1, r2
 800188c:	0018      	movs	r0, r3
 800188e:	f000 fa33 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b009      	add	sp, #36	; 0x24
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40013000 	.word	0x40013000
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 f922 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e00a      	b.n	80018fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e4:	e000      	b.n	80018e8 <_read+0x16>
 80018e6:	bf00      	nop
 80018e8:	0001      	movs	r1, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	60ba      	str	r2, [r7, #8]
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbf0      	blt.n	80018e4 <_read+0x12>
	}

return len;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b006      	add	sp, #24
 800190a:	bd80      	pop	{r7, pc}

0800190c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e009      	b.n	8001932 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	60ba      	str	r2, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	0018      	movs	r0, r3
 8001928:	e000      	b.n	800192c <_write+0x20>
 800192a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbf1      	blt.n	800191e <_write+0x12>
	}
	return len;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b006      	add	sp, #24
 8001942:	bd80      	pop	{r7, pc}

08001944 <_close>:

int _close(int file)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	return -1;
 800194c:	2301      	movs	r3, #1
 800194e:	425b      	negs	r3, r3
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	0192      	lsls	r2, r2, #6
 8001968:	605a      	str	r2, [r3, #4]
	return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <_isatty>:

int _isatty(int file)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b002      	add	sp, #8
 8001984:	bd80      	pop	{r7, pc}

08001986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
	return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f002 fa0e 	bl	8003dec <__errno>
 80019d0:	0003      	movs	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	425b      	negs	r3, r3
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	18d2      	adds	r2, r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20005000 	.word	0x20005000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	200002b8 	.word	0x200002b8
 8001a04:	200002d0 	.word	0x200002d0

08001a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <Reset_Handler>:
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopForever+0x2>)
 8001a16:	4685      	mov	sp, r0
 8001a18:	f7ff fff6 	bl	8001a08 <SystemInit>
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <LoopForever+0x6>)
 8001a1e:	490d      	ldr	r1, [pc, #52]	; (8001a54 <LoopForever+0xa>)
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <LoopForever+0xe>)
 8001a22:	2300      	movs	r3, #0
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:
 8001a26:	58d4      	ldr	r4, [r2, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:
 8001a2c:	18c4      	adds	r4, r0, r3
 8001a2e:	428c      	cmp	r4, r1
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <LoopForever+0x12>)
 8001a34:	4c0a      	ldr	r4, [pc, #40]	; (8001a60 <LoopForever+0x16>)
 8001a36:	2300      	movs	r3, #0
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:
 8001a3e:	42a2      	cmp	r2, r4
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>
 8001a42:	f002 f9d9 	bl	8003df8 <__libc_init_array>
 8001a46:	f7ff fab9 	bl	8000fbc <main>

08001a4a <LoopForever>:
 8001a4a:	e7fe      	b.n	8001a4a <LoopForever>
 8001a4c:	20005000 	.word	0x20005000
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000070 	.word	0x20000070
 8001a58:	08004f00 	.word	0x08004f00
 8001a5c:	20000070 	.word	0x20000070
 8001a60:	200002d0 	.word	0x200002d0

08001a64 <ADC1_COMP_IRQHandler>:
 8001a64:	e7fe      	b.n	8001a64 <ADC1_COMP_IRQHandler>
	...

08001a68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x3c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Init+0x3c>)
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a80:	2000      	movs	r0, #0
 8001a82:	f000 f811 	bl	8001aa8 <HAL_InitTick>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e001      	b.n	8001a96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a92:	f7ff fe37 	bl	8001704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	781b      	ldrb	r3, [r3, #0]
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_InitTick+0x5c>)
 8001ab2:	681c      	ldr	r4, [r3, #0]
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_InitTick+0x60>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	0019      	movs	r1, r3
 8001aba:	23fa      	movs	r3, #250	; 0xfa
 8001abc:	0098      	lsls	r0, r3, #2
 8001abe:	f7fe fb2d 	bl	800011c <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	f7fe fb28 	bl	800011c <__udivsi3>
 8001acc:	0003      	movs	r3, r0
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 f905 	bl	8001cde <HAL_SYSTICK_Config>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e00f      	b.n	8001afc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d80b      	bhi.n	8001afa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	2200      	movs	r2, #0
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 f8e2 	bl	8001cb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_InitTick+0x64>)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b003      	add	sp, #12
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x1c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	001a      	movs	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x20>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	18d2      	adds	r2, r2, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_IncTick+0x20>)
 8001b22:	601a      	str	r2, [r3, #0]
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	200002bc 	.word	0x200002bc

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b02      	ldr	r3, [pc, #8]	; (8001b44 <HAL_GetTick+0x10>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	200002bc 	.word	0x200002bc

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	001a      	movs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	189b      	adds	r3, r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	f7ff ffe0 	bl	8001b34 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	20000008 	.word	0x20000008

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	0002      	movs	r2, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba4:	d828      	bhi.n	8001bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <__NVIC_SetPriority+0xd4>)
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	33c0      	adds	r3, #192	; 0xc0
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	589b      	ldr	r3, [r3, r2]
 8001bb6:	1dfa      	adds	r2, r7, #7
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	0011      	movs	r1, r2
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	00d2      	lsls	r2, r2, #3
 8001bc2:	21ff      	movs	r1, #255	; 0xff
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	43d2      	mvns	r2, r2
 8001bca:	401a      	ands	r2, r3
 8001bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	22ff      	movs	r2, #255	; 0xff
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	2303      	movs	r3, #3
 8001bde:	4003      	ands	r3, r0
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be4:	481f      	ldr	r0, [pc, #124]	; (8001c64 <__NVIC_SetPriority+0xd4>)
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	33c0      	adds	r3, #192	; 0xc0
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bf6:	e031      	b.n	8001c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <__NVIC_SetPriority+0xd8>)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0019      	movs	r1, r3
 8001c00:	230f      	movs	r3, #15
 8001c02:	400b      	ands	r3, r1
 8001c04:	3b08      	subs	r3, #8
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3306      	adds	r3, #6
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	18d3      	adds	r3, r2, r3
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1dfa      	adds	r2, r7, #7
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	0011      	movs	r1, r2
 8001c18:	2203      	movs	r2, #3
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	401a      	ands	r2, r3
 8001c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	22ff      	movs	r2, #255	; 0xff
 8001c30:	401a      	ands	r2, r3
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	2303      	movs	r3, #3
 8001c3a:	4003      	ands	r3, r0
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <__NVIC_SetPriority+0xd8>)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	001c      	movs	r4, r3
 8001c48:	230f      	movs	r3, #15
 8001c4a:	4023      	ands	r3, r4
 8001c4c:	3b08      	subs	r3, #8
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	430a      	orrs	r2, r1
 8001c52:	3306      	adds	r3, #6
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	18c3      	adds	r3, r0, r3
 8001c58:	3304      	adds	r3, #4
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b003      	add	sp, #12
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	045b      	lsls	r3, r3, #17
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d301      	bcc.n	8001c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c80:	2301      	movs	r3, #1
 8001c82:	e010      	b.n	8001ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <SysTick_Config+0x44>)
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	3a01      	subs	r2, #1
 8001c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	425b      	negs	r3, r3
 8001c90:	2103      	movs	r1, #3
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff ff7c 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x44>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x44>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b002      	add	sp, #8
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	1c02      	adds	r2, r0, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	0011      	movs	r1, r2
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b004      	add	sp, #16
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ffbf 	bl	8001c6c <SysTick_Config>
 8001cee:	0003      	movs	r3, r0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d0e:	e155      	b.n	8001fbc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4091      	lsls	r1, r2
 8001d1a:	000a      	movs	r2, r1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <HAL_GPIO_Init+0x30>
 8001d26:	e146      	b.n	8001fb6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d005      	beq.n	8001d40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d130      	bne.n	8001da2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	0013      	movs	r3, r2
 8001d50:	43da      	mvns	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d76:	2201      	movs	r2, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d017      	beq.n	8001dde <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2203      	movs	r2, #3
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d123      	bne.n	8001e32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	58d3      	ldr	r3, [r2, r3]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2107      	movs	r1, #7
 8001e16:	400b      	ands	r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	6939      	ldr	r1, [r7, #16]
 8001e30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	401a      	ands	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	23c0      	movs	r3, #192	; 0xc0
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d100      	bne.n	8001e74 <HAL_GPIO_Init+0x17c>
 8001e72:	e0a0      	b.n	8001fb6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e74:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_GPIO_Init+0x2dc>)
 8001e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e78:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_GPIO_Init+0x2dc>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e80:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	589b      	ldr	r3, [r3, r2]
 8001e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	23a0      	movs	r3, #160	; 0xa0
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x1f6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <HAL_GPIO_Init+0x2e4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x1f2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a49      	ldr	r2, [pc, #292]	; (8001fe0 <HAL_GPIO_Init+0x2e8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x1ee>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a48      	ldr	r2, [pc, #288]	; (8001fe4 <HAL_GPIO_Init+0x2ec>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x1ea>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_GPIO_Init+0x2f0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x1e6>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a46      	ldr	r2, [pc, #280]	; (8001fec <HAL_GPIO_Init+0x2f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x1e2>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2e0>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	035b      	lsls	r3, r3, #13
 8001f26:	4013      	ands	r3, r2
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	039b      	lsls	r3, r3, #14
 8001f50:	4013      	ands	r3, r2
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	029b      	lsls	r3, r3, #10
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_GPIO_Init+0x2f8>)
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	40da      	lsrs	r2, r3
 8001fc4:	1e13      	subs	r3, r2, #0
 8001fc6:	d000      	beq.n	8001fca <HAL_GPIO_Init+0x2d2>
 8001fc8:	e6a2      	b.n	8001d10 <HAL_GPIO_Init+0x18>
  }
}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b006      	add	sp, #24
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	50000400 	.word	0x50000400
 8001fe0:	50000800 	.word	0x50000800
 8001fe4:	50000c00 	.word	0x50000c00
 8001fe8:	50001000 	.word	0x50001000
 8001fec:	50001c00 	.word	0x50001c00
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	0008      	movs	r0, r1
 8001ffe:	0011      	movs	r1, r2
 8002000:	1cbb      	adds	r3, r7, #2
 8002002:	1c02      	adds	r2, r0, #0
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	1c7b      	adds	r3, r7, #1
 8002008:	1c0a      	adds	r2, r1, #0
 800200a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200c:	1c7b      	adds	r3, r7, #1
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002014:	1cbb      	adds	r3, r7, #2
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800201e:	1cbb      	adds	r3, r7, #2
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	000a      	movs	r2, r1
 8002038:	1cbb      	adds	r3, r7, #2
 800203a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002042:	1cbb      	adds	r3, r7, #2
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	041a      	lsls	r2, r3, #16
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	1cb9      	adds	r1, r7, #2
 8002052:	8809      	ldrh	r1, [r1, #0]
 8002054:	400b      	ands	r3, r1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e082      	b.n	800217c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2241      	movs	r2, #65	; 0x41
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff fb4d 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	2124      	movs	r1, #36	; 0x24
 8002098:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4934      	ldr	r1, [pc, #208]	; (8002184 <HAL_I2C_Init+0x120>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4931      	ldr	r1, [pc, #196]	; (8002188 <HAL_I2C_Init+0x124>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0209      	lsls	r1, r1, #8
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e007      	b.n	80020f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2184      	movs	r1, #132	; 0x84
 80020ec:	0209      	lsls	r1, r1, #8
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d104      	bne.n	8002104 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	491f      	ldr	r1, [pc, #124]	; (800218c <HAL_I2C_Init+0x128>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	491a      	ldr	r1, [pc, #104]	; (8002188 <HAL_I2C_Init+0x124>)
 8002120:	400a      	ands	r2, r1
 8002122:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	431a      	orrs	r2, r3
 800212e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69d9      	ldr	r1, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2241      	movs	r2, #65	; 0x41
 8002168:	2120      	movs	r1, #32
 800216a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2242      	movs	r2, #66	; 0x42
 8002176:	2100      	movs	r1, #0
 8002178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}
 8002184:	f0ffffff 	.word	0xf0ffffff
 8002188:	ffff7fff 	.word	0xffff7fff
 800218c:	02008000 	.word	0x02008000

08002190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2241      	movs	r2, #65	; 0x41
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d138      	bne.n	8002218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2240      	movs	r2, #64	; 0x40
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e032      	b.n	800221a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	2101      	movs	r1, #1
 80021ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2241      	movs	r2, #65	; 0x41
 80021c0:	2124      	movs	r1, #36	; 0x24
 80021c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2101      	movs	r1, #1
 80021d0:	438a      	bics	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4911      	ldr	r1, [pc, #68]	; (8002224 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2101      	movs	r1, #1
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2241      	movs	r2, #65	; 0x41
 8002208:	2120      	movs	r1, #32
 800220a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	2100      	movs	r1, #0
 8002212:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b002      	add	sp, #8
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	ffffefff 	.word	0xffffefff

08002228 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2241      	movs	r2, #65	; 0x41
 8002236:	5c9b      	ldrb	r3, [r3, r2]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	d139      	bne.n	80022b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002248:	2302      	movs	r3, #2
 800224a:	e033      	b.n	80022b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	2101      	movs	r1, #1
 8002252:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2241      	movs	r2, #65	; 0x41
 8002258:	2124      	movs	r1, #36	; 0x24
 800225a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	438a      	bics	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2241      	movs	r2, #65	; 0x41
 80022a2:	2120      	movs	r1, #32
 80022a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
  }
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b004      	add	sp, #16
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	fffff0ff 	.word	0xfffff0ff

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f000 fbbf 	bl	8002a52 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d4:	4bc9      	ldr	r3, [pc, #804]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	220c      	movs	r2, #12
 80022da:	4013      	ands	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022de:	4bc7      	ldr	r3, [pc, #796]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	025b      	lsls	r3, r3, #9
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d100      	bne.n	80022f6 <HAL_RCC_OscConfig+0x36>
 80022f4:	e07e      	b.n	80023f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d007      	beq.n	800230c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d112      	bne.n	8002328 <HAL_RCC_OscConfig+0x68>
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	429a      	cmp	r2, r3
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4bbb      	ldr	r3, [pc, #748]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	029b      	lsls	r3, r3, #10
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCC_OscConfig+0x5a>
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_OscConfig+0x132>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d167      	bne.n	80023f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	f000 fb95 	bl	8002a52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	025b      	lsls	r3, r3, #9
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x84>
 8002334:	4bb1      	ldr	r3, [pc, #708]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4bb0      	ldr	r3, [pc, #704]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	0249      	lsls	r1, r1, #9
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e027      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	23a0      	movs	r3, #160	; 0xa0
 800234a:	02db      	lsls	r3, r3, #11
 800234c:	429a      	cmp	r2, r3
 800234e:	d10e      	bne.n	800236e <HAL_RCC_OscConfig+0xae>
 8002350:	4baa      	ldr	r3, [pc, #680]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4ba9      	ldr	r3, [pc, #676]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	02c9      	lsls	r1, r1, #11
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	4ba7      	ldr	r3, [pc, #668]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4ba6      	ldr	r3, [pc, #664]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	0249      	lsls	r1, r1, #9
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e012      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 800236e:	4ba3      	ldr	r3, [pc, #652]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4ba2      	ldr	r3, [pc, #648]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002374:	49a2      	ldr	r1, [pc, #648]	; (8002600 <HAL_RCC_OscConfig+0x340>)
 8002376:	400a      	ands	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	4ba0      	ldr	r3, [pc, #640]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	025b      	lsls	r3, r3, #9
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4b9c      	ldr	r3, [pc, #624]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b9b      	ldr	r3, [pc, #620]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800238e:	499d      	ldr	r1, [pc, #628]	; (8002604 <HAL_RCC_OscConfig+0x344>)
 8002390:	400a      	ands	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fbca 	bl	8001b34 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a4:	e009      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a6:	f7ff fbc5 	bl	8001b34 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d902      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	f000 fb4c 	bl	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ba:	4b90      	ldr	r3, [pc, #576]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	d0ef      	beq.n	80023a6 <HAL_RCC_OscConfig+0xe6>
 80023c6:	e015      	b.n	80023f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fbb4 	bl	8001b34 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d2:	f7ff fbaf 	bl	8001b34 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e336      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023e4:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x112>
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d100      	bne.n	8002400 <HAL_RCC_OscConfig+0x140>
 80023fe:	e099      	b.n	8002534 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	2220      	movs	r2, #32
 800240a:	4013      	ands	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002414:	2120      	movs	r1, #32
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	2220      	movs	r2, #32
 800241e:	4393      	bics	r3, r2
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d005      	beq.n	8002434 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d13e      	bne.n	80024ac <HAL_RCC_OscConfig+0x1ec>
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d13b      	bne.n	80024ac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002434:	4b71      	ldr	r3, [pc, #452]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2204      	movs	r2, #4
 800243a:	4013      	ands	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_RCC_OscConfig+0x188>
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e304      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x348>)
 800244e:	4013      	ands	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	021a      	lsls	r2, r3, #8
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2209      	movs	r2, #9
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002470:	f000 fc42 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002474:	0001      	movs	r1, r0
 8002476:	4b61      	ldr	r3, [pc, #388]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	220f      	movs	r2, #15
 800247e:	4013      	ands	r3, r2
 8002480:	4a62      	ldr	r2, [pc, #392]	; (800260c <HAL_RCC_OscConfig+0x34c>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	000a      	movs	r2, r1
 8002486:	40da      	lsrs	r2, r3
 8002488:	4b61      	ldr	r3, [pc, #388]	; (8002610 <HAL_RCC_OscConfig+0x350>)
 800248a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800248c:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_RCC_OscConfig+0x354>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2513      	movs	r5, #19
 8002492:	197c      	adds	r4, r7, r5
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff fb07 	bl	8001aa8 <HAL_InitTick>
 800249a:	0003      	movs	r3, r0
 800249c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800249e:	197b      	adds	r3, r7, r5
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d046      	beq.n	8002534 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80024a6:	197b      	adds	r3, r7, r5
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	e2d2      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d027      	beq.n	8002502 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024b2:	4b52      	ldr	r3, [pc, #328]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2209      	movs	r2, #9
 80024b8:	4393      	bics	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fb36 	bl	8001b34 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff fb31 	bl	8001b34 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e2b8      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e0:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2204      	movs	r2, #4
 80024e6:	4013      	ands	r3, r2
 80024e8:	d0f1      	beq.n	80024ce <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x348>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	4b40      	ldr	r3, [pc, #256]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	e018      	b.n	8002534 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002508:	2101      	movs	r1, #1
 800250a:	438a      	bics	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fb11 	bl	8001b34 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7ff fb0c 	bl	8001b34 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e293      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2204      	movs	r2, #4
 8002530:	4013      	ands	r3, r2
 8002532:	d1f1      	bne.n	8002518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2210      	movs	r2, #16
 800253a:	4013      	ands	r3, r2
 800253c:	d100      	bne.n	8002540 <HAL_RCC_OscConfig+0x280>
 800253e:	e0a2      	b.n	8002686 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d140      	bne.n	80025c8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4013      	ands	r3, r2
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x29e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e279      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255e:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x358>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	0a19      	lsrs	r1, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	061a      	lsls	r2, r3, #24
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	0b5b      	lsrs	r3, r3, #13
 800258c:	3301      	adds	r3, #1
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	0212      	lsls	r2, r2, #8
 8002592:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	210f      	movs	r1, #15
 800259c:	400b      	ands	r3, r1
 800259e:	491b      	ldr	r1, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x34c>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_RCC_OscConfig+0x350>)
 80025a6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_RCC_OscConfig+0x354>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2513      	movs	r5, #19
 80025ae:	197c      	adds	r4, r7, r5
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff fa79 	bl	8001aa8 <HAL_InitTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80025ba:	197b      	adds	r3, r7, r5
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d061      	beq.n	8002686 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80025c2:	197b      	adds	r3, r7, r5
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	e244      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d040      	beq.n	8002652 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x33c>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0049      	lsls	r1, r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff faa9 	bl	8001b34 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025e6:	e019      	b.n	800261c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e8:	f7ff faa4 	bl	8001b34 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d912      	bls.n	800261c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e22b      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40021000 	.word	0x40021000
 8002600:	fffeffff 	.word	0xfffeffff
 8002604:	fffbffff 	.word	0xfffbffff
 8002608:	ffffe0ff 	.word	0xffffe0ff
 800260c:	08004e3c 	.word	0x08004e3c
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004
 8002618:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800261c:	4bca      	ldr	r3, [pc, #808]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d0df      	beq.n	80025e8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	4bc7      	ldr	r3, [pc, #796]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4ac7      	ldr	r2, [pc, #796]	; (800294c <HAL_RCC_OscConfig+0x68c>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	4bc4      	ldr	r3, [pc, #784]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263c:	4bc2      	ldr	r3, [pc, #776]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	0a19      	lsrs	r1, r3, #8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	061a      	lsls	r2, r3, #24
 800264a:	4bbf      	ldr	r3, [pc, #764]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	e019      	b.n	8002686 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002652:	4bbd      	ldr	r3, [pc, #756]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4bbc      	ldr	r3, [pc, #752]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002658:	49bd      	ldr	r1, [pc, #756]	; (8002950 <HAL_RCC_OscConfig+0x690>)
 800265a:	400a      	ands	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7ff fa69 	bl	8001b34 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7ff fa64 	bl	8001b34 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1eb      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800267a:	4bb3      	ldr	r3, [pc, #716]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2208      	movs	r2, #8
 800268c:	4013      	ands	r3, r2
 800268e:	d036      	beq.n	80026fe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d019      	beq.n	80026cc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4bab      	ldr	r3, [pc, #684]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800269a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800269c:	4baa      	ldr	r3, [pc, #680]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7ff fa46 	bl	8001b34 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7ff fa41 	bl	8001b34 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1c8      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026c0:	4ba1      	ldr	r3, [pc, #644]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d0f1      	beq.n	80026ae <HAL_RCC_OscConfig+0x3ee>
 80026ca:	e018      	b.n	80026fe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b9e      	ldr	r3, [pc, #632]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80026ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026d0:	4b9d      	ldr	r3, [pc, #628]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	438a      	bics	r2, r1
 80026d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff fa2c 	bl	8001b34 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7ff fa27 	bl	8001b34 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1ae      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f4:	4b94      	ldr	r3, [pc, #592]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	2202      	movs	r2, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	d1f1      	bne.n	80026e2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2204      	movs	r2, #4
 8002704:	4013      	ands	r3, r2
 8002706:	d100      	bne.n	800270a <HAL_RCC_OscConfig+0x44a>
 8002708:	e0ae      	b.n	8002868 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2023      	movs	r0, #35	; 0x23
 800270c:	183b      	adds	r3, r7, r0
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b8d      	ldr	r3, [pc, #564]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	055b      	lsls	r3, r3, #21
 800271a:	4013      	ands	r3, r2
 800271c:	d109      	bne.n	8002732 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b8a      	ldr	r3, [pc, #552]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0549      	lsls	r1, r1, #21
 8002728:	430a      	orrs	r2, r1
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800272c:	183b      	adds	r3, r7, r0
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x694>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_OscConfig+0x694>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b84      	ldr	r3, [pc, #528]	; (8002954 <HAL_RCC_OscConfig+0x694>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	0049      	lsls	r1, r1, #1
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274c:	f7ff f9f2 	bl	8001b34 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7ff f9ed 	bl	8001b34 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e174      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b7a      	ldr	r3, [pc, #488]	; (8002954 <HAL_RCC_OscConfig+0x694>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4013      	ands	r3, r2
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	429a      	cmp	r2, r3
 800277e:	d107      	bne.n	8002790 <HAL_RCC_OscConfig+0x4d0>
 8002780:	4b71      	ldr	r3, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	0049      	lsls	r1, r1, #1
 800278a:	430a      	orrs	r2, r1
 800278c:	651a      	str	r2, [r3, #80]	; 0x50
 800278e:	e031      	b.n	80027f4 <HAL_RCC_OscConfig+0x534>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4f2>
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800279a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800279e:	496c      	ldr	r1, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x690>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	651a      	str	r2, [r3, #80]	; 0x50
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027a8:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027aa:	496b      	ldr	r1, [pc, #428]	; (8002958 <HAL_RCC_OscConfig+0x698>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	651a      	str	r2, [r3, #80]	; 0x50
 80027b0:	e020      	b.n	80027f4 <HAL_RCC_OscConfig+0x534>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	23a0      	movs	r3, #160	; 0xa0
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d10e      	bne.n	80027dc <HAL_RCC_OscConfig+0x51c>
 80027be:	4b62      	ldr	r3, [pc, #392]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c2:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	00c9      	lsls	r1, r1, #3
 80027c8:	430a      	orrs	r2, r1
 80027ca:	651a      	str	r2, [r3, #80]	; 0x50
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d0:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	0049      	lsls	r1, r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	651a      	str	r2, [r3, #80]	; 0x50
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x534>
 80027dc:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027e2:	495b      	ldr	r1, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x690>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	651a      	str	r2, [r3, #80]	; 0x50
 80027e8:	4b57      	ldr	r3, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ec:	4b56      	ldr	r3, [pc, #344]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80027ee:	495a      	ldr	r1, [pc, #360]	; (8002958 <HAL_RCC_OscConfig+0x698>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7ff f99a 	bl	8001b34 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002804:	e009      	b.n	800281a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7ff f995 	bl	8001b34 <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_RCC_OscConfig+0x69c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e11b      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281a:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800281c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d0ef      	beq.n	8002806 <HAL_RCC_OscConfig+0x546>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7ff f984 	bl	8001b34 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002830:	e009      	b.n	8002846 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff f97f 	bl	8001b34 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_RCC_OscConfig+0x69c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e105      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002846:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d1ef      	bne.n	8002832 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002852:	2323      	movs	r3, #35	; 0x23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800285e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002862:	493f      	ldr	r1, [pc, #252]	; (8002960 <HAL_RCC_OscConfig+0x6a0>)
 8002864:	400a      	ands	r2, r1
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	4013      	ands	r3, r2
 8002870:	d049      	beq.n	8002906 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d026      	beq.n	80028c8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002880:	2101      	movs	r1, #1
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
 8002892:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCC_OscConfig+0x6a4>)
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_RCC_OscConfig+0x6a4>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0189      	lsls	r1, r1, #6
 800289c:	430a      	orrs	r2, r1
 800289e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff f948 	bl	8001b34 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028aa:	f7ff f943 	bl	8001b34 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e0ca      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d0f1      	beq.n	80028aa <HAL_RCC_OscConfig+0x5ea>
 80028c6:	e01e      	b.n	8002906 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	438a      	bics	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCC_OscConfig+0x6a4>)
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_RCC_OscConfig+0x6a4>)
 80028da:	4923      	ldr	r1, [pc, #140]	; (8002968 <HAL_RCC_OscConfig+0x6a8>)
 80028dc:	400a      	ands	r2, r1
 80028de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f928 	bl	8001b34 <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ea:	f7ff f923 	bl	8001b34 <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0aa      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d1f1      	bne.n	80028ea <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x650>
 800290e:	e09f      	b.n	8002a50 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d100      	bne.n	8002918 <HAL_RCC_OscConfig+0x658>
 8002916:	e078      	b.n	8002a0a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	2b02      	cmp	r3, #2
 800291e:	d159      	bne.n	80029d4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_RCC_OscConfig+0x688>)
 8002926:	4911      	ldr	r1, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x6ac>)
 8002928:	400a      	ands	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f902 	bl	8001b34 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002934:	e01c      	b.n	8002970 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff f8fd 	bl	8001b34 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d915      	bls.n	8002970 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e084      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
 8002948:	40021000 	.word	0x40021000
 800294c:	ffff1fff 	.word	0xffff1fff
 8002950:	fffffeff 	.word	0xfffffeff
 8002954:	40007000 	.word	0x40007000
 8002958:	fffffbff 	.word	0xfffffbff
 800295c:	00001388 	.word	0x00001388
 8002960:	efffffff 	.word	0xefffffff
 8002964:	40010000 	.word	0x40010000
 8002968:	ffffdfff 	.word	0xffffdfff
 800296c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	049b      	lsls	r3, r3, #18
 8002978:	4013      	ands	r3, r2
 800297a:	d1dc      	bne.n	8002936 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a37      	ldr	r2, [pc, #220]	; (8002a60 <HAL_RCC_OscConfig+0x7a0>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	431a      	orrs	r2, r3
 8002996:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	0449      	lsls	r1, r1, #17
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7ff f8c3 	bl	8001b34 <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff f8be 	bl	8001b34 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e045      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	049b      	lsls	r3, r3, #18
 80029ce:	4013      	ands	r3, r2
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x6f4>
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 80029da:	4922      	ldr	r1, [pc, #136]	; (8002a64 <HAL_RCC_OscConfig+0x7a4>)
 80029dc:	400a      	ands	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff f8a8 	bl	8001b34 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff f8a3 	bl	8001b34 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e02a      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	049b      	lsls	r3, r3, #18
 8002a04:	4013      	ands	r3, r2
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x72a>
 8002a08:	e022      	b.n	8002a50 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01d      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_OscConfig+0x79c>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	025b      	lsls	r3, r3, #9
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10f      	bne.n	8002a4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	23f0      	movs	r3, #240	; 0xf0
 8002a30:	039b      	lsls	r3, r3, #14
 8002a32:	401a      	ands	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	23c0      	movs	r3, #192	; 0xc0
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b00a      	add	sp, #40	; 0x28
 8002a58:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	ff02ffff 	.word	0xff02ffff
 8002a64:	feffffff 	.word	0xfeffffff

08002a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b5b0      	push	{r4, r5, r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e128      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b96      	ldr	r3, [pc, #600]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d91e      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b93      	ldr	r3, [pc, #588]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4393      	bics	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	4b90      	ldr	r3, [pc, #576]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a9c:	f7ff f84a 	bl	8001b34 <HAL_GetTick>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa4:	e009      	b.n	8002aba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa6:	f7ff f845 	bl	8001b34 <HAL_GetTick>
 8002aaa:	0002      	movs	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	4a8a      	ldr	r2, [pc, #552]	; (8002cdc <HAL_RCC_ClockConfig+0x274>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e109      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad2:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	22f0      	movs	r2, #240	; 0xf0
 8002ad8:	4393      	bics	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d100      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x8a>
 8002af0:	e089      	b.n	8002c06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002afa:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	4013      	ands	r3, r2
 8002b04:	d120      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0e1      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b12:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	049b      	lsls	r3, r3, #18
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d114      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0d5      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d109      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0ca      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b38:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0c2      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b48:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	4393      	bics	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe ffea 	bl	8001b34 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6c:	e009      	b.n	8002b82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe ffe1 	bl	8001b34 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_RCC_ClockConfig+0x274>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0a5      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b82:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	220c      	movs	r2, #12
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d1ef      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x106>
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d111      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9a:	f7fe ffcb 	bl	8001b34 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	4a4d      	ldr	r2, [pc, #308]	; (8002cdc <HAL_RCC_ClockConfig+0x274>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e08f      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d1ef      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x132>
 8002bba:	e024      	b.n	8002c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d11b      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc6:	f7fe ffb5 	bl	8001b34 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4a42      	ldr	r2, [pc, #264]	; (8002cdc <HAL_RCC_ClockConfig+0x274>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e079      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	220c      	movs	r2, #12
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d1ef      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x15e>
 8002be6:	e00e      	b.n	8002c06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7fe ffa4 	bl	8001b34 <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	; (8002cdc <HAL_RCC_ClockConfig+0x274>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e068      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	220c      	movs	r2, #12
 8002c02:	4013      	ands	r3, r2
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d21e      	bcs.n	8002c52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c26:	f7fe ff85 	bl	8001b34 <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	e009      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe ff80 	bl	8001b34 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <HAL_RCC_ClockConfig+0x274>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e044      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_ClockConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d1ee      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x27c>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2208      	movs	r2, #8
 8002c76:	4013      	ands	r3, r2
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_RCC_ClockConfig+0x280>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	00da      	lsls	r2, r3, #3
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c90:	f000 f832 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002c94:	0001      	movs	r1, r0
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x278>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x284>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	40da      	lsrs	r2, r3
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_ClockConfig+0x288>)
 8002caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_RCC_ClockConfig+0x28c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	250b      	movs	r5, #11
 8002cb2:	197c      	adds	r4, r7, r5
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fe fef7 	bl	8001aa8 <HAL_InitTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002cc6:	197b      	adds	r3, r7, r5
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	e000      	b.n	8002cce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	00001388 	.word	0x00001388
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	fffff8ff 	.word	0xfffff8ff
 8002ce8:	ffffc7ff 	.word	0xffffc7ff
 8002cec:	08004e3c 	.word	0x08004e3c
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b5b0      	push	{r4, r5, r7, lr}
 8002cfa:	b08e      	sub	sp, #56	; 0x38
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002cfe:	4b4c      	ldr	r3, [pc, #304]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	230c      	movs	r3, #12
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d014      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d0e:	d900      	bls.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1a>
 8002d10:	e07b      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x112>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x24>
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1a:	e076      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d1c:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002d2a:	e07c      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002d2c:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d30:	e079      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x144>)
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d36:	e076      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	0c9a      	lsrs	r2, r3, #18
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	401a      	ands	r2, r3
 8002d40:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x148>)
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	0d9a      	lsrs	r2, r3, #22
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	3301      	adds	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d01a      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x144>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	69b8      	ldr	r0, [r7, #24]
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	f7fd fb6b 	bl	8000448 <__aeabi_lmul>
 8002d72:	0002      	movs	r2, r0
 8002d74:	000b      	movs	r3, r1
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f7fd fb3f 	bl	8000408 <__aeabi_uldivmod>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	000b      	movs	r3, r1
 8002d8e:	0013      	movs	r3, r2
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
 8002d92:	e037      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002da8:	2300      	movs	r3, #0
 8002daa:	68b8      	ldr	r0, [r7, #8]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	f7fd fb4b 	bl	8000448 <__aeabi_lmul>
 8002db2:	0002      	movs	r2, r0
 8002db4:	000b      	movs	r3, r1
 8002db6:	0010      	movs	r0, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f7fd fb1f 	bl	8000408 <__aeabi_uldivmod>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	000b      	movs	r3, r1
 8002dce:	0013      	movs	r3, r2
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	e017      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	2300      	movs	r3, #0
 8002dda:	0019      	movs	r1, r3
 8002ddc:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x140>)
 8002dde:	2300      	movs	r3, #0
 8002de0:	f7fd fb32 	bl	8000448 <__aeabi_lmul>
 8002de4:	0002      	movs	r2, r0
 8002de6:	000b      	movs	r3, r1
 8002de8:	0010      	movs	r0, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	001c      	movs	r4, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	001d      	movs	r5, r3
 8002df4:	0022      	movs	r2, r4
 8002df6:	002b      	movs	r3, r5
 8002df8:	f7fd fb06 	bl	8000408 <__aeabi_uldivmod>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	000b      	movs	r3, r1
 8002e00:	0013      	movs	r3, r2
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e08:	e00d      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	2207      	movs	r2, #7
 8002e12:	4013      	ands	r3, r2
 8002e14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	0212      	lsls	r2, r2, #8
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b00e      	add	sp, #56	; 0x38
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	003d0900 	.word	0x003d0900
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	007a1200 	.word	0x007a1200
 8002e40:	08004e4c 	.word	0x08004e4c

08002e44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002e4c:	2317      	movs	r3, #23
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4013      	ands	r3, r2
 8002e68:	d100      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002e6a:	e104      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6c:	4bb9      	ldr	r3, [pc, #740]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	055b      	lsls	r3, r3, #21
 8002e74:	4013      	ands	r3, r2
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4bb6      	ldr	r3, [pc, #728]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7c:	4bb5      	ldr	r3, [pc, #724]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0549      	lsls	r1, r1, #21
 8002e82:	430a      	orrs	r2, r1
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e86:	2317      	movs	r3, #23
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4bb2      	ldr	r3, [pc, #712]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4baf      	ldr	r3, [pc, #700]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4bae      	ldr	r3, [pc, #696]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0049      	lsls	r1, r1, #1
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fe44 	bl	8001b34 <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7fe fe3f 	bl	8001b34 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e143      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4ba4      	ldr	r3, [pc, #656]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002ed0:	4ba0      	ldr	r3, [pc, #640]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	23c0      	movs	r3, #192	; 0xc0
 8002ed6:	039b      	lsls	r3, r3, #14
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	23c0      	movs	r3, #192	; 0xc0
 8002ee2:	039b      	lsls	r3, r3, #14
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	23c0      	movs	r3, #192	; 0xc0
 8002ef2:	039b      	lsls	r3, r3, #14
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d013      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	23c0      	movs	r3, #192	; 0xc0
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	401a      	ands	r2, r3
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	029b      	lsls	r3, r3, #10
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d10a      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f0e:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	401a      	ands	r2, r3
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	029b      	lsls	r3, r3, #10
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e113      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f24:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f28:	23c0      	movs	r3, #192	; 0xc0
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d049      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	029b      	lsls	r3, r3, #10
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d004      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	23c0      	movs	r3, #192	; 0xc0
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d034      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d02e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f76:	4b77      	ldr	r3, [pc, #476]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	0309      	lsls	r1, r1, #12
 8002f80:	430a      	orrs	r2, r1
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f88:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f8a:	4975      	ldr	r1, [pc, #468]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002f90:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d014      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fdc8 	bl	8001b34 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa8:	e009      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe fdc3 	bl	8001b34 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	4a6b      	ldr	r2, [pc, #428]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0c6      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d0ef      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d01f      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	23c0      	movs	r3, #192	; 0xc0
 8002fdc:	029b      	lsls	r3, r3, #10
 8002fde:	401a      	ands	r2, r3
 8002fe0:	23c0      	movs	r3, #192	; 0xc0
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002fe8:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5e      	ldr	r2, [pc, #376]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	23c0      	movs	r3, #192	; 0xc0
 8002ff8:	039b      	lsls	r3, r3, #14
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	4b55      	ldr	r3, [pc, #340]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	4b54      	ldr	r3, [pc, #336]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003004:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	23c0      	movs	r3, #192	; 0xc0
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	401a      	ands	r2, r3
 8003010:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003012:	430a      	orrs	r2, r1
 8003014:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2220      	movs	r2, #32
 800301c:	4013      	ands	r3, r2
 800301e:	d01f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	23c0      	movs	r3, #192	; 0xc0
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	401a      	ands	r2, r3
 800302a:	23c0      	movs	r3, #192	; 0xc0
 800302c:	029b      	lsls	r3, r3, #10
 800302e:	429a      	cmp	r2, r3
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003032:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4c      	ldr	r2, [pc, #304]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	23c0      	movs	r3, #192	; 0xc0
 8003042:	039b      	lsls	r3, r3, #14
 8003044:	401a      	ands	r2, r3
 8003046:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800304e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	23c0      	movs	r3, #192	; 0xc0
 8003056:	029b      	lsls	r3, r3, #10
 8003058:	401a      	ands	r2, r3
 800305a:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800305c:	430a      	orrs	r2, r1
 800305e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003060:	2317      	movs	r3, #23
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003070:	493e      	ldr	r1, [pc, #248]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003072:	400a      	ands	r2, r1
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003080:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	2203      	movs	r2, #3
 8003086:	4393      	bics	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003090:	430a      	orrs	r2, r1
 8003092:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	220c      	movs	r2, #12
 80030a4:	4393      	bics	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2204      	movs	r2, #4
 80030b8:	4013      	ands	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c0:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2208      	movs	r2, #8
 80030d6:	4013      	ands	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	4a25      	ldr	r2, [pc, #148]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800310a:	430a      	orrs	r2, r1
 800310c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	4013      	ands	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003128:	430a      	orrs	r2, r1
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	4013      	ands	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003146:	430a      	orrs	r2, r1
 8003148:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b006      	add	sp, #24
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	fffcffff 	.word	0xfffcffff
 8003160:	fff7ffff 	.word	0xfff7ffff
 8003164:	00001388 	.word	0x00001388
 8003168:	ffcfffff 	.word	0xffcfffff
 800316c:	efffffff 	.word	0xefffffff
 8003170:	fffff3ff 	.word	0xfffff3ff
 8003174:	ffffcfff 	.word	0xffffcfff
 8003178:	fbffffff 	.word	0xfbffffff
 800317c:	fff3ffff 	.word	0xfff3ffff

08003180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e083      	b.n	800329a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	2382      	movs	r3, #130	; 0x82
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d009      	beq.n	80031ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
 80031ac:	e005      	b.n	80031ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2251      	movs	r2, #81	; 0x51
 80031c4:	5c9b      	ldrb	r3, [r3, r2]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2250      	movs	r2, #80	; 0x50
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7fe fb20 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2251      	movs	r2, #81	; 0x51
 80031e0:	2102      	movs	r1, #2
 80031e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2140      	movs	r1, #64	; 0x40
 80031f0:	438a      	bics	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	2382      	movs	r3, #130	; 0x82
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	401a      	ands	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	2384      	movs	r3, #132	; 0x84
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	400b      	ands	r3, r1
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	400b      	ands	r3, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2102      	movs	r1, #2
 800321c:	400b      	ands	r3, r1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	2101      	movs	r1, #1
 8003226:	400b      	ands	r3, r1
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	400b      	ands	r3, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2138      	movs	r1, #56	; 0x38
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	400b      	ands	r3, r1
 8003248:	431a      	orrs	r2, r3
 800324a:	0011      	movs	r1, r2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	401a      	ands	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	2204      	movs	r2, #4
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2210      	movs	r2, #16
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4907      	ldr	r1, [pc, #28]	; (80032a4 <HAL_SPI_Init+0x124>)
 8003286:	400a      	ands	r2, r1
 8003288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2251      	movs	r2, #81	; 0x51
 8003294:	2101      	movs	r1, #1
 8003296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	fffff7ff 	.word	0xfffff7ff

080032a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	1dbb      	adds	r3, r7, #6
 80032b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b8:	231f      	movs	r3, #31
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2250      	movs	r2, #80	; 0x50
 80032c4:	5c9b      	ldrb	r3, [r3, r2]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_SPI_Transmit+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e145      	b.n	800355a <HAL_SPI_Transmit+0x2b2>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2250      	movs	r2, #80	; 0x50
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d6:	f7fe fc2d 	bl	8001b34 <HAL_GetTick>
 80032da:	0003      	movs	r3, r0
 80032dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032de:	2316      	movs	r3, #22
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	1dba      	adds	r2, r7, #6
 80032e4:	8812      	ldrh	r2, [r2, #0]
 80032e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2251      	movs	r2, #81	; 0x51
 80032ec:	5c9b      	ldrb	r3, [r3, r2]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d004      	beq.n	80032fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80032f4:	231f      	movs	r3, #31
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80032fc:	e126      	b.n	800354c <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_SPI_Transmit+0x64>
 8003304:	1dbb      	adds	r3, r7, #6
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800330c:	231f      	movs	r3, #31
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
    goto error;
 8003314:	e11a      	b.n	800354c <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2251      	movs	r2, #81	; 0x51
 800331a:	2103      	movs	r1, #3
 800331c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1dba      	adds	r2, r7, #6
 800332e:	8812      	ldrh	r2, [r2, #0]
 8003330:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1dba      	adds	r2, r7, #6
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	429a      	cmp	r2, r3
 8003362:	d110      	bne.n	8003386 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	438a      	bics	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	01c9      	lsls	r1, r1, #7
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	4013      	ands	r3, r2
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d007      	beq.n	80033a4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d152      	bne.n	8003456 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_SPI_Transmit+0x11a>
 80033b8:	2316      	movs	r3, #22
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d143      	bne.n	800344a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	881a      	ldrh	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	1c9a      	adds	r2, r3, #2
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033e6:	e030      	b.n	800344a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2202      	movs	r2, #2
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d112      	bne.n	800341c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	1c9a      	adds	r2, r3, #2
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36
 800341a:	e016      	b.n	800344a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341c:	f7fe fb8a 	bl	8001b34 <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d802      	bhi.n	8003432 <HAL_SPI_Transmit+0x18a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x190>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d108      	bne.n	800344a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003438:	231f      	movs	r3, #31
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2203      	movs	r2, #3
 800343e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2251      	movs	r2, #81	; 0x51
 8003444:	2101      	movs	r1, #1
 8003446:	5499      	strb	r1, [r3, r2]
          goto error;
 8003448:	e080      	b.n	800354c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1c9      	bne.n	80033e8 <HAL_SPI_Transmit+0x140>
 8003454:	e053      	b.n	80034fe <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_SPI_Transmit+0x1c0>
 800345e:	2316      	movs	r3, #22
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d145      	bne.n	80034f4 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	7812      	ldrb	r2, [r2, #0]
 8003474:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800348e:	e031      	b.n	80034f4 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d113      	bne.n	80034c6 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80034c4:	e016      	b.n	80034f4 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034c6:	f7fe fb35 	bl	8001b34 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d802      	bhi.n	80034dc <HAL_SPI_Transmit+0x234>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_SPI_Transmit+0x23a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80034e2:	231f      	movs	r3, #31
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	2203      	movs	r2, #3
 80034e8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2251      	movs	r2, #81	; 0x51
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
          goto error;
 80034f2:	e02b      	b.n	800354c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1c8      	bne.n	8003490 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 fc2b 	bl	8003d60 <SPI_EndRxTxTransaction>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800353a:	231f      	movs	r3, #31
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e003      	b.n	800354c <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2251      	movs	r2, #81	; 0x51
 8003548:	2101      	movs	r1, #1
 800354a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2250      	movs	r2, #80	; 0x50
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003554:	231f      	movs	r3, #31
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	781b      	ldrb	r3, [r3, #0]
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b008      	add	sp, #32
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003574:	2117      	movs	r1, #23
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2251      	movs	r2, #81	; 0x51
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d003      	beq.n	8003590 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
    goto error;
 800358e:	e109      	b.n	80037a4 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	2382      	movs	r3, #130	; 0x82
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	429a      	cmp	r2, r3
 800359a:	d113      	bne.n	80035c4 <HAL_SPI_Receive+0x60>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2251      	movs	r2, #81	; 0x51
 80035a8:	2104      	movs	r1, #4
 80035aa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	881c      	ldrh	r4, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0023      	movs	r3, r4
 80035bc:	f000 f900 	bl	80037c0 <HAL_SPI_TransmitReceive>
 80035c0:	0003      	movs	r3, r0
 80035c2:	e0f6      	b.n	80037b2 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2250      	movs	r2, #80	; 0x50
 80035c8:	5c9b      	ldrb	r3, [r3, r2]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_SPI_Receive+0x6e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0ef      	b.n	80037b2 <HAL_SPI_Receive+0x24e>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2250      	movs	r2, #80	; 0x50
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035da:	f7fe faab 	bl	8001b34 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_SPI_Receive+0x8c>
 80035e8:	1dbb      	adds	r3, r7, #6
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80035f0:	2317      	movs	r3, #23
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80035f8:	e0d4      	b.n	80037a4 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2251      	movs	r2, #81	; 0x51
 80035fe:	2104      	movs	r1, #4
 8003600:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1dba      	adds	r2, r7, #6
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1dba      	adds	r2, r7, #6
 800361a:	8812      	ldrh	r2, [r2, #0]
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	429a      	cmp	r2, r3
 8003646:	d10f      	bne.n	8003668 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	438a      	bics	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4956      	ldr	r1, [pc, #344]	; (80037bc <HAL_SPI_Receive+0x258>)
 8003664:	400a      	ands	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	4013      	ands	r3, r2
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d007      	beq.n	8003686 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d000      	beq.n	8003690 <HAL_SPI_Receive+0x12c>
 800368e:	e06c      	b.n	800376a <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003690:	e033      	b.n	80036fa <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	2b01      	cmp	r3, #1
 800369e:	d115      	bne.n	80036cc <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	001a      	movs	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036ca:	e016      	b.n	80036fa <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036cc:	f7fe fa32 	bl	8001b34 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d802      	bhi.n	80036e2 <HAL_SPI_Receive+0x17e>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_SPI_Receive+0x184>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d108      	bne.n	80036fa <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 80036e8:	2317      	movs	r3, #23
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2203      	movs	r2, #3
 80036ee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2251      	movs	r2, #81	; 0x51
 80036f4:	2101      	movs	r1, #1
 80036f6:	5499      	strb	r1, [r3, r2]
          goto error;
 80036f8:	e054      	b.n	80037a4 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1c6      	bne.n	8003692 <HAL_SPI_Receive+0x12e>
 8003704:	e036      	b.n	8003774 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	2b01      	cmp	r3, #1
 8003712:	d113      	bne.n	800373c <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	b292      	uxth	r2, r2
 8003720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	1c9a      	adds	r2, r3, #2
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800373a:	e016      	b.n	800376a <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373c:	f7fe f9fa 	bl	8001b34 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d802      	bhi.n	8003752 <HAL_SPI_Receive+0x1ee>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Receive+0x1f4>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8003758:	2317      	movs	r3, #23
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2203      	movs	r2, #3
 800375e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2251      	movs	r2, #81	; 0x51
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]
          goto error;
 8003768:	e01c      	b.n	80037a4 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1c8      	bne.n	8003706 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	0018      	movs	r0, r3
 800377c:	f000 fa86 	bl	8003c8c <SPI_EndRxTransaction>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8003792:	2317      	movs	r3, #23
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e003      	b.n	80037a4 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2251      	movs	r2, #81	; 0x51
 80037a0:	2101      	movs	r1, #1
 80037a2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2250      	movs	r2, #80	; 0x50
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b007      	add	sp, #28
 80037b8:	bd90      	pop	{r4, r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	ffffbfff 	.word	0xffffbfff

080037c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	001a      	movs	r2, r3
 80037ce:	1cbb      	adds	r3, r7, #2
 80037d0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037d2:	2301      	movs	r3, #1
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037d6:	232b      	movs	r3, #43	; 0x2b
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2250      	movs	r2, #80	; 0x50
 80037e2:	5c9b      	ldrb	r3, [r3, r2]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x2c>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e1b0      	b.n	8003b4e <HAL_SPI_TransmitReceive+0x38e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2250      	movs	r2, #80	; 0x50
 80037f0:	2101      	movs	r1, #1
 80037f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f4:	f7fe f99e 	bl	8001b34 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037fc:	2023      	movs	r0, #35	; 0x23
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	2151      	movs	r1, #81	; 0x51
 8003804:	5c52      	ldrb	r2, [r2, r1]
 8003806:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800380e:	231a      	movs	r3, #26
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	1cba      	adds	r2, r7, #2
 8003814:	8812      	ldrh	r2, [r2, #0]
 8003816:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003818:	183b      	adds	r3, r7, r0
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d011      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x84>
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	2382      	movs	r3, #130	; 0x82
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	429a      	cmp	r2, r3
 8003828:	d107      	bne.n	800383a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <HAL_SPI_TransmitReceive+0x7a>
 8003832:	183b      	adds	r3, r7, r0
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d004      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800383a:	232b      	movs	r3, #43	; 0x2b
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2202      	movs	r2, #2
 8003840:	701a      	strb	r2, [r3, #0]
    goto error;
 8003842:	e17d      	b.n	8003b40 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x98>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x98>
 8003850:	1cbb      	adds	r3, r7, #2
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003858:	232b      	movs	r3, #43	; 0x2b
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003860:	e16e      	b.n	8003b40 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2251      	movs	r2, #81	; 0x51
 8003866:	5c9b      	ldrb	r3, [r3, r2]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b04      	cmp	r3, #4
 800386c:	d003      	beq.n	8003876 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2251      	movs	r2, #81	; 0x51
 8003872:	2105      	movs	r1, #5
 8003874:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1cba      	adds	r2, r7, #2
 8003886:	8812      	ldrh	r2, [r2, #0]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1cba      	adds	r2, r7, #2
 800388e:	8812      	ldrh	r2, [r2, #0]
 8003890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1cba      	adds	r2, r7, #2
 800389c:	8812      	ldrh	r2, [r2, #0]
 800389e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1cba      	adds	r2, r7, #2
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	4013      	ands	r3, r2
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d007      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	429a      	cmp	r2, r3
 80038dc:	d000      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x120>
 80038de:	e07f      	b.n	80039e0 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x134>
 80038e8:	231a      	movs	r3, #26
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d000      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x134>
 80038f2:	e06a      	b.n	80039ca <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003918:	e057      	b.n	80039ca <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2202      	movs	r2, #2
 8003922:	4013      	ands	r3, r2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d11b      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x1a0>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_SPI_TransmitReceive+0x1a0>
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d113      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	2b01      	cmp	r3, #1
 800396c:	d119      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x1e2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d014      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	b292      	uxth	r2, r2
 8003984:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800399e:	2301      	movs	r3, #1
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039a2:	f7fe f8c7 	bl	8001b34 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d80b      	bhi.n	80039ca <HAL_SPI_TransmitReceive+0x20a>
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	3301      	adds	r3, #1
 80039b6:	d008      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80039b8:	232b      	movs	r3, #43	; 0x2b
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2203      	movs	r2, #3
 80039be:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2251      	movs	r2, #81	; 0x51
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]
        goto error;
 80039c8:	e0ba      	b.n	8003b40 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1a2      	bne.n	800391a <HAL_SPI_TransmitReceive+0x15a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d19d      	bne.n	800391a <HAL_SPI_TransmitReceive+0x15a>
 80039de:	e083      	b.n	8003ae8 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x234>
 80039e8:	231a      	movs	r3, #26
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d000      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x234>
 80039f2:	e06f      	b.n	8003ad4 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a1a:	e05b      	b.n	8003ad4 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d11c      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x2a4>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d017      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x2a4>
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d114      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d119      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x2e6>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d014      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003aa6:	f7fe f845 	bl	8001b34 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d802      	bhi.n	8003abc <HAL_SPI_TransmitReceive+0x2fc>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	3301      	adds	r3, #1
 8003aba:	d102      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x302>
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8003ac2:	232b      	movs	r3, #43	; 0x2b
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2251      	movs	r2, #81	; 0x51
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]
        goto error;
 8003ad2:	e035      	b.n	8003b40 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d19e      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x25c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d199      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f936 	bl	8003d60 <SPI_EndRxTxTransaction>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d007      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003af8:	232b      	movs	r3, #43	; 0x2b
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b06:	e01b      	b.n	8003b40 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003b2e:	232b      	movs	r3, #43	; 0x2b
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e003      	b.n	8003b40 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2251      	movs	r2, #81	; 0x51
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2250      	movs	r2, #80	; 0x50
 8003b44:	2100      	movs	r1, #0
 8003b46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b48:	232b      	movs	r3, #43	; 0x2b
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b00c      	add	sp, #48	; 0x30
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2251      	movs	r2, #81	; 0x51
 8003b62:	5c9b      	ldrb	r3, [r3, r2]
 8003b64:	b2db      	uxtb	r3, r3
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b80:	f7fd ffd8 	bl	8001b34 <HAL_GetTick>
 8003b84:	0002      	movs	r2, r0
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b90:	f7fd ffd0 	bl	8001b34 <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	015b      	lsls	r3, r3, #5
 8003b9e:	0d1b      	lsrs	r3, r3, #20
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	4353      	muls	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	e058      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	d055      	beq.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bae:	f7fd ffc1 	bl	8001b34 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d902      	bls.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d142      	bne.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	21e0      	movs	r1, #224	; 0xe0
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	2382      	movs	r3, #130	; 0x82
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d113      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d005      	beq.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	438a      	bics	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	019b      	lsls	r3, r3, #6
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d110      	bne.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	491a      	ldr	r1, [pc, #104]	; (8003c88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	0189      	lsls	r1, r1, #6
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2251      	movs	r2, #81	; 0x51
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2250      	movs	r2, #80	; 0x50
 8003c42:	2100      	movs	r1, #0
 8003c44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e017      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	425a      	negs	r2, r3
 8003c6a:	4153      	adcs	r3, r2
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	001a      	movs	r2, r3
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d197      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b008      	add	sp, #32
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	20000000 	.word	0x20000000
 8003c88:	ffffdfff 	.word	0xffffdfff

08003c8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	2382      	movs	r3, #130	; 0x82
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d113      	bne.n	8003ccc <SPI_EndRxTransaction+0x40>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d005      	beq.n	8003cbc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	438a      	bics	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	2382      	movs	r3, #130	; 0x82
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d12b      	bne.n	8003d30 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d012      	beq.n	8003d0a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	0013      	movs	r3, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	f7ff ff3d 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d02d      	beq.n	8003d56 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	2220      	movs	r2, #32
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e026      	b.n	8003d58 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0013      	movs	r3, r2
 8003d14:	2200      	movs	r2, #0
 8003d16:	2101      	movs	r1, #1
 8003d18:	f7ff ff2a 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d01a      	beq.n	8003d56 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	2220      	movs	r2, #32
 8003d26:	431a      	orrs	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e013      	b.n	8003d58 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	0013      	movs	r3, r2
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	f7ff ff17 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003d42:	1e03      	subs	r3, r0, #0
 8003d44:	d007      	beq.n	8003d56 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e000      	b.n	8003d58 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <SPI_EndRxTxTransaction+0x84>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	491d      	ldr	r1, [pc, #116]	; (8003de8 <SPI_EndRxTxTransaction+0x88>)
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fc f9d2 	bl	800011c <__udivsi3>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	015b      	lsls	r3, r3, #5
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2382      	movs	r3, #130	; 0x82
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d112      	bne.n	8003dbc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	0013      	movs	r3, r2
 8003da0:	2200      	movs	r2, #0
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	f7ff fee4 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d016      	beq.n	8003dda <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	2220      	movs	r2, #32
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e00f      	b.n	8003ddc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d0f2      	beq.n	8003dbc <SPI_EndRxTxTransaction+0x5c>
 8003dd6:	e000      	b.n	8003dda <SPI_EndRxTxTransaction+0x7a>
        break;
 8003dd8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b006      	add	sp, #24
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000000 	.word	0x20000000
 8003de8:	016e3600 	.word	0x016e3600

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	4d0c      	ldr	r5, [pc, #48]	; (8003e30 <__libc_init_array+0x38>)
 8003dfe:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003e00:	1b64      	subs	r4, r4, r5
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	2600      	movs	r6, #0
 8003e0a:	f001 f803 	bl	8004e14 <_init>
 8003e0e:	4d0a      	ldr	r5, [pc, #40]	; (8003e38 <__libc_init_array+0x40>)
 8003e10:	4c0a      	ldr	r4, [pc, #40]	; (8003e3c <__libc_init_array+0x44>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	00b3      	lsls	r3, r6, #2
 8003e1e:	58eb      	ldr	r3, [r5, r3]
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	00b3      	lsls	r3, r6, #2
 8003e28:	58eb      	ldr	r3, [r5, r3]
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08004ef8 	.word	0x08004ef8
 8003e34:	08004ef8 	.word	0x08004ef8
 8003e38:	08004ef8 	.word	0x08004ef8
 8003e3c:	08004efc 	.word	0x08004efc

08003e40 <malloc>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <malloc+0x10>)
 8003e44:	0001      	movs	r1, r0
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	f000 f878 	bl	8003f3c <_malloc_r>
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <memset>:
 8003e54:	0003      	movs	r3, r0
 8003e56:	1882      	adds	r2, r0, r2
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <memset+0xa>
 8003e5c:	4770      	bx	lr
 8003e5e:	7019      	strb	r1, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	e7f9      	b.n	8003e58 <memset+0x4>

08003e64 <_free_r>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	0005      	movs	r5, r0
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	d010      	beq.n	8003e8e <_free_r+0x2a>
 8003e6c:	1f0c      	subs	r4, r1, #4
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da00      	bge.n	8003e76 <_free_r+0x12>
 8003e74:	18e4      	adds	r4, r4, r3
 8003e76:	0028      	movs	r0, r5
 8003e78:	f000 fa08 	bl	800428c <__malloc_lock>
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <_free_r+0x90>)
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <_free_r+0x2c>
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	6014      	str	r4, [r2, #0]
 8003e88:	0028      	movs	r0, r5
 8003e8a:	f000 fa07 	bl	800429c <__malloc_unlock>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d908      	bls.n	8003ea6 <_free_r+0x42>
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	1860      	adds	r0, r4, r1
 8003e98:	4283      	cmp	r3, r0
 8003e9a:	d1f3      	bne.n	8003e84 <_free_r+0x20>
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	1841      	adds	r1, r0, r1
 8003ea2:	6021      	str	r1, [r4, #0]
 8003ea4:	e7ee      	b.n	8003e84 <_free_r+0x20>
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <_free_r+0x4e>
 8003eae:	42a3      	cmp	r3, r4
 8003eb0:	d9f9      	bls.n	8003ea6 <_free_r+0x42>
 8003eb2:	6811      	ldr	r1, [r2, #0]
 8003eb4:	1850      	adds	r0, r2, r1
 8003eb6:	42a0      	cmp	r0, r4
 8003eb8:	d10b      	bne.n	8003ed2 <_free_r+0x6e>
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	1809      	adds	r1, r1, r0
 8003ebe:	1850      	adds	r0, r2, r1
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	4283      	cmp	r3, r0
 8003ec4:	d1e0      	bne.n	8003e88 <_free_r+0x24>
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	1841      	adds	r1, r0, r1
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	6053      	str	r3, [r2, #4]
 8003ed0:	e7da      	b.n	8003e88 <_free_r+0x24>
 8003ed2:	42a0      	cmp	r0, r4
 8003ed4:	d902      	bls.n	8003edc <_free_r+0x78>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	602b      	str	r3, [r5, #0]
 8003eda:	e7d5      	b.n	8003e88 <_free_r+0x24>
 8003edc:	6821      	ldr	r1, [r4, #0]
 8003ede:	1860      	adds	r0, r4, r1
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	d103      	bne.n	8003eec <_free_r+0x88>
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	1841      	adds	r1, r0, r1
 8003eea:	6021      	str	r1, [r4, #0]
 8003eec:	6063      	str	r3, [r4, #4]
 8003eee:	6054      	str	r4, [r2, #4]
 8003ef0:	e7ca      	b.n	8003e88 <_free_r+0x24>
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	200002c0 	.word	0x200002c0

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0f      	ldr	r6, [pc, #60]	; (8003f38 <sbrk_aligned+0x40>)
 8003efc:	000d      	movs	r5, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	0004      	movs	r4, r0
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d102      	bne.n	8003f0c <sbrk_aligned+0x14>
 8003f06:	f000 f8a9 	bl	800405c <_sbrk_r>
 8003f0a:	6030      	str	r0, [r6, #0]
 8003f0c:	0029      	movs	r1, r5
 8003f0e:	0020      	movs	r0, r4
 8003f10:	f000 f8a4 	bl	800405c <_sbrk_r>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d00a      	beq.n	8003f2e <sbrk_aligned+0x36>
 8003f18:	2303      	movs	r3, #3
 8003f1a:	1cc5      	adds	r5, r0, #3
 8003f1c:	439d      	bics	r5, r3
 8003f1e:	42a8      	cmp	r0, r5
 8003f20:	d007      	beq.n	8003f32 <sbrk_aligned+0x3a>
 8003f22:	1a29      	subs	r1, r5, r0
 8003f24:	0020      	movs	r0, r4
 8003f26:	f000 f899 	bl	800405c <_sbrk_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d101      	bne.n	8003f32 <sbrk_aligned+0x3a>
 8003f2e:	2501      	movs	r5, #1
 8003f30:	426d      	negs	r5, r5
 8003f32:	0028      	movs	r0, r5
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	200002c4 	.word	0x200002c4

08003f3c <_malloc_r>:
 8003f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f3e:	2203      	movs	r2, #3
 8003f40:	1ccb      	adds	r3, r1, #3
 8003f42:	4393      	bics	r3, r2
 8003f44:	3308      	adds	r3, #8
 8003f46:	0006      	movs	r6, r0
 8003f48:	001f      	movs	r7, r3
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d232      	bcs.n	8003fb4 <_malloc_r+0x78>
 8003f4e:	270c      	movs	r7, #12
 8003f50:	42b9      	cmp	r1, r7
 8003f52:	d831      	bhi.n	8003fb8 <_malloc_r+0x7c>
 8003f54:	0030      	movs	r0, r6
 8003f56:	f000 f999 	bl	800428c <__malloc_lock>
 8003f5a:	4d32      	ldr	r5, [pc, #200]	; (8004024 <_malloc_r+0xe8>)
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	001c      	movs	r4, r3
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d12e      	bne.n	8003fc2 <_malloc_r+0x86>
 8003f64:	0039      	movs	r1, r7
 8003f66:	0030      	movs	r0, r6
 8003f68:	f7ff ffc6 	bl	8003ef8 <sbrk_aligned>
 8003f6c:	0004      	movs	r4, r0
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d11e      	bne.n	8003fb0 <_malloc_r+0x74>
 8003f72:	682c      	ldr	r4, [r5, #0]
 8003f74:	0025      	movs	r5, r4
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	d14a      	bne.n	8004010 <_malloc_r+0xd4>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0029      	movs	r1, r5
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	0030      	movs	r0, r6
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	f000 f86a 	bl	800405c <_sbrk_r>
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	4283      	cmp	r3, r0
 8003f8c:	d143      	bne.n	8004016 <_malloc_r+0xda>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	3703      	adds	r7, #3
 8003f92:	1aff      	subs	r7, r7, r3
 8003f94:	2303      	movs	r3, #3
 8003f96:	439f      	bics	r7, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	2f0c      	cmp	r7, #12
 8003f9c:	d200      	bcs.n	8003fa0 <_malloc_r+0x64>
 8003f9e:	270c      	movs	r7, #12
 8003fa0:	0039      	movs	r1, r7
 8003fa2:	0030      	movs	r0, r6
 8003fa4:	f7ff ffa8 	bl	8003ef8 <sbrk_aligned>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d034      	beq.n	8004016 <_malloc_r+0xda>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	19df      	adds	r7, r3, r7
 8003fb0:	6027      	str	r7, [r4, #0]
 8003fb2:	e013      	b.n	8003fdc <_malloc_r+0xa0>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dacb      	bge.n	8003f50 <_malloc_r+0x14>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	2500      	movs	r5, #0
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	0028      	movs	r0, r5
 8003fc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	1bd1      	subs	r1, r2, r7
 8003fc6:	d420      	bmi.n	800400a <_malloc_r+0xce>
 8003fc8:	290b      	cmp	r1, #11
 8003fca:	d917      	bls.n	8003ffc <_malloc_r+0xc0>
 8003fcc:	19e2      	adds	r2, r4, r7
 8003fce:	6027      	str	r7, [r4, #0]
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	d111      	bne.n	8003ff8 <_malloc_r+0xbc>
 8003fd4:	602a      	str	r2, [r5, #0]
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	6011      	str	r1, [r2, #0]
 8003fda:	6053      	str	r3, [r2, #4]
 8003fdc:	0030      	movs	r0, r6
 8003fde:	0025      	movs	r5, r4
 8003fe0:	f000 f95c 	bl	800429c <__malloc_unlock>
 8003fe4:	2207      	movs	r2, #7
 8003fe6:	350b      	adds	r5, #11
 8003fe8:	1d23      	adds	r3, r4, #4
 8003fea:	4395      	bics	r5, r2
 8003fec:	1aea      	subs	r2, r5, r3
 8003fee:	429d      	cmp	r5, r3
 8003ff0:	d0e5      	beq.n	8003fbe <_malloc_r+0x82>
 8003ff2:	1b5b      	subs	r3, r3, r5
 8003ff4:	50a3      	str	r3, [r4, r2]
 8003ff6:	e7e2      	b.n	8003fbe <_malloc_r+0x82>
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e7ec      	b.n	8003fd6 <_malloc_r+0x9a>
 8003ffc:	6862      	ldr	r2, [r4, #4]
 8003ffe:	42a3      	cmp	r3, r4
 8004000:	d101      	bne.n	8004006 <_malloc_r+0xca>
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	e7ea      	b.n	8003fdc <_malloc_r+0xa0>
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	e7e8      	b.n	8003fdc <_malloc_r+0xa0>
 800400a:	0023      	movs	r3, r4
 800400c:	6864      	ldr	r4, [r4, #4]
 800400e:	e7a7      	b.n	8003f60 <_malloc_r+0x24>
 8004010:	002c      	movs	r4, r5
 8004012:	686d      	ldr	r5, [r5, #4]
 8004014:	e7af      	b.n	8003f76 <_malloc_r+0x3a>
 8004016:	230c      	movs	r3, #12
 8004018:	0030      	movs	r0, r6
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	f000 f93e 	bl	800429c <__malloc_unlock>
 8004020:	e7cd      	b.n	8003fbe <_malloc_r+0x82>
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	200002c0 	.word	0x200002c0

08004028 <iprintf>:
 8004028:	b40f      	push	{r0, r1, r2, r3}
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <iprintf+0x30>)
 800402c:	b513      	push	{r0, r1, r4, lr}
 800402e:	681c      	ldr	r4, [r3, #0]
 8004030:	2c00      	cmp	r4, #0
 8004032:	d005      	beq.n	8004040 <iprintf+0x18>
 8004034:	69a3      	ldr	r3, [r4, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <iprintf+0x18>
 800403a:	0020      	movs	r0, r4
 800403c:	f000 f882 	bl	8004144 <__sinit>
 8004040:	ab05      	add	r3, sp, #20
 8004042:	0020      	movs	r0, r4
 8004044:	9a04      	ldr	r2, [sp, #16]
 8004046:	68a1      	ldr	r1, [r4, #8]
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	f000 f957 	bl	80042fc <_vfiprintf_r>
 800404e:	bc16      	pop	{r1, r2, r4}
 8004050:	bc08      	pop	{r3}
 8004052:	b004      	add	sp, #16
 8004054:	4718      	bx	r3
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	2000000c 	.word	0x2000000c

0800405c <_sbrk_r>:
 800405c:	2300      	movs	r3, #0
 800405e:	b570      	push	{r4, r5, r6, lr}
 8004060:	4d06      	ldr	r5, [pc, #24]	; (800407c <_sbrk_r+0x20>)
 8004062:	0004      	movs	r4, r0
 8004064:	0008      	movs	r0, r1
 8004066:	602b      	str	r3, [r5, #0]
 8004068:	f7fd fc98 	bl	800199c <_sbrk>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d103      	bne.n	8004078 <_sbrk_r+0x1c>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d000      	beq.n	8004078 <_sbrk_r+0x1c>
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	200002cc 	.word	0x200002cc

08004080 <std>:
 8004080:	2300      	movs	r3, #0
 8004082:	b510      	push	{r4, lr}
 8004084:	0004      	movs	r4, r0
 8004086:	6003      	str	r3, [r0, #0]
 8004088:	6043      	str	r3, [r0, #4]
 800408a:	6083      	str	r3, [r0, #8]
 800408c:	8181      	strh	r1, [r0, #12]
 800408e:	6643      	str	r3, [r0, #100]	; 0x64
 8004090:	0019      	movs	r1, r3
 8004092:	81c2      	strh	r2, [r0, #14]
 8004094:	6103      	str	r3, [r0, #16]
 8004096:	6143      	str	r3, [r0, #20]
 8004098:	6183      	str	r3, [r0, #24]
 800409a:	2208      	movs	r2, #8
 800409c:	305c      	adds	r0, #92	; 0x5c
 800409e:	f7ff fed9 	bl	8003e54 <memset>
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <std+0x38>)
 80040a4:	6224      	str	r4, [r4, #32]
 80040a6:	6263      	str	r3, [r4, #36]	; 0x24
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <std+0x3c>)
 80040aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <std+0x40>)
 80040ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <std+0x44>)
 80040b2:	6323      	str	r3, [r4, #48]	; 0x30
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	08004875 	.word	0x08004875
 80040bc:	0800489d 	.word	0x0800489d
 80040c0:	080048d5 	.word	0x080048d5
 80040c4:	08004901 	.word	0x08004901

080040c8 <_cleanup_r>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	4902      	ldr	r1, [pc, #8]	; (80040d4 <_cleanup_r+0xc>)
 80040cc:	f000 f8ba 	bl	8004244 <_fwalk_reent>
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	08004c0d 	.word	0x08004c0d

080040d8 <__sfmoreglue>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	2568      	movs	r5, #104	; 0x68
 80040dc:	1e4a      	subs	r2, r1, #1
 80040de:	4355      	muls	r5, r2
 80040e0:	000e      	movs	r6, r1
 80040e2:	0029      	movs	r1, r5
 80040e4:	3174      	adds	r1, #116	; 0x74
 80040e6:	f7ff ff29 	bl	8003f3c <_malloc_r>
 80040ea:	1e04      	subs	r4, r0, #0
 80040ec:	d008      	beq.n	8004100 <__sfmoreglue+0x28>
 80040ee:	2100      	movs	r1, #0
 80040f0:	002a      	movs	r2, r5
 80040f2:	6001      	str	r1, [r0, #0]
 80040f4:	6046      	str	r6, [r0, #4]
 80040f6:	300c      	adds	r0, #12
 80040f8:	60a0      	str	r0, [r4, #8]
 80040fa:	3268      	adds	r2, #104	; 0x68
 80040fc:	f7ff feaa 	bl	8003e54 <memset>
 8004100:	0020      	movs	r0, r4
 8004102:	bd70      	pop	{r4, r5, r6, pc}

08004104 <__sfp_lock_acquire>:
 8004104:	b510      	push	{r4, lr}
 8004106:	4802      	ldr	r0, [pc, #8]	; (8004110 <__sfp_lock_acquire+0xc>)
 8004108:	f000 f8bd 	bl	8004286 <__retarget_lock_acquire_recursive>
 800410c:	bd10      	pop	{r4, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	200002c9 	.word	0x200002c9

08004114 <__sfp_lock_release>:
 8004114:	b510      	push	{r4, lr}
 8004116:	4802      	ldr	r0, [pc, #8]	; (8004120 <__sfp_lock_release+0xc>)
 8004118:	f000 f8b6 	bl	8004288 <__retarget_lock_release_recursive>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	200002c9 	.word	0x200002c9

08004124 <__sinit_lock_acquire>:
 8004124:	b510      	push	{r4, lr}
 8004126:	4802      	ldr	r0, [pc, #8]	; (8004130 <__sinit_lock_acquire+0xc>)
 8004128:	f000 f8ad 	bl	8004286 <__retarget_lock_acquire_recursive>
 800412c:	bd10      	pop	{r4, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	200002ca 	.word	0x200002ca

08004134 <__sinit_lock_release>:
 8004134:	b510      	push	{r4, lr}
 8004136:	4802      	ldr	r0, [pc, #8]	; (8004140 <__sinit_lock_release+0xc>)
 8004138:	f000 f8a6 	bl	8004288 <__retarget_lock_release_recursive>
 800413c:	bd10      	pop	{r4, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	200002ca 	.word	0x200002ca

08004144 <__sinit>:
 8004144:	b513      	push	{r0, r1, r4, lr}
 8004146:	0004      	movs	r4, r0
 8004148:	f7ff ffec 	bl	8004124 <__sinit_lock_acquire>
 800414c:	69a3      	ldr	r3, [r4, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <__sinit+0x14>
 8004152:	f7ff ffef 	bl	8004134 <__sinit_lock_release>
 8004156:	bd13      	pop	{r0, r1, r4, pc}
 8004158:	64a3      	str	r3, [r4, #72]	; 0x48
 800415a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800415c:	6523      	str	r3, [r4, #80]	; 0x50
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <__sinit+0x68>)
 8004160:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <__sinit+0x6c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	62a2      	str	r2, [r4, #40]	; 0x28
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	42a3      	cmp	r3, r4
 800416a:	d101      	bne.n	8004170 <__sinit+0x2c>
 800416c:	2301      	movs	r3, #1
 800416e:	61a3      	str	r3, [r4, #24]
 8004170:	0020      	movs	r0, r4
 8004172:	f000 f81f 	bl	80041b4 <__sfp>
 8004176:	6060      	str	r0, [r4, #4]
 8004178:	0020      	movs	r0, r4
 800417a:	f000 f81b 	bl	80041b4 <__sfp>
 800417e:	60a0      	str	r0, [r4, #8]
 8004180:	0020      	movs	r0, r4
 8004182:	f000 f817 	bl	80041b4 <__sfp>
 8004186:	2200      	movs	r2, #0
 8004188:	2104      	movs	r1, #4
 800418a:	60e0      	str	r0, [r4, #12]
 800418c:	6860      	ldr	r0, [r4, #4]
 800418e:	f7ff ff77 	bl	8004080 <std>
 8004192:	2201      	movs	r2, #1
 8004194:	2109      	movs	r1, #9
 8004196:	68a0      	ldr	r0, [r4, #8]
 8004198:	f7ff ff72 	bl	8004080 <std>
 800419c:	2202      	movs	r2, #2
 800419e:	2112      	movs	r1, #18
 80041a0:	68e0      	ldr	r0, [r4, #12]
 80041a2:	f7ff ff6d 	bl	8004080 <std>
 80041a6:	2301      	movs	r3, #1
 80041a8:	61a3      	str	r3, [r4, #24]
 80041aa:	e7d2      	b.n	8004152 <__sinit+0xe>
 80041ac:	08004e58 	.word	0x08004e58
 80041b0:	080040c9 	.word	0x080040c9

080041b4 <__sfp>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	0007      	movs	r7, r0
 80041b8:	f7ff ffa4 	bl	8004104 <__sfp_lock_acquire>
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <__sfp+0x88>)
 80041be:	681e      	ldr	r6, [r3, #0]
 80041c0:	69b3      	ldr	r3, [r6, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <__sfp+0x18>
 80041c6:	0030      	movs	r0, r6
 80041c8:	f7ff ffbc 	bl	8004144 <__sinit>
 80041cc:	3648      	adds	r6, #72	; 0x48
 80041ce:	68b4      	ldr	r4, [r6, #8]
 80041d0:	6873      	ldr	r3, [r6, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	d504      	bpl.n	80041e0 <__sfp+0x2c>
 80041d6:	6833      	ldr	r3, [r6, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d022      	beq.n	8004222 <__sfp+0x6e>
 80041dc:	6836      	ldr	r6, [r6, #0]
 80041de:	e7f6      	b.n	80041ce <__sfp+0x1a>
 80041e0:	220c      	movs	r2, #12
 80041e2:	5ea5      	ldrsh	r5, [r4, r2]
 80041e4:	2d00      	cmp	r5, #0
 80041e6:	d11a      	bne.n	800421e <__sfp+0x6a>
 80041e8:	0020      	movs	r0, r4
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <__sfp+0x8c>)
 80041ec:	3058      	adds	r0, #88	; 0x58
 80041ee:	60e3      	str	r3, [r4, #12]
 80041f0:	6665      	str	r5, [r4, #100]	; 0x64
 80041f2:	f000 f847 	bl	8004284 <__retarget_lock_init_recursive>
 80041f6:	f7ff ff8d 	bl	8004114 <__sfp_lock_release>
 80041fa:	0020      	movs	r0, r4
 80041fc:	2208      	movs	r2, #8
 80041fe:	0029      	movs	r1, r5
 8004200:	6025      	str	r5, [r4, #0]
 8004202:	60a5      	str	r5, [r4, #8]
 8004204:	6065      	str	r5, [r4, #4]
 8004206:	6125      	str	r5, [r4, #16]
 8004208:	6165      	str	r5, [r4, #20]
 800420a:	61a5      	str	r5, [r4, #24]
 800420c:	305c      	adds	r0, #92	; 0x5c
 800420e:	f7ff fe21 	bl	8003e54 <memset>
 8004212:	6365      	str	r5, [r4, #52]	; 0x34
 8004214:	63a5      	str	r5, [r4, #56]	; 0x38
 8004216:	64a5      	str	r5, [r4, #72]	; 0x48
 8004218:	64e5      	str	r5, [r4, #76]	; 0x4c
 800421a:	0020      	movs	r0, r4
 800421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421e:	3468      	adds	r4, #104	; 0x68
 8004220:	e7d7      	b.n	80041d2 <__sfp+0x1e>
 8004222:	2104      	movs	r1, #4
 8004224:	0038      	movs	r0, r7
 8004226:	f7ff ff57 	bl	80040d8 <__sfmoreglue>
 800422a:	1e04      	subs	r4, r0, #0
 800422c:	6030      	str	r0, [r6, #0]
 800422e:	d1d5      	bne.n	80041dc <__sfp+0x28>
 8004230:	f7ff ff70 	bl	8004114 <__sfp_lock_release>
 8004234:	230c      	movs	r3, #12
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	e7ef      	b.n	800421a <__sfp+0x66>
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	08004e58 	.word	0x08004e58
 8004240:	ffff0001 	.word	0xffff0001

08004244 <_fwalk_reent>:
 8004244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004246:	0004      	movs	r4, r0
 8004248:	0006      	movs	r6, r0
 800424a:	2700      	movs	r7, #0
 800424c:	9101      	str	r1, [sp, #4]
 800424e:	3448      	adds	r4, #72	; 0x48
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	68a5      	ldr	r5, [r4, #8]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	9b00      	ldr	r3, [sp, #0]
 8004258:	3b01      	subs	r3, #1
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	d504      	bpl.n	8004268 <_fwalk_reent+0x24>
 800425e:	6824      	ldr	r4, [r4, #0]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d1f5      	bne.n	8004250 <_fwalk_reent+0xc>
 8004264:	0038      	movs	r0, r7
 8004266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004268:	89ab      	ldrh	r3, [r5, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d908      	bls.n	8004280 <_fwalk_reent+0x3c>
 800426e:	220e      	movs	r2, #14
 8004270:	5eab      	ldrsh	r3, [r5, r2]
 8004272:	3301      	adds	r3, #1
 8004274:	d004      	beq.n	8004280 <_fwalk_reent+0x3c>
 8004276:	0029      	movs	r1, r5
 8004278:	0030      	movs	r0, r6
 800427a:	9b01      	ldr	r3, [sp, #4]
 800427c:	4798      	blx	r3
 800427e:	4307      	orrs	r7, r0
 8004280:	3568      	adds	r5, #104	; 0x68
 8004282:	e7e8      	b.n	8004256 <_fwalk_reent+0x12>

08004284 <__retarget_lock_init_recursive>:
 8004284:	4770      	bx	lr

08004286 <__retarget_lock_acquire_recursive>:
 8004286:	4770      	bx	lr

08004288 <__retarget_lock_release_recursive>:
 8004288:	4770      	bx	lr
	...

0800428c <__malloc_lock>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4802      	ldr	r0, [pc, #8]	; (8004298 <__malloc_lock+0xc>)
 8004290:	f7ff fff9 	bl	8004286 <__retarget_lock_acquire_recursive>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	200002c8 	.word	0x200002c8

0800429c <__malloc_unlock>:
 800429c:	b510      	push	{r4, lr}
 800429e:	4802      	ldr	r0, [pc, #8]	; (80042a8 <__malloc_unlock+0xc>)
 80042a0:	f7ff fff2 	bl	8004288 <__retarget_lock_release_recursive>
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	200002c8 	.word	0x200002c8

080042ac <__sfputc_r>:
 80042ac:	6893      	ldr	r3, [r2, #8]
 80042ae:	b510      	push	{r4, lr}
 80042b0:	3b01      	subs	r3, #1
 80042b2:	6093      	str	r3, [r2, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da04      	bge.n	80042c2 <__sfputc_r+0x16>
 80042b8:	6994      	ldr	r4, [r2, #24]
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	db07      	blt.n	80042ce <__sfputc_r+0x22>
 80042be:	290a      	cmp	r1, #10
 80042c0:	d005      	beq.n	80042ce <__sfputc_r+0x22>
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	1c58      	adds	r0, r3, #1
 80042c6:	6010      	str	r0, [r2, #0]
 80042c8:	7019      	strb	r1, [r3, #0]
 80042ca:	0008      	movs	r0, r1
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	f000 fb1d 	bl	800490c <__swbuf_r>
 80042d2:	0001      	movs	r1, r0
 80042d4:	e7f9      	b.n	80042ca <__sfputc_r+0x1e>

080042d6 <__sfputs_r>:
 80042d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d8:	0006      	movs	r6, r0
 80042da:	000f      	movs	r7, r1
 80042dc:	0014      	movs	r4, r2
 80042de:	18d5      	adds	r5, r2, r3
 80042e0:	42ac      	cmp	r4, r5
 80042e2:	d101      	bne.n	80042e8 <__sfputs_r+0x12>
 80042e4:	2000      	movs	r0, #0
 80042e6:	e007      	b.n	80042f8 <__sfputs_r+0x22>
 80042e8:	7821      	ldrb	r1, [r4, #0]
 80042ea:	003a      	movs	r2, r7
 80042ec:	0030      	movs	r0, r6
 80042ee:	f7ff ffdd 	bl	80042ac <__sfputc_r>
 80042f2:	3401      	adds	r4, #1
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d1f3      	bne.n	80042e0 <__sfputs_r+0xa>
 80042f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042fc <_vfiprintf_r>:
 80042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fe:	b0a1      	sub	sp, #132	; 0x84
 8004300:	0006      	movs	r6, r0
 8004302:	000c      	movs	r4, r1
 8004304:	001f      	movs	r7, r3
 8004306:	9203      	str	r2, [sp, #12]
 8004308:	2800      	cmp	r0, #0
 800430a:	d004      	beq.n	8004316 <_vfiprintf_r+0x1a>
 800430c:	6983      	ldr	r3, [r0, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <_vfiprintf_r+0x1a>
 8004312:	f7ff ff17 	bl	8004144 <__sinit>
 8004316:	4b8e      	ldr	r3, [pc, #568]	; (8004550 <_vfiprintf_r+0x254>)
 8004318:	429c      	cmp	r4, r3
 800431a:	d11c      	bne.n	8004356 <_vfiprintf_r+0x5a>
 800431c:	6874      	ldr	r4, [r6, #4]
 800431e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004320:	07db      	lsls	r3, r3, #31
 8004322:	d405      	bmi.n	8004330 <_vfiprintf_r+0x34>
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	059b      	lsls	r3, r3, #22
 8004328:	d402      	bmi.n	8004330 <_vfiprintf_r+0x34>
 800432a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432c:	f7ff ffab 	bl	8004286 <__retarget_lock_acquire_recursive>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	071b      	lsls	r3, r3, #28
 8004334:	d502      	bpl.n	800433c <_vfiprintf_r+0x40>
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11d      	bne.n	8004378 <_vfiprintf_r+0x7c>
 800433c:	0021      	movs	r1, r4
 800433e:	0030      	movs	r0, r6
 8004340:	f000 fb4e 	bl	80049e0 <__swsetup_r>
 8004344:	2800      	cmp	r0, #0
 8004346:	d017      	beq.n	8004378 <_vfiprintf_r+0x7c>
 8004348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800434a:	07db      	lsls	r3, r3, #31
 800434c:	d50d      	bpl.n	800436a <_vfiprintf_r+0x6e>
 800434e:	2001      	movs	r0, #1
 8004350:	4240      	negs	r0, r0
 8004352:	b021      	add	sp, #132	; 0x84
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	4b7f      	ldr	r3, [pc, #508]	; (8004554 <_vfiprintf_r+0x258>)
 8004358:	429c      	cmp	r4, r3
 800435a:	d101      	bne.n	8004360 <_vfiprintf_r+0x64>
 800435c:	68b4      	ldr	r4, [r6, #8]
 800435e:	e7de      	b.n	800431e <_vfiprintf_r+0x22>
 8004360:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <_vfiprintf_r+0x25c>)
 8004362:	429c      	cmp	r4, r3
 8004364:	d1db      	bne.n	800431e <_vfiprintf_r+0x22>
 8004366:	68f4      	ldr	r4, [r6, #12]
 8004368:	e7d9      	b.n	800431e <_vfiprintf_r+0x22>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	059b      	lsls	r3, r3, #22
 800436e:	d4ee      	bmi.n	800434e <_vfiprintf_r+0x52>
 8004370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004372:	f7ff ff89 	bl	8004288 <__retarget_lock_release_recursive>
 8004376:	e7ea      	b.n	800434e <_vfiprintf_r+0x52>
 8004378:	2300      	movs	r3, #0
 800437a:	ad08      	add	r5, sp, #32
 800437c:	616b      	str	r3, [r5, #20]
 800437e:	3320      	adds	r3, #32
 8004380:	766b      	strb	r3, [r5, #25]
 8004382:	3310      	adds	r3, #16
 8004384:	76ab      	strb	r3, [r5, #26]
 8004386:	9707      	str	r7, [sp, #28]
 8004388:	9f03      	ldr	r7, [sp, #12]
 800438a:	783b      	ldrb	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <_vfiprintf_r+0x98>
 8004390:	2b25      	cmp	r3, #37	; 0x25
 8004392:	d14e      	bne.n	8004432 <_vfiprintf_r+0x136>
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	1afb      	subs	r3, r7, r3
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	429f      	cmp	r7, r3
 800439e:	d00d      	beq.n	80043bc <_vfiprintf_r+0xc0>
 80043a0:	9b05      	ldr	r3, [sp, #20]
 80043a2:	0021      	movs	r1, r4
 80043a4:	0030      	movs	r0, r6
 80043a6:	9a03      	ldr	r2, [sp, #12]
 80043a8:	f7ff ff95 	bl	80042d6 <__sfputs_r>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d100      	bne.n	80043b2 <_vfiprintf_r+0xb6>
 80043b0:	e0b5      	b.n	800451e <_vfiprintf_r+0x222>
 80043b2:	696a      	ldr	r2, [r5, #20]
 80043b4:	9b05      	ldr	r3, [sp, #20]
 80043b6:	4694      	mov	ip, r2
 80043b8:	4463      	add	r3, ip
 80043ba:	616b      	str	r3, [r5, #20]
 80043bc:	783b      	ldrb	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d100      	bne.n	80043c4 <_vfiprintf_r+0xc8>
 80043c2:	e0ac      	b.n	800451e <_vfiprintf_r+0x222>
 80043c4:	2201      	movs	r2, #1
 80043c6:	1c7b      	adds	r3, r7, #1
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	2300      	movs	r3, #0
 80043cc:	4252      	negs	r2, r2
 80043ce:	606a      	str	r2, [r5, #4]
 80043d0:	a904      	add	r1, sp, #16
 80043d2:	3254      	adds	r2, #84	; 0x54
 80043d4:	1852      	adds	r2, r2, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	60eb      	str	r3, [r5, #12]
 80043da:	60ab      	str	r3, [r5, #8]
 80043dc:	7013      	strb	r3, [r2, #0]
 80043de:	65ab      	str	r3, [r5, #88]	; 0x58
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	2205      	movs	r2, #5
 80043e4:	7819      	ldrb	r1, [r3, #0]
 80043e6:	485d      	ldr	r0, [pc, #372]	; (800455c <_vfiprintf_r+0x260>)
 80043e8:	f000 fcd0 	bl	8004d8c <memchr>
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	1c5f      	adds	r7, r3, #1
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d120      	bne.n	8004436 <_vfiprintf_r+0x13a>
 80043f4:	682a      	ldr	r2, [r5, #0]
 80043f6:	06d3      	lsls	r3, r2, #27
 80043f8:	d504      	bpl.n	8004404 <_vfiprintf_r+0x108>
 80043fa:	2353      	movs	r3, #83	; 0x53
 80043fc:	a904      	add	r1, sp, #16
 80043fe:	185b      	adds	r3, r3, r1
 8004400:	2120      	movs	r1, #32
 8004402:	7019      	strb	r1, [r3, #0]
 8004404:	0713      	lsls	r3, r2, #28
 8004406:	d504      	bpl.n	8004412 <_vfiprintf_r+0x116>
 8004408:	2353      	movs	r3, #83	; 0x53
 800440a:	a904      	add	r1, sp, #16
 800440c:	185b      	adds	r3, r3, r1
 800440e:	212b      	movs	r1, #43	; 0x2b
 8004410:	7019      	strb	r1, [r3, #0]
 8004412:	9b03      	ldr	r3, [sp, #12]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b2a      	cmp	r3, #42	; 0x2a
 8004418:	d016      	beq.n	8004448 <_vfiprintf_r+0x14c>
 800441a:	2100      	movs	r1, #0
 800441c:	68eb      	ldr	r3, [r5, #12]
 800441e:	9f03      	ldr	r7, [sp, #12]
 8004420:	783a      	ldrb	r2, [r7, #0]
 8004422:	1c78      	adds	r0, r7, #1
 8004424:	3a30      	subs	r2, #48	; 0x30
 8004426:	4684      	mov	ip, r0
 8004428:	2a09      	cmp	r2, #9
 800442a:	d94f      	bls.n	80044cc <_vfiprintf_r+0x1d0>
 800442c:	2900      	cmp	r1, #0
 800442e:	d111      	bne.n	8004454 <_vfiprintf_r+0x158>
 8004430:	e017      	b.n	8004462 <_vfiprintf_r+0x166>
 8004432:	3701      	adds	r7, #1
 8004434:	e7a9      	b.n	800438a <_vfiprintf_r+0x8e>
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <_vfiprintf_r+0x260>)
 8004438:	682a      	ldr	r2, [r5, #0]
 800443a:	1ac0      	subs	r0, r0, r3
 800443c:	2301      	movs	r3, #1
 800443e:	4083      	lsls	r3, r0
 8004440:	4313      	orrs	r3, r2
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	9703      	str	r7, [sp, #12]
 8004446:	e7cb      	b.n	80043e0 <_vfiprintf_r+0xe4>
 8004448:	9b07      	ldr	r3, [sp, #28]
 800444a:	1d19      	adds	r1, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	9107      	str	r1, [sp, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	db01      	blt.n	8004458 <_vfiprintf_r+0x15c>
 8004454:	930b      	str	r3, [sp, #44]	; 0x2c
 8004456:	e004      	b.n	8004462 <_vfiprintf_r+0x166>
 8004458:	425b      	negs	r3, r3
 800445a:	60eb      	str	r3, [r5, #12]
 800445c:	2302      	movs	r3, #2
 800445e:	4313      	orrs	r3, r2
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	783b      	ldrb	r3, [r7, #0]
 8004464:	2b2e      	cmp	r3, #46	; 0x2e
 8004466:	d10a      	bne.n	800447e <_vfiprintf_r+0x182>
 8004468:	787b      	ldrb	r3, [r7, #1]
 800446a:	2b2a      	cmp	r3, #42	; 0x2a
 800446c:	d137      	bne.n	80044de <_vfiprintf_r+0x1e2>
 800446e:	9b07      	ldr	r3, [sp, #28]
 8004470:	3702      	adds	r7, #2
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	9207      	str	r2, [sp, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	db2d      	blt.n	80044d8 <_vfiprintf_r+0x1dc>
 800447c:	9309      	str	r3, [sp, #36]	; 0x24
 800447e:	2203      	movs	r2, #3
 8004480:	7839      	ldrb	r1, [r7, #0]
 8004482:	4837      	ldr	r0, [pc, #220]	; (8004560 <_vfiprintf_r+0x264>)
 8004484:	f000 fc82 	bl	8004d8c <memchr>
 8004488:	2800      	cmp	r0, #0
 800448a:	d007      	beq.n	800449c <_vfiprintf_r+0x1a0>
 800448c:	4b34      	ldr	r3, [pc, #208]	; (8004560 <_vfiprintf_r+0x264>)
 800448e:	682a      	ldr	r2, [r5, #0]
 8004490:	1ac0      	subs	r0, r0, r3
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	4083      	lsls	r3, r0
 8004496:	4313      	orrs	r3, r2
 8004498:	3701      	adds	r7, #1
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	7839      	ldrb	r1, [r7, #0]
 800449e:	1c7b      	adds	r3, r7, #1
 80044a0:	2206      	movs	r2, #6
 80044a2:	4830      	ldr	r0, [pc, #192]	; (8004564 <_vfiprintf_r+0x268>)
 80044a4:	9303      	str	r3, [sp, #12]
 80044a6:	7629      	strb	r1, [r5, #24]
 80044a8:	f000 fc70 	bl	8004d8c <memchr>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d045      	beq.n	800453c <_vfiprintf_r+0x240>
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <_vfiprintf_r+0x26c>)
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d127      	bne.n	8004506 <_vfiprintf_r+0x20a>
 80044b6:	2207      	movs	r2, #7
 80044b8:	9b07      	ldr	r3, [sp, #28]
 80044ba:	3307      	adds	r3, #7
 80044bc:	4393      	bics	r3, r2
 80044be:	3308      	adds	r3, #8
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	696b      	ldr	r3, [r5, #20]
 80044c4:	9a04      	ldr	r2, [sp, #16]
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	616b      	str	r3, [r5, #20]
 80044ca:	e75d      	b.n	8004388 <_vfiprintf_r+0x8c>
 80044cc:	210a      	movs	r1, #10
 80044ce:	434b      	muls	r3, r1
 80044d0:	4667      	mov	r7, ip
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	3909      	subs	r1, #9
 80044d6:	e7a3      	b.n	8004420 <_vfiprintf_r+0x124>
 80044d8:	2301      	movs	r3, #1
 80044da:	425b      	negs	r3, r3
 80044dc:	e7ce      	b.n	800447c <_vfiprintf_r+0x180>
 80044de:	2300      	movs	r3, #0
 80044e0:	001a      	movs	r2, r3
 80044e2:	3701      	adds	r7, #1
 80044e4:	606b      	str	r3, [r5, #4]
 80044e6:	7839      	ldrb	r1, [r7, #0]
 80044e8:	1c78      	adds	r0, r7, #1
 80044ea:	3930      	subs	r1, #48	; 0x30
 80044ec:	4684      	mov	ip, r0
 80044ee:	2909      	cmp	r1, #9
 80044f0:	d903      	bls.n	80044fa <_vfiprintf_r+0x1fe>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0c3      	beq.n	800447e <_vfiprintf_r+0x182>
 80044f6:	9209      	str	r2, [sp, #36]	; 0x24
 80044f8:	e7c1      	b.n	800447e <_vfiprintf_r+0x182>
 80044fa:	230a      	movs	r3, #10
 80044fc:	435a      	muls	r2, r3
 80044fe:	4667      	mov	r7, ip
 8004500:	1852      	adds	r2, r2, r1
 8004502:	3b09      	subs	r3, #9
 8004504:	e7ef      	b.n	80044e6 <_vfiprintf_r+0x1ea>
 8004506:	ab07      	add	r3, sp, #28
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	0022      	movs	r2, r4
 800450c:	0029      	movs	r1, r5
 800450e:	0030      	movs	r0, r6
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <_vfiprintf_r+0x270>)
 8004512:	e000      	b.n	8004516 <_vfiprintf_r+0x21a>
 8004514:	bf00      	nop
 8004516:	9004      	str	r0, [sp, #16]
 8004518:	9b04      	ldr	r3, [sp, #16]
 800451a:	3301      	adds	r3, #1
 800451c:	d1d1      	bne.n	80044c2 <_vfiprintf_r+0x1c6>
 800451e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004520:	07db      	lsls	r3, r3, #31
 8004522:	d405      	bmi.n	8004530 <_vfiprintf_r+0x234>
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	059b      	lsls	r3, r3, #22
 8004528:	d402      	bmi.n	8004530 <_vfiprintf_r+0x234>
 800452a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800452c:	f7ff feac 	bl	8004288 <__retarget_lock_release_recursive>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	065b      	lsls	r3, r3, #25
 8004534:	d500      	bpl.n	8004538 <_vfiprintf_r+0x23c>
 8004536:	e70a      	b.n	800434e <_vfiprintf_r+0x52>
 8004538:	980d      	ldr	r0, [sp, #52]	; 0x34
 800453a:	e70a      	b.n	8004352 <_vfiprintf_r+0x56>
 800453c:	ab07      	add	r3, sp, #28
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	0022      	movs	r2, r4
 8004542:	0029      	movs	r1, r5
 8004544:	0030      	movs	r0, r6
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <_vfiprintf_r+0x270>)
 8004548:	f000 f882 	bl	8004650 <_printf_i>
 800454c:	e7e3      	b.n	8004516 <_vfiprintf_r+0x21a>
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	08004e7c 	.word	0x08004e7c
 8004554:	08004e9c 	.word	0x08004e9c
 8004558:	08004e5c 	.word	0x08004e5c
 800455c:	08004ebc 	.word	0x08004ebc
 8004560:	08004ec2 	.word	0x08004ec2
 8004564:	08004ec6 	.word	0x08004ec6
 8004568:	00000000 	.word	0x00000000
 800456c:	080042d7 	.word	0x080042d7

08004570 <_printf_common>:
 8004570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004572:	0015      	movs	r5, r2
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	688a      	ldr	r2, [r1, #8]
 8004578:	690b      	ldr	r3, [r1, #16]
 800457a:	000c      	movs	r4, r1
 800457c:	9000      	str	r0, [sp, #0]
 800457e:	4293      	cmp	r3, r2
 8004580:	da00      	bge.n	8004584 <_printf_common+0x14>
 8004582:	0013      	movs	r3, r2
 8004584:	0022      	movs	r2, r4
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	3243      	adds	r2, #67	; 0x43
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	2a00      	cmp	r2, #0
 800458e:	d001      	beq.n	8004594 <_printf_common+0x24>
 8004590:	3301      	adds	r3, #1
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	d502      	bpl.n	80045a0 <_printf_common+0x30>
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	3302      	adds	r3, #2
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	6822      	ldr	r2, [r4, #0]
 80045a2:	2306      	movs	r3, #6
 80045a4:	0017      	movs	r7, r2
 80045a6:	401f      	ands	r7, r3
 80045a8:	421a      	tst	r2, r3
 80045aa:	d027      	beq.n	80045fc <_printf_common+0x8c>
 80045ac:	0023      	movs	r3, r4
 80045ae:	3343      	adds	r3, #67	; 0x43
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	4193      	sbcs	r3, r2
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	0692      	lsls	r2, r2, #26
 80045ba:	d430      	bmi.n	800461e <_printf_common+0xae>
 80045bc:	0022      	movs	r2, r4
 80045be:	9901      	ldr	r1, [sp, #4]
 80045c0:	9800      	ldr	r0, [sp, #0]
 80045c2:	9e08      	ldr	r6, [sp, #32]
 80045c4:	3243      	adds	r2, #67	; 0x43
 80045c6:	47b0      	blx	r6
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d025      	beq.n	8004618 <_printf_common+0xa8>
 80045cc:	2306      	movs	r3, #6
 80045ce:	6820      	ldr	r0, [r4, #0]
 80045d0:	682a      	ldr	r2, [r5, #0]
 80045d2:	68e1      	ldr	r1, [r4, #12]
 80045d4:	2500      	movs	r5, #0
 80045d6:	4003      	ands	r3, r0
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d103      	bne.n	80045e4 <_printf_common+0x74>
 80045dc:	1a8d      	subs	r5, r1, r2
 80045de:	43eb      	mvns	r3, r5
 80045e0:	17db      	asrs	r3, r3, #31
 80045e2:	401d      	ands	r5, r3
 80045e4:	68a3      	ldr	r3, [r4, #8]
 80045e6:	6922      	ldr	r2, [r4, #16]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	dd01      	ble.n	80045f0 <_printf_common+0x80>
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	18ed      	adds	r5, r5, r3
 80045f0:	2700      	movs	r7, #0
 80045f2:	42bd      	cmp	r5, r7
 80045f4:	d120      	bne.n	8004638 <_printf_common+0xc8>
 80045f6:	2000      	movs	r0, #0
 80045f8:	e010      	b.n	800461c <_printf_common+0xac>
 80045fa:	3701      	adds	r7, #1
 80045fc:	68e3      	ldr	r3, [r4, #12]
 80045fe:	682a      	ldr	r2, [r5, #0]
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	42bb      	cmp	r3, r7
 8004604:	ddd2      	ble.n	80045ac <_printf_common+0x3c>
 8004606:	0022      	movs	r2, r4
 8004608:	2301      	movs	r3, #1
 800460a:	9901      	ldr	r1, [sp, #4]
 800460c:	9800      	ldr	r0, [sp, #0]
 800460e:	9e08      	ldr	r6, [sp, #32]
 8004610:	3219      	adds	r2, #25
 8004612:	47b0      	blx	r6
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d1f0      	bne.n	80045fa <_printf_common+0x8a>
 8004618:	2001      	movs	r0, #1
 800461a:	4240      	negs	r0, r0
 800461c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800461e:	2030      	movs	r0, #48	; 0x30
 8004620:	18e1      	adds	r1, r4, r3
 8004622:	3143      	adds	r1, #67	; 0x43
 8004624:	7008      	strb	r0, [r1, #0]
 8004626:	0021      	movs	r1, r4
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	3145      	adds	r1, #69	; 0x45
 800462c:	7809      	ldrb	r1, [r1, #0]
 800462e:	18a2      	adds	r2, r4, r2
 8004630:	3243      	adds	r2, #67	; 0x43
 8004632:	3302      	adds	r3, #2
 8004634:	7011      	strb	r1, [r2, #0]
 8004636:	e7c1      	b.n	80045bc <_printf_common+0x4c>
 8004638:	0022      	movs	r2, r4
 800463a:	2301      	movs	r3, #1
 800463c:	9901      	ldr	r1, [sp, #4]
 800463e:	9800      	ldr	r0, [sp, #0]
 8004640:	9e08      	ldr	r6, [sp, #32]
 8004642:	321a      	adds	r2, #26
 8004644:	47b0      	blx	r6
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d0e6      	beq.n	8004618 <_printf_common+0xa8>
 800464a:	3701      	adds	r7, #1
 800464c:	e7d1      	b.n	80045f2 <_printf_common+0x82>
	...

08004650 <_printf_i>:
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	b08b      	sub	sp, #44	; 0x2c
 8004654:	9206      	str	r2, [sp, #24]
 8004656:	000a      	movs	r2, r1
 8004658:	3243      	adds	r2, #67	; 0x43
 800465a:	9307      	str	r3, [sp, #28]
 800465c:	9005      	str	r0, [sp, #20]
 800465e:	9204      	str	r2, [sp, #16]
 8004660:	7e0a      	ldrb	r2, [r1, #24]
 8004662:	000c      	movs	r4, r1
 8004664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004666:	2a78      	cmp	r2, #120	; 0x78
 8004668:	d807      	bhi.n	800467a <_printf_i+0x2a>
 800466a:	2a62      	cmp	r2, #98	; 0x62
 800466c:	d809      	bhi.n	8004682 <_printf_i+0x32>
 800466e:	2a00      	cmp	r2, #0
 8004670:	d100      	bne.n	8004674 <_printf_i+0x24>
 8004672:	e0c1      	b.n	80047f8 <_printf_i+0x1a8>
 8004674:	2a58      	cmp	r2, #88	; 0x58
 8004676:	d100      	bne.n	800467a <_printf_i+0x2a>
 8004678:	e08c      	b.n	8004794 <_printf_i+0x144>
 800467a:	0026      	movs	r6, r4
 800467c:	3642      	adds	r6, #66	; 0x42
 800467e:	7032      	strb	r2, [r6, #0]
 8004680:	e022      	b.n	80046c8 <_printf_i+0x78>
 8004682:	0010      	movs	r0, r2
 8004684:	3863      	subs	r0, #99	; 0x63
 8004686:	2815      	cmp	r0, #21
 8004688:	d8f7      	bhi.n	800467a <_printf_i+0x2a>
 800468a:	f7fb fd3d 	bl	8000108 <__gnu_thumb1_case_shi>
 800468e:	0016      	.short	0x0016
 8004690:	fff6001f 	.word	0xfff6001f
 8004694:	fff6fff6 	.word	0xfff6fff6
 8004698:	001ffff6 	.word	0x001ffff6
 800469c:	fff6fff6 	.word	0xfff6fff6
 80046a0:	fff6fff6 	.word	0xfff6fff6
 80046a4:	003600a8 	.word	0x003600a8
 80046a8:	fff6009a 	.word	0xfff6009a
 80046ac:	00b9fff6 	.word	0x00b9fff6
 80046b0:	0036fff6 	.word	0x0036fff6
 80046b4:	fff6fff6 	.word	0xfff6fff6
 80046b8:	009e      	.short	0x009e
 80046ba:	0026      	movs	r6, r4
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	3642      	adds	r6, #66	; 0x42
 80046c0:	1d11      	adds	r1, r2, #4
 80046c2:	6019      	str	r1, [r3, #0]
 80046c4:	6813      	ldr	r3, [r2, #0]
 80046c6:	7033      	strb	r3, [r6, #0]
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0a7      	b.n	800481c <_printf_i+0x1cc>
 80046cc:	6808      	ldr	r0, [r1, #0]
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	1d0a      	adds	r2, r1, #4
 80046d2:	0605      	lsls	r5, r0, #24
 80046d4:	d50b      	bpl.n	80046ee <_printf_i+0x9e>
 80046d6:	680d      	ldr	r5, [r1, #0]
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	2d00      	cmp	r5, #0
 80046dc:	da03      	bge.n	80046e6 <_printf_i+0x96>
 80046de:	232d      	movs	r3, #45	; 0x2d
 80046e0:	9a04      	ldr	r2, [sp, #16]
 80046e2:	426d      	negs	r5, r5
 80046e4:	7013      	strb	r3, [r2, #0]
 80046e6:	4b61      	ldr	r3, [pc, #388]	; (800486c <_printf_i+0x21c>)
 80046e8:	270a      	movs	r7, #10
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	e01b      	b.n	8004726 <_printf_i+0xd6>
 80046ee:	680d      	ldr	r5, [r1, #0]
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	0641      	lsls	r1, r0, #25
 80046f4:	d5f1      	bpl.n	80046da <_printf_i+0x8a>
 80046f6:	b22d      	sxth	r5, r5
 80046f8:	e7ef      	b.n	80046da <_printf_i+0x8a>
 80046fa:	680d      	ldr	r5, [r1, #0]
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	1d08      	adds	r0, r1, #4
 8004700:	6018      	str	r0, [r3, #0]
 8004702:	062e      	lsls	r6, r5, #24
 8004704:	d501      	bpl.n	800470a <_printf_i+0xba>
 8004706:	680d      	ldr	r5, [r1, #0]
 8004708:	e003      	b.n	8004712 <_printf_i+0xc2>
 800470a:	066d      	lsls	r5, r5, #25
 800470c:	d5fb      	bpl.n	8004706 <_printf_i+0xb6>
 800470e:	680d      	ldr	r5, [r1, #0]
 8004710:	b2ad      	uxth	r5, r5
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <_printf_i+0x21c>)
 8004714:	2708      	movs	r7, #8
 8004716:	9303      	str	r3, [sp, #12]
 8004718:	2a6f      	cmp	r2, #111	; 0x6f
 800471a:	d000      	beq.n	800471e <_printf_i+0xce>
 800471c:	3702      	adds	r7, #2
 800471e:	0023      	movs	r3, r4
 8004720:	2200      	movs	r2, #0
 8004722:	3343      	adds	r3, #67	; 0x43
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	60a3      	str	r3, [r4, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db03      	blt.n	8004736 <_printf_i+0xe6>
 800472e:	2204      	movs	r2, #4
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	4391      	bics	r1, r2
 8004734:	6021      	str	r1, [r4, #0]
 8004736:	2d00      	cmp	r5, #0
 8004738:	d102      	bne.n	8004740 <_printf_i+0xf0>
 800473a:	9e04      	ldr	r6, [sp, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <_printf_i+0x10a>
 8004740:	9e04      	ldr	r6, [sp, #16]
 8004742:	0028      	movs	r0, r5
 8004744:	0039      	movs	r1, r7
 8004746:	f7fb fd6f 	bl	8000228 <__aeabi_uidivmod>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	3e01      	subs	r6, #1
 800474e:	5c5b      	ldrb	r3, [r3, r1]
 8004750:	7033      	strb	r3, [r6, #0]
 8004752:	002b      	movs	r3, r5
 8004754:	0005      	movs	r5, r0
 8004756:	429f      	cmp	r7, r3
 8004758:	d9f3      	bls.n	8004742 <_printf_i+0xf2>
 800475a:	2f08      	cmp	r7, #8
 800475c:	d109      	bne.n	8004772 <_printf_i+0x122>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	07db      	lsls	r3, r3, #31
 8004762:	d506      	bpl.n	8004772 <_printf_i+0x122>
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	6922      	ldr	r2, [r4, #16]
 8004768:	4293      	cmp	r3, r2
 800476a:	dc02      	bgt.n	8004772 <_printf_i+0x122>
 800476c:	2330      	movs	r3, #48	; 0x30
 800476e:	3e01      	subs	r6, #1
 8004770:	7033      	strb	r3, [r6, #0]
 8004772:	9b04      	ldr	r3, [sp, #16]
 8004774:	1b9b      	subs	r3, r3, r6
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	9b07      	ldr	r3, [sp, #28]
 800477a:	0021      	movs	r1, r4
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	9805      	ldr	r0, [sp, #20]
 8004780:	9b06      	ldr	r3, [sp, #24]
 8004782:	aa09      	add	r2, sp, #36	; 0x24
 8004784:	f7ff fef4 	bl	8004570 <_printf_common>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d14c      	bne.n	8004826 <_printf_i+0x1d6>
 800478c:	2001      	movs	r0, #1
 800478e:	4240      	negs	r0, r0
 8004790:	b00b      	add	sp, #44	; 0x2c
 8004792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004794:	3145      	adds	r1, #69	; 0x45
 8004796:	700a      	strb	r2, [r1, #0]
 8004798:	4a34      	ldr	r2, [pc, #208]	; (800486c <_printf_i+0x21c>)
 800479a:	9203      	str	r2, [sp, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	6821      	ldr	r1, [r4, #0]
 80047a0:	ca20      	ldmia	r2!, {r5}
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	0608      	lsls	r0, r1, #24
 80047a6:	d516      	bpl.n	80047d6 <_printf_i+0x186>
 80047a8:	07cb      	lsls	r3, r1, #31
 80047aa:	d502      	bpl.n	80047b2 <_printf_i+0x162>
 80047ac:	2320      	movs	r3, #32
 80047ae:	4319      	orrs	r1, r3
 80047b0:	6021      	str	r1, [r4, #0]
 80047b2:	2710      	movs	r7, #16
 80047b4:	2d00      	cmp	r5, #0
 80047b6:	d1b2      	bne.n	800471e <_printf_i+0xce>
 80047b8:	2320      	movs	r3, #32
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	439a      	bics	r2, r3
 80047be:	6022      	str	r2, [r4, #0]
 80047c0:	e7ad      	b.n	800471e <_printf_i+0xce>
 80047c2:	2220      	movs	r2, #32
 80047c4:	6809      	ldr	r1, [r1, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	6022      	str	r2, [r4, #0]
 80047ca:	0022      	movs	r2, r4
 80047cc:	2178      	movs	r1, #120	; 0x78
 80047ce:	3245      	adds	r2, #69	; 0x45
 80047d0:	7011      	strb	r1, [r2, #0]
 80047d2:	4a27      	ldr	r2, [pc, #156]	; (8004870 <_printf_i+0x220>)
 80047d4:	e7e1      	b.n	800479a <_printf_i+0x14a>
 80047d6:	0648      	lsls	r0, r1, #25
 80047d8:	d5e6      	bpl.n	80047a8 <_printf_i+0x158>
 80047da:	b2ad      	uxth	r5, r5
 80047dc:	e7e4      	b.n	80047a8 <_printf_i+0x158>
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	680d      	ldr	r5, [r1, #0]
 80047e2:	1d10      	adds	r0, r2, #4
 80047e4:	6949      	ldr	r1, [r1, #20]
 80047e6:	6018      	str	r0, [r3, #0]
 80047e8:	6813      	ldr	r3, [r2, #0]
 80047ea:	062e      	lsls	r6, r5, #24
 80047ec:	d501      	bpl.n	80047f2 <_printf_i+0x1a2>
 80047ee:	6019      	str	r1, [r3, #0]
 80047f0:	e002      	b.n	80047f8 <_printf_i+0x1a8>
 80047f2:	066d      	lsls	r5, r5, #25
 80047f4:	d5fb      	bpl.n	80047ee <_printf_i+0x19e>
 80047f6:	8019      	strh	r1, [r3, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	9e04      	ldr	r6, [sp, #16]
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	e7bb      	b.n	8004778 <_printf_i+0x128>
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	1d11      	adds	r1, r2, #4
 8004804:	6019      	str	r1, [r3, #0]
 8004806:	6816      	ldr	r6, [r2, #0]
 8004808:	2100      	movs	r1, #0
 800480a:	0030      	movs	r0, r6
 800480c:	6862      	ldr	r2, [r4, #4]
 800480e:	f000 fabd 	bl	8004d8c <memchr>
 8004812:	2800      	cmp	r0, #0
 8004814:	d001      	beq.n	800481a <_printf_i+0x1ca>
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	6060      	str	r0, [r4, #4]
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	2300      	movs	r3, #0
 8004820:	9a04      	ldr	r2, [sp, #16]
 8004822:	7013      	strb	r3, [r2, #0]
 8004824:	e7a8      	b.n	8004778 <_printf_i+0x128>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	0032      	movs	r2, r6
 800482a:	9906      	ldr	r1, [sp, #24]
 800482c:	9805      	ldr	r0, [sp, #20]
 800482e:	9d07      	ldr	r5, [sp, #28]
 8004830:	47a8      	blx	r5
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d0aa      	beq.n	800478c <_printf_i+0x13c>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	079b      	lsls	r3, r3, #30
 800483a:	d415      	bmi.n	8004868 <_printf_i+0x218>
 800483c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483e:	68e0      	ldr	r0, [r4, #12]
 8004840:	4298      	cmp	r0, r3
 8004842:	daa5      	bge.n	8004790 <_printf_i+0x140>
 8004844:	0018      	movs	r0, r3
 8004846:	e7a3      	b.n	8004790 <_printf_i+0x140>
 8004848:	0022      	movs	r2, r4
 800484a:	2301      	movs	r3, #1
 800484c:	9906      	ldr	r1, [sp, #24]
 800484e:	9805      	ldr	r0, [sp, #20]
 8004850:	9e07      	ldr	r6, [sp, #28]
 8004852:	3219      	adds	r2, #25
 8004854:	47b0      	blx	r6
 8004856:	1c43      	adds	r3, r0, #1
 8004858:	d098      	beq.n	800478c <_printf_i+0x13c>
 800485a:	3501      	adds	r5, #1
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	42ab      	cmp	r3, r5
 8004864:	dcf0      	bgt.n	8004848 <_printf_i+0x1f8>
 8004866:	e7e9      	b.n	800483c <_printf_i+0x1ec>
 8004868:	2500      	movs	r5, #0
 800486a:	e7f7      	b.n	800485c <_printf_i+0x20c>
 800486c:	08004ecd 	.word	0x08004ecd
 8004870:	08004ede 	.word	0x08004ede

08004874 <__sread>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	000c      	movs	r4, r1
 8004878:	250e      	movs	r5, #14
 800487a:	5f49      	ldrsh	r1, [r1, r5]
 800487c:	f000 fa92 	bl	8004da4 <_read_r>
 8004880:	2800      	cmp	r0, #0
 8004882:	db03      	blt.n	800488c <__sread+0x18>
 8004884:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004886:	181b      	adds	r3, r3, r0
 8004888:	6563      	str	r3, [r4, #84]	; 0x54
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	4a02      	ldr	r2, [pc, #8]	; (8004898 <__sread+0x24>)
 8004890:	4013      	ands	r3, r2
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	e7f9      	b.n	800488a <__sread+0x16>
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	ffffefff 	.word	0xffffefff

0800489c <__swrite>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	001f      	movs	r7, r3
 80048a0:	898b      	ldrh	r3, [r1, #12]
 80048a2:	0005      	movs	r5, r0
 80048a4:	000c      	movs	r4, r1
 80048a6:	0016      	movs	r6, r2
 80048a8:	05db      	lsls	r3, r3, #23
 80048aa:	d505      	bpl.n	80048b8 <__swrite+0x1c>
 80048ac:	230e      	movs	r3, #14
 80048ae:	5ec9      	ldrsh	r1, [r1, r3]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2302      	movs	r3, #2
 80048b4:	f000 f9ea 	bl	8004c8c <_lseek_r>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	4a05      	ldr	r2, [pc, #20]	; (80048d0 <__swrite+0x34>)
 80048bc:	0028      	movs	r0, r5
 80048be:	4013      	ands	r3, r2
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	0032      	movs	r2, r6
 80048c4:	230e      	movs	r3, #14
 80048c6:	5ee1      	ldrsh	r1, [r4, r3]
 80048c8:	003b      	movs	r3, r7
 80048ca:	f000 f875 	bl	80049b8 <_write_r>
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d0:	ffffefff 	.word	0xffffefff

080048d4 <__sseek>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	000c      	movs	r4, r1
 80048d8:	250e      	movs	r5, #14
 80048da:	5f49      	ldrsh	r1, [r1, r5]
 80048dc:	f000 f9d6 	bl	8004c8c <_lseek_r>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	1c42      	adds	r2, r0, #1
 80048e4:	d103      	bne.n	80048ee <__sseek+0x1a>
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <__sseek+0x28>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	2280      	movs	r2, #128	; 0x80
 80048f0:	0152      	lsls	r2, r2, #5
 80048f2:	4313      	orrs	r3, r2
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	6560      	str	r0, [r4, #84]	; 0x54
 80048f8:	e7f8      	b.n	80048ec <__sseek+0x18>
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	ffffefff 	.word	0xffffefff

08004900 <__sclose>:
 8004900:	b510      	push	{r4, lr}
 8004902:	230e      	movs	r3, #14
 8004904:	5ec9      	ldrsh	r1, [r1, r3]
 8004906:	f000 f8e3 	bl	8004ad0 <_close_r>
 800490a:	bd10      	pop	{r4, pc}

0800490c <__swbuf_r>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	0005      	movs	r5, r0
 8004910:	000e      	movs	r6, r1
 8004912:	0014      	movs	r4, r2
 8004914:	2800      	cmp	r0, #0
 8004916:	d004      	beq.n	8004922 <__swbuf_r+0x16>
 8004918:	6983      	ldr	r3, [r0, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <__swbuf_r+0x16>
 800491e:	f7ff fc11 	bl	8004144 <__sinit>
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <__swbuf_r+0xa0>)
 8004924:	429c      	cmp	r4, r3
 8004926:	d12e      	bne.n	8004986 <__swbuf_r+0x7a>
 8004928:	686c      	ldr	r4, [r5, #4]
 800492a:	69a3      	ldr	r3, [r4, #24]
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	071b      	lsls	r3, r3, #28
 8004932:	d532      	bpl.n	800499a <__swbuf_r+0x8e>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02f      	beq.n	800499a <__swbuf_r+0x8e>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	b2f7      	uxtb	r7, r6
 8004940:	1a98      	subs	r0, r3, r2
 8004942:	6963      	ldr	r3, [r4, #20]
 8004944:	b2f6      	uxtb	r6, r6
 8004946:	4283      	cmp	r3, r0
 8004948:	dc05      	bgt.n	8004956 <__swbuf_r+0x4a>
 800494a:	0021      	movs	r1, r4
 800494c:	0028      	movs	r0, r5
 800494e:	f000 f95d 	bl	8004c0c <_fflush_r>
 8004952:	2800      	cmp	r0, #0
 8004954:	d127      	bne.n	80049a6 <__swbuf_r+0x9a>
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	3001      	adds	r0, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	60a3      	str	r3, [r4, #8]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	701f      	strb	r7, [r3, #0]
 8004966:	6963      	ldr	r3, [r4, #20]
 8004968:	4283      	cmp	r3, r0
 800496a:	d004      	beq.n	8004976 <__swbuf_r+0x6a>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	07db      	lsls	r3, r3, #31
 8004970:	d507      	bpl.n	8004982 <__swbuf_r+0x76>
 8004972:	2e0a      	cmp	r6, #10
 8004974:	d105      	bne.n	8004982 <__swbuf_r+0x76>
 8004976:	0021      	movs	r1, r4
 8004978:	0028      	movs	r0, r5
 800497a:	f000 f947 	bl	8004c0c <_fflush_r>
 800497e:	2800      	cmp	r0, #0
 8004980:	d111      	bne.n	80049a6 <__swbuf_r+0x9a>
 8004982:	0030      	movs	r0, r6
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <__swbuf_r+0xa4>)
 8004988:	429c      	cmp	r4, r3
 800498a:	d101      	bne.n	8004990 <__swbuf_r+0x84>
 800498c:	68ac      	ldr	r4, [r5, #8]
 800498e:	e7cc      	b.n	800492a <__swbuf_r+0x1e>
 8004990:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <__swbuf_r+0xa8>)
 8004992:	429c      	cmp	r4, r3
 8004994:	d1c9      	bne.n	800492a <__swbuf_r+0x1e>
 8004996:	68ec      	ldr	r4, [r5, #12]
 8004998:	e7c7      	b.n	800492a <__swbuf_r+0x1e>
 800499a:	0021      	movs	r1, r4
 800499c:	0028      	movs	r0, r5
 800499e:	f000 f81f 	bl	80049e0 <__swsetup_r>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d0c9      	beq.n	800493a <__swbuf_r+0x2e>
 80049a6:	2601      	movs	r6, #1
 80049a8:	4276      	negs	r6, r6
 80049aa:	e7ea      	b.n	8004982 <__swbuf_r+0x76>
 80049ac:	08004e7c 	.word	0x08004e7c
 80049b0:	08004e9c 	.word	0x08004e9c
 80049b4:	08004e5c 	.word	0x08004e5c

080049b8 <_write_r>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	0004      	movs	r4, r0
 80049bc:	0008      	movs	r0, r1
 80049be:	0011      	movs	r1, r2
 80049c0:	001a      	movs	r2, r3
 80049c2:	2300      	movs	r3, #0
 80049c4:	4d05      	ldr	r5, [pc, #20]	; (80049dc <_write_r+0x24>)
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	f7fc ffa0 	bl	800190c <_write>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d103      	bne.n	80049d8 <_write_r+0x20>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d000      	beq.n	80049d8 <_write_r+0x20>
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200002cc 	.word	0x200002cc

080049e0 <__swsetup_r>:
 80049e0:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <__swsetup_r+0xe0>)
 80049e2:	b570      	push	{r4, r5, r6, lr}
 80049e4:	681d      	ldr	r5, [r3, #0]
 80049e6:	0006      	movs	r6, r0
 80049e8:	000c      	movs	r4, r1
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	d005      	beq.n	80049fa <__swsetup_r+0x1a>
 80049ee:	69ab      	ldr	r3, [r5, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <__swsetup_r+0x1a>
 80049f4:	0028      	movs	r0, r5
 80049f6:	f7ff fba5 	bl	8004144 <__sinit>
 80049fa:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <__swsetup_r+0xe4>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	d10f      	bne.n	8004a20 <__swsetup_r+0x40>
 8004a00:	686c      	ldr	r4, [r5, #4]
 8004a02:	230c      	movs	r3, #12
 8004a04:	5ee2      	ldrsh	r2, [r4, r3]
 8004a06:	b293      	uxth	r3, r2
 8004a08:	0711      	lsls	r1, r2, #28
 8004a0a:	d42d      	bmi.n	8004a68 <__swsetup_r+0x88>
 8004a0c:	06d9      	lsls	r1, r3, #27
 8004a0e:	d411      	bmi.n	8004a34 <__swsetup_r+0x54>
 8004a10:	2309      	movs	r3, #9
 8004a12:	2001      	movs	r0, #1
 8004a14:	6033      	str	r3, [r6, #0]
 8004a16:	3337      	adds	r3, #55	; 0x37
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	4240      	negs	r0, r0
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <__swsetup_r+0xe8>)
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d101      	bne.n	8004a2a <__swsetup_r+0x4a>
 8004a26:	68ac      	ldr	r4, [r5, #8]
 8004a28:	e7eb      	b.n	8004a02 <__swsetup_r+0x22>
 8004a2a:	4b28      	ldr	r3, [pc, #160]	; (8004acc <__swsetup_r+0xec>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	d1e8      	bne.n	8004a02 <__swsetup_r+0x22>
 8004a30:	68ec      	ldr	r4, [r5, #12]
 8004a32:	e7e6      	b.n	8004a02 <__swsetup_r+0x22>
 8004a34:	075b      	lsls	r3, r3, #29
 8004a36:	d513      	bpl.n	8004a60 <__swsetup_r+0x80>
 8004a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a3a:	2900      	cmp	r1, #0
 8004a3c:	d008      	beq.n	8004a50 <__swsetup_r+0x70>
 8004a3e:	0023      	movs	r3, r4
 8004a40:	3344      	adds	r3, #68	; 0x44
 8004a42:	4299      	cmp	r1, r3
 8004a44:	d002      	beq.n	8004a4c <__swsetup_r+0x6c>
 8004a46:	0030      	movs	r0, r6
 8004a48:	f7ff fa0c 	bl	8003e64 <_free_r>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004a50:	2224      	movs	r2, #36	; 0x24
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	4393      	bics	r3, r2
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	2308      	movs	r3, #8
 8004a62:	89a2      	ldrh	r2, [r4, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	81a3      	strh	r3, [r4, #12]
 8004a68:	6923      	ldr	r3, [r4, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <__swsetup_r+0xa6>
 8004a6e:	21a0      	movs	r1, #160	; 0xa0
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	0089      	lsls	r1, r1, #2
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	400b      	ands	r3, r1
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <__swsetup_r+0xa6>
 8004a7e:	0021      	movs	r1, r4
 8004a80:	0030      	movs	r0, r6
 8004a82:	f000 f93f 	bl	8004d04 <__smakebuf_r>
 8004a86:	220c      	movs	r2, #12
 8004a88:	5ea3      	ldrsh	r3, [r4, r2]
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	b299      	uxth	r1, r3
 8004a90:	4002      	ands	r2, r0
 8004a92:	4203      	tst	r3, r0
 8004a94:	d00f      	beq.n	8004ab6 <__swsetup_r+0xd6>
 8004a96:	2200      	movs	r2, #0
 8004a98:	60a2      	str	r2, [r4, #8]
 8004a9a:	6962      	ldr	r2, [r4, #20]
 8004a9c:	4252      	negs	r2, r2
 8004a9e:	61a2      	str	r2, [r4, #24]
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	6922      	ldr	r2, [r4, #16]
 8004aa4:	4282      	cmp	r2, r0
 8004aa6:	d1ba      	bne.n	8004a1e <__swsetup_r+0x3e>
 8004aa8:	060a      	lsls	r2, r1, #24
 8004aaa:	d5b8      	bpl.n	8004a1e <__swsetup_r+0x3e>
 8004aac:	2240      	movs	r2, #64	; 0x40
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	3801      	subs	r0, #1
 8004ab4:	e7b3      	b.n	8004a1e <__swsetup_r+0x3e>
 8004ab6:	0788      	lsls	r0, r1, #30
 8004ab8:	d400      	bmi.n	8004abc <__swsetup_r+0xdc>
 8004aba:	6962      	ldr	r2, [r4, #20]
 8004abc:	60a2      	str	r2, [r4, #8]
 8004abe:	e7ef      	b.n	8004aa0 <__swsetup_r+0xc0>
 8004ac0:	2000000c 	.word	0x2000000c
 8004ac4:	08004e7c 	.word	0x08004e7c
 8004ac8:	08004e9c 	.word	0x08004e9c
 8004acc:	08004e5c 	.word	0x08004e5c

08004ad0 <_close_r>:
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	4d06      	ldr	r5, [pc, #24]	; (8004af0 <_close_r+0x20>)
 8004ad6:	0004      	movs	r4, r0
 8004ad8:	0008      	movs	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fc ff32 	bl	8001944 <_close>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d103      	bne.n	8004aec <_close_r+0x1c>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d000      	beq.n	8004aec <_close_r+0x1c>
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	200002cc 	.word	0x200002cc

08004af4 <__sflush_r>:
 8004af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af6:	898b      	ldrh	r3, [r1, #12]
 8004af8:	0005      	movs	r5, r0
 8004afa:	000c      	movs	r4, r1
 8004afc:	071a      	lsls	r2, r3, #28
 8004afe:	d45f      	bmi.n	8004bc0 <__sflush_r+0xcc>
 8004b00:	684a      	ldr	r2, [r1, #4]
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	dc04      	bgt.n	8004b10 <__sflush_r+0x1c>
 8004b06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004b08:	2a00      	cmp	r2, #0
 8004b0a:	dc01      	bgt.n	8004b10 <__sflush_r+0x1c>
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004b12:	2f00      	cmp	r7, #0
 8004b14:	d0fa      	beq.n	8004b0c <__sflush_r+0x18>
 8004b16:	2200      	movs	r2, #0
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	682e      	ldr	r6, [r5, #0]
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	001a      	movs	r2, r3
 8004b20:	0149      	lsls	r1, r1, #5
 8004b22:	400a      	ands	r2, r1
 8004b24:	420b      	tst	r3, r1
 8004b26:	d034      	beq.n	8004b92 <__sflush_r+0x9e>
 8004b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	075b      	lsls	r3, r3, #29
 8004b2e:	d506      	bpl.n	8004b3e <__sflush_r+0x4a>
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	1ac0      	subs	r0, r0, r3
 8004b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <__sflush_r+0x4a>
 8004b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	0002      	movs	r2, r0
 8004b40:	6a21      	ldr	r1, [r4, #32]
 8004b42:	2300      	movs	r3, #0
 8004b44:	0028      	movs	r0, r5
 8004b46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004b48:	47b8      	blx	r7
 8004b4a:	89a1      	ldrh	r1, [r4, #12]
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d106      	bne.n	8004b5e <__sflush_r+0x6a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	2b1d      	cmp	r3, #29
 8004b54:	d831      	bhi.n	8004bba <__sflush_r+0xc6>
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <__sflush_r+0x114>)
 8004b58:	40da      	lsrs	r2, r3
 8004b5a:	07d3      	lsls	r3, r2, #31
 8004b5c:	d52d      	bpl.n	8004bba <__sflush_r+0xc6>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6063      	str	r3, [r4, #4]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	04cb      	lsls	r3, r1, #19
 8004b68:	d505      	bpl.n	8004b76 <__sflush_r+0x82>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d102      	bne.n	8004b74 <__sflush_r+0x80>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d100      	bne.n	8004b76 <__sflush_r+0x82>
 8004b74:	6560      	str	r0, [r4, #84]	; 0x54
 8004b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b78:	602e      	str	r6, [r5, #0]
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	d0c6      	beq.n	8004b0c <__sflush_r+0x18>
 8004b7e:	0023      	movs	r3, r4
 8004b80:	3344      	adds	r3, #68	; 0x44
 8004b82:	4299      	cmp	r1, r3
 8004b84:	d002      	beq.n	8004b8c <__sflush_r+0x98>
 8004b86:	0028      	movs	r0, r5
 8004b88:	f7ff f96c 	bl	8003e64 <_free_r>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8004b90:	e7bd      	b.n	8004b0e <__sflush_r+0x1a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	0028      	movs	r0, r5
 8004b96:	6a21      	ldr	r1, [r4, #32]
 8004b98:	47b8      	blx	r7
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d1c5      	bne.n	8004b2a <__sflush_r+0x36>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0c2      	beq.n	8004b2a <__sflush_r+0x36>
 8004ba4:	2b1d      	cmp	r3, #29
 8004ba6:	d001      	beq.n	8004bac <__sflush_r+0xb8>
 8004ba8:	2b16      	cmp	r3, #22
 8004baa:	d101      	bne.n	8004bb0 <__sflush_r+0xbc>
 8004bac:	602e      	str	r6, [r5, #0]
 8004bae:	e7ad      	b.n	8004b0c <__sflush_r+0x18>
 8004bb0:	2340      	movs	r3, #64	; 0x40
 8004bb2:	89a2      	ldrh	r2, [r4, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	e7a9      	b.n	8004b0e <__sflush_r+0x1a>
 8004bba:	2340      	movs	r3, #64	; 0x40
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	e7fa      	b.n	8004bb6 <__sflush_r+0xc2>
 8004bc0:	690f      	ldr	r7, [r1, #16]
 8004bc2:	2f00      	cmp	r7, #0
 8004bc4:	d0a2      	beq.n	8004b0c <__sflush_r+0x18>
 8004bc6:	680a      	ldr	r2, [r1, #0]
 8004bc8:	600f      	str	r7, [r1, #0]
 8004bca:	1bd2      	subs	r2, r2, r7
 8004bcc:	9201      	str	r2, [sp, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	079b      	lsls	r3, r3, #30
 8004bd2:	d100      	bne.n	8004bd6 <__sflush_r+0xe2>
 8004bd4:	694a      	ldr	r2, [r1, #20]
 8004bd6:	60a2      	str	r2, [r4, #8]
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dc00      	bgt.n	8004be0 <__sflush_r+0xec>
 8004bde:	e795      	b.n	8004b0c <__sflush_r+0x18>
 8004be0:	003a      	movs	r2, r7
 8004be2:	0028      	movs	r0, r5
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	6a21      	ldr	r1, [r4, #32]
 8004be8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bea:	47b0      	blx	r6
 8004bec:	2800      	cmp	r0, #0
 8004bee:	dc06      	bgt.n	8004bfe <__sflush_r+0x10a>
 8004bf0:	2340      	movs	r3, #64	; 0x40
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	89a2      	ldrh	r2, [r4, #12]
 8004bf6:	4240      	negs	r0, r0
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	e787      	b.n	8004b0e <__sflush_r+0x1a>
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	183f      	adds	r7, r7, r0
 8004c02:	1a1b      	subs	r3, r3, r0
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	e7e7      	b.n	8004bd8 <__sflush_r+0xe4>
 8004c08:	20400001 	.word	0x20400001

08004c0c <_fflush_r>:
 8004c0c:	690b      	ldr	r3, [r1, #16]
 8004c0e:	b570      	push	{r4, r5, r6, lr}
 8004c10:	0005      	movs	r5, r0
 8004c12:	000c      	movs	r4, r1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <_fflush_r+0x12>
 8004c18:	2500      	movs	r5, #0
 8004c1a:	0028      	movs	r0, r5
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d004      	beq.n	8004c2c <_fflush_r+0x20>
 8004c22:	6983      	ldr	r3, [r0, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <_fflush_r+0x20>
 8004c28:	f7ff fa8c 	bl	8004144 <__sinit>
 8004c2c:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <_fflush_r+0x74>)
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d11b      	bne.n	8004c6a <_fflush_r+0x5e>
 8004c32:	686c      	ldr	r4, [r5, #4]
 8004c34:	220c      	movs	r2, #12
 8004c36:	5ea3      	ldrsh	r3, [r4, r2]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ed      	beq.n	8004c18 <_fflush_r+0xc>
 8004c3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c3e:	07d2      	lsls	r2, r2, #31
 8004c40:	d404      	bmi.n	8004c4c <_fflush_r+0x40>
 8004c42:	059b      	lsls	r3, r3, #22
 8004c44:	d402      	bmi.n	8004c4c <_fflush_r+0x40>
 8004c46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c48:	f7ff fb1d 	bl	8004286 <__retarget_lock_acquire_recursive>
 8004c4c:	0028      	movs	r0, r5
 8004c4e:	0021      	movs	r1, r4
 8004c50:	f7ff ff50 	bl	8004af4 <__sflush_r>
 8004c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c56:	0005      	movs	r5, r0
 8004c58:	07db      	lsls	r3, r3, #31
 8004c5a:	d4de      	bmi.n	8004c1a <_fflush_r+0xe>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	059b      	lsls	r3, r3, #22
 8004c60:	d4db      	bmi.n	8004c1a <_fflush_r+0xe>
 8004c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c64:	f7ff fb10 	bl	8004288 <__retarget_lock_release_recursive>
 8004c68:	e7d7      	b.n	8004c1a <_fflush_r+0xe>
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <_fflush_r+0x78>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d101      	bne.n	8004c74 <_fflush_r+0x68>
 8004c70:	68ac      	ldr	r4, [r5, #8]
 8004c72:	e7df      	b.n	8004c34 <_fflush_r+0x28>
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <_fflush_r+0x7c>)
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d1dc      	bne.n	8004c34 <_fflush_r+0x28>
 8004c7a:	68ec      	ldr	r4, [r5, #12]
 8004c7c:	e7da      	b.n	8004c34 <_fflush_r+0x28>
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	08004e7c 	.word	0x08004e7c
 8004c84:	08004e9c 	.word	0x08004e9c
 8004c88:	08004e5c 	.word	0x08004e5c

08004c8c <_lseek_r>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	0004      	movs	r4, r0
 8004c90:	0008      	movs	r0, r1
 8004c92:	0011      	movs	r1, r2
 8004c94:	001a      	movs	r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	4d05      	ldr	r5, [pc, #20]	; (8004cb0 <_lseek_r+0x24>)
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	f7fc fe73 	bl	8001986 <_lseek>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d103      	bne.n	8004cac <_lseek_r+0x20>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d000      	beq.n	8004cac <_lseek_r+0x20>
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	bd70      	pop	{r4, r5, r6, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	200002cc 	.word	0x200002cc

08004cb4 <__swhatbuf_r>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	000e      	movs	r6, r1
 8004cb8:	001d      	movs	r5, r3
 8004cba:	230e      	movs	r3, #14
 8004cbc:	5ec9      	ldrsh	r1, [r1, r3]
 8004cbe:	0014      	movs	r4, r2
 8004cc0:	b096      	sub	sp, #88	; 0x58
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	da08      	bge.n	8004cd8 <__swhatbuf_r+0x24>
 8004cc6:	220c      	movs	r2, #12
 8004cc8:	5eb3      	ldrsh	r3, [r6, r2]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	602a      	str	r2, [r5, #0]
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	d411      	bmi.n	8004cf6 <__swhatbuf_r+0x42>
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	e00f      	b.n	8004cf8 <__swhatbuf_r+0x44>
 8004cd8:	466a      	mov	r2, sp
 8004cda:	f000 f877 	bl	8004dcc <_fstat_r>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	dbf1      	blt.n	8004cc6 <__swhatbuf_r+0x12>
 8004ce2:	23f0      	movs	r3, #240	; 0xf0
 8004ce4:	9901      	ldr	r1, [sp, #4]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	4019      	ands	r1, r3
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <__swhatbuf_r+0x4c>)
 8004cec:	18c9      	adds	r1, r1, r3
 8004cee:	424b      	negs	r3, r1
 8004cf0:	4159      	adcs	r1, r3
 8004cf2:	6029      	str	r1, [r5, #0]
 8004cf4:	e7ed      	b.n	8004cd2 <__swhatbuf_r+0x1e>
 8004cf6:	2340      	movs	r3, #64	; 0x40
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	b016      	add	sp, #88	; 0x58
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	ffffe000 	.word	0xffffe000

08004d04 <__smakebuf_r>:
 8004d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d06:	2602      	movs	r6, #2
 8004d08:	898b      	ldrh	r3, [r1, #12]
 8004d0a:	0005      	movs	r5, r0
 8004d0c:	000c      	movs	r4, r1
 8004d0e:	4233      	tst	r3, r6
 8004d10:	d006      	beq.n	8004d20 <__smakebuf_r+0x1c>
 8004d12:	0023      	movs	r3, r4
 8004d14:	3347      	adds	r3, #71	; 0x47
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	6163      	str	r3, [r4, #20]
 8004d1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d20:	466a      	mov	r2, sp
 8004d22:	ab01      	add	r3, sp, #4
 8004d24:	f7ff ffc6 	bl	8004cb4 <__swhatbuf_r>
 8004d28:	9900      	ldr	r1, [sp, #0]
 8004d2a:	0007      	movs	r7, r0
 8004d2c:	0028      	movs	r0, r5
 8004d2e:	f7ff f905 	bl	8003f3c <_malloc_r>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d108      	bne.n	8004d48 <__smakebuf_r+0x44>
 8004d36:	220c      	movs	r2, #12
 8004d38:	5ea3      	ldrsh	r3, [r4, r2]
 8004d3a:	059a      	lsls	r2, r3, #22
 8004d3c:	d4ef      	bmi.n	8004d1e <__smakebuf_r+0x1a>
 8004d3e:	2203      	movs	r2, #3
 8004d40:	4393      	bics	r3, r2
 8004d42:	431e      	orrs	r6, r3
 8004d44:	81a6      	strh	r6, [r4, #12]
 8004d46:	e7e4      	b.n	8004d12 <__smakebuf_r+0xe>
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <__smakebuf_r+0x84>)
 8004d4a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	89a2      	ldrh	r2, [r4, #12]
 8004d50:	6020      	str	r0, [r4, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	9b00      	ldr	r3, [sp, #0]
 8004d58:	6120      	str	r0, [r4, #16]
 8004d5a:	6163      	str	r3, [r4, #20]
 8004d5c:	9b01      	ldr	r3, [sp, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <__smakebuf_r+0x7a>
 8004d62:	0028      	movs	r0, r5
 8004d64:	230e      	movs	r3, #14
 8004d66:	5ee1      	ldrsh	r1, [r4, r3]
 8004d68:	f000 f842 	bl	8004df0 <_isatty_r>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d006      	beq.n	8004d7e <__smakebuf_r+0x7a>
 8004d70:	2203      	movs	r2, #3
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	4393      	bics	r3, r2
 8004d76:	001a      	movs	r2, r3
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	89a0      	ldrh	r0, [r4, #12]
 8004d80:	4307      	orrs	r7, r0
 8004d82:	81a7      	strh	r7, [r4, #12]
 8004d84:	e7cb      	b.n	8004d1e <__smakebuf_r+0x1a>
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	080040c9 	.word	0x080040c9

08004d8c <memchr>:
 8004d8c:	b2c9      	uxtb	r1, r1
 8004d8e:	1882      	adds	r2, r0, r2
 8004d90:	4290      	cmp	r0, r2
 8004d92:	d101      	bne.n	8004d98 <memchr+0xc>
 8004d94:	2000      	movs	r0, #0
 8004d96:	4770      	bx	lr
 8004d98:	7803      	ldrb	r3, [r0, #0]
 8004d9a:	428b      	cmp	r3, r1
 8004d9c:	d0fb      	beq.n	8004d96 <memchr+0xa>
 8004d9e:	3001      	adds	r0, #1
 8004da0:	e7f6      	b.n	8004d90 <memchr+0x4>
	...

08004da4 <_read_r>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	0004      	movs	r4, r0
 8004da8:	0008      	movs	r0, r1
 8004daa:	0011      	movs	r1, r2
 8004dac:	001a      	movs	r2, r3
 8004dae:	2300      	movs	r3, #0
 8004db0:	4d05      	ldr	r5, [pc, #20]	; (8004dc8 <_read_r+0x24>)
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fc fd8d 	bl	80018d2 <_read>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d103      	bne.n	8004dc4 <_read_r+0x20>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d000      	beq.n	8004dc4 <_read_r+0x20>
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	200002cc 	.word	0x200002cc

08004dcc <_fstat_r>:
 8004dcc:	2300      	movs	r3, #0
 8004dce:	b570      	push	{r4, r5, r6, lr}
 8004dd0:	4d06      	ldr	r5, [pc, #24]	; (8004dec <_fstat_r+0x20>)
 8004dd2:	0004      	movs	r4, r0
 8004dd4:	0008      	movs	r0, r1
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	f7fc fdbd 	bl	8001958 <_fstat>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	d103      	bne.n	8004dea <_fstat_r+0x1e>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d000      	beq.n	8004dea <_fstat_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	200002cc 	.word	0x200002cc

08004df0 <_isatty_r>:
 8004df0:	2300      	movs	r3, #0
 8004df2:	b570      	push	{r4, r5, r6, lr}
 8004df4:	4d06      	ldr	r5, [pc, #24]	; (8004e10 <_isatty_r+0x20>)
 8004df6:	0004      	movs	r4, r0
 8004df8:	0008      	movs	r0, r1
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	f7fc fdba 	bl	8001974 <_isatty>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d103      	bne.n	8004e0c <_isatty_r+0x1c>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d000      	beq.n	8004e0c <_isatty_r+0x1c>
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	200002cc 	.word	0x200002cc

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
