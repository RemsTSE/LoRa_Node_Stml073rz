
STM32_RA01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c0  080030c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030c8  080030c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  080030dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080030dc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000672e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fb  00000000  00000000  00026762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00027b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  000281b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00004896  00000000  00000000  00028758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001f65  00000000  00000000  0002cfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002ef53  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000015f8  00000000  00000000  0002efa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800307c 	.word	0x0800307c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800307c 	.word	0x0800307c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4647      	mov	r7, r8
 800043a:	b580      	push	{r7, lr}
 800043c:	0007      	movs	r7, r0
 800043e:	4699      	mov	r9, r3
 8000440:	0c3b      	lsrs	r3, r7, #16
 8000442:	469c      	mov	ip, r3
 8000444:	0413      	lsls	r3, r2, #16
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	001d      	movs	r5, r3
 800044a:	000e      	movs	r6, r1
 800044c:	4661      	mov	r1, ip
 800044e:	0400      	lsls	r0, r0, #16
 8000450:	0c14      	lsrs	r4, r2, #16
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	4345      	muls	r5, r0
 8000456:	434b      	muls	r3, r1
 8000458:	4360      	muls	r0, r4
 800045a:	4361      	muls	r1, r4
 800045c:	18c0      	adds	r0, r0, r3
 800045e:	0c2c      	lsrs	r4, r5, #16
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4372      	muls	r2, r6
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	4463      	add	r3, ip
 800047a:	042d      	lsls	r5, r5, #16
 800047c:	0c2d      	lsrs	r5, r5, #16
 800047e:	18c9      	adds	r1, r1, r3
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	1889      	adds	r1, r1, r2
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	469b      	mov	fp, r3
 80004c6:	d433      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c8:	465a      	mov	r2, fp
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83a      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e078      	b.n	80005d4 <__udivmoddi4+0x144>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e075      	b.n	80005da <__udivmoddi4+0x14a>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e028      	b.n	800055a <__udivmoddi4+0xca>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	2320      	movs	r3, #32
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	4652      	mov	r2, sl
 8000538:	40da      	lsrs	r2, r3
 800053a:	4641      	mov	r1, r8
 800053c:	0013      	movs	r3, r2
 800053e:	464a      	mov	r2, r9
 8000540:	408a      	lsls	r2, r1
 8000542:	0017      	movs	r7, r2
 8000544:	4642      	mov	r2, r8
 8000546:	431f      	orrs	r7, r3
 8000548:	4653      	mov	r3, sl
 800054a:	4093      	lsls	r3, r2
 800054c:	001e      	movs	r6, r3
 800054e:	42af      	cmp	r7, r5
 8000550:	d9c4      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0d9      	beq.n	8000514 <__udivmoddi4+0x84>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	431a      	orrs	r2, r3
 8000566:	4646      	mov	r6, r8
 8000568:	087b      	lsrs	r3, r7, #1
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xfa>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xe4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xfe>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0x108>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xdc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xfa>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	465b      	mov	r3, fp
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db24      	blt.n	80005f0 <__udivmoddi4+0x160>
 80005a6:	002b      	movs	r3, r5
 80005a8:	465a      	mov	r2, fp
 80005aa:	4644      	mov	r4, r8
 80005ac:	40d3      	lsrs	r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	465b      	mov	r3, fp
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2a      	blt.n	8000612 <__udivmoddi4+0x182>
 80005bc:	0026      	movs	r6, r4
 80005be:	409e      	lsls	r6, r3
 80005c0:	0033      	movs	r3, r6
 80005c2:	0026      	movs	r6, r4
 80005c4:	4647      	mov	r7, r8
 80005c6:	40be      	lsls	r6, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	1a80      	subs	r0, r0, r2
 80005cc:	4199      	sbcs	r1, r3
 80005ce:	9000      	str	r0, [sp, #0]
 80005d0:	9101      	str	r1, [sp, #4]
 80005d2:	e79f      	b.n	8000514 <__udivmoddi4+0x84>
 80005d4:	42a3      	cmp	r3, r4
 80005d6:	d8bc      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80005d8:	e783      	b.n	80004e2 <__udivmoddi4+0x52>
 80005da:	4642      	mov	r2, r8
 80005dc:	2320      	movs	r3, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	9100      	str	r1, [sp, #0]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	e786      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	4646      	mov	r6, r8
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0023      	movs	r3, r4
 80005fe:	40f3      	lsrs	r3, r6
 8000600:	4644      	mov	r4, r8
 8000602:	4313      	orrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	dad4      	bge.n	80005bc <__udivmoddi4+0x12c>
 8000612:	4642      	mov	r2, r8
 8000614:	002f      	movs	r7, r5
 8000616:	2320      	movs	r3, #32
 8000618:	0026      	movs	r6, r4
 800061a:	4097      	lsls	r7, r2
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	40de      	lsrs	r6, r3
 8000620:	003b      	movs	r3, r7
 8000622:	4333      	orrs	r3, r6
 8000624:	e7cd      	b.n	80005c2 <__udivmoddi4+0x132>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08f      	sub	sp, #60	; 0x3c
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000684:	200c      	movs	r0, #12
 8000686:	183b      	adds	r3, r7, r0
 8000688:	22b2      	movs	r2, #178	; 0xb2
 800068a:	32ff      	adds	r2, #255	; 0xff
 800068c:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 800068e:	183b      	adds	r3, r7, r0
 8000690:	2224      	movs	r2, #36	; 0x24
 8000692:	2107      	movs	r1, #7
 8000694:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000696:	183b      	adds	r3, r7, r0
 8000698:	2225      	movs	r2, #37	; 0x25
 800069a:	2107      	movs	r1, #7
 800069c:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 800069e:	183b      	adds	r3, r7, r0
 80006a0:	2226      	movs	r2, #38	; 0x26
 80006a2:	2101      	movs	r1, #1
 80006a4:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 80006a6:	183b      	adds	r3, r7, r0
 80006a8:	222a      	movs	r2, #42	; 0x2a
 80006aa:	21ff      	movs	r1, #255	; 0xff
 80006ac:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 80006ae:	183b      	adds	r3, r7, r0
 80006b0:	222b      	movs	r2, #43	; 0x2b
 80006b2:	2164      	movs	r1, #100	; 0x64
 80006b4:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 80006b6:	0001      	movs	r1, r0
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2208      	movs	r2, #8
 80006bc:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	187a      	adds	r2, r7, r1
 80006c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006c4:	c313      	stmia	r3!, {r0, r1, r4}
 80006c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006c8:	c313      	stmia	r3!, {r0, r1, r4}
 80006ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006cc:	c313      	stmia	r3!, {r0, r1, r4}
 80006ce:	ca03      	ldmia	r2!, {r0, r1}
 80006d0:	c303      	stmia	r3!, {r0, r1}
}
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b00f      	add	sp, #60	; 0x3c
 80006d8:	bd90      	pop	{r4, r7, pc}

080006da <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6898      	ldr	r0, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	899b      	ldrh	r3, [r3, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	0019      	movs	r1, r3
 80006ee:	f001 f9cb 	bl	8001a88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 ff48 	bl	8001588 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6898      	ldr	r0, [r3, #8]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	899b      	ldrh	r3, [r3, #12]
 8000700:	2201      	movs	r2, #1
 8000702:	0019      	movs	r1, r3
 8000704:	f001 f9c0 	bl	8001a88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f000 ff3d 	bl	8001588 <HAL_Delay>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}

08000716 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000716:	b5b0      	push	{r4, r5, r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000720:	250e      	movs	r5, #14
 8000722:	197c      	adds	r4, r7, r5
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2101      	movs	r1, #1
 8000728:	0018      	movs	r0, r3
 800072a:	f000 f9e8 	bl	8000afe <LoRa_read>
 800072e:	0003      	movs	r3, r0
 8000730:	7023      	strb	r3, [r4, #0]
	data = read;
 8000732:	200f      	movs	r0, #15
 8000734:	183b      	adds	r3, r7, r0
 8000736:	0029      	movs	r1, r5
 8000738:	187a      	adds	r2, r7, r1
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d109      	bne.n	8000758 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8000744:	183b      	adds	r3, r7, r0
 8000746:	187a      	adds	r2, r7, r1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	2107      	movs	r1, #7
 800074c:	438a      	bics	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
 8000756:	e04e      	b.n	80007f6 <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d110      	bne.n	8000780 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 800075e:	230e      	movs	r3, #14
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	2207      	movs	r2, #7
 8000768:	4393      	bics	r3, r2
 800076a:	b25b      	sxtb	r3, r3
 800076c:	2201      	movs	r2, #1
 800076e:	4313      	orrs	r3, r2
 8000770:	b25a      	sxtb	r2, r3
 8000772:	230f      	movs	r3, #15
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	61da      	str	r2, [r3, #28]
 800077e:	e03a      	b.n	80007f6 <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d110      	bne.n	80007a8 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8000786:	230e      	movs	r3, #14
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	2207      	movs	r2, #7
 8000790:	4393      	bics	r3, r2
 8000792:	b25b      	sxtb	r3, r3
 8000794:	2203      	movs	r2, #3
 8000796:	4313      	orrs	r3, r2
 8000798:	b25a      	sxtb	r2, r3
 800079a:	230f      	movs	r3, #15
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2203      	movs	r2, #3
 80007a4:	61da      	str	r2, [r3, #28]
 80007a6:	e026      	b.n	80007f6 <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	2b05      	cmp	r3, #5
 80007ac:	d110      	bne.n	80007d0 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80007ae:	230e      	movs	r3, #14
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	2207      	movs	r2, #7
 80007b8:	4393      	bics	r3, r2
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	2205      	movs	r2, #5
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2205      	movs	r2, #5
 80007cc:	61da      	str	r2, [r3, #28]
 80007ce:	e012      	b.n	80007f6 <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d10f      	bne.n	80007f6 <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 80007d6:	230e      	movs	r3, #14
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	2207      	movs	r2, #7
 80007e0:	4393      	bics	r3, r2
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	2206      	movs	r2, #6
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	230f      	movs	r3, #15
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2206      	movs	r2, #6
 80007f4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80007f6:	230f      	movs	r3, #15
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2101      	movs	r1, #1
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f99a 	bl	8000b3a <LoRa_write>
	//HAL_Delay(10);
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bdb0      	pop	{r4, r5, r7, pc}

0800080e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800080e:	b590      	push	{r4, r7, lr}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	889b      	ldrh	r3, [r3, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	0019      	movs	r1, r3
 800082a:	f001 f92d 	bl	8001a88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6998      	ldr	r0, [r3, #24]
 8000832:	23fa      	movs	r3, #250	; 0xfa
 8000834:	00dc      	lsls	r4, r3, #3
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	68b9      	ldr	r1, [r7, #8]
 800083c:	0023      	movs	r3, r4
 800083e:	f001 fe4f 	bl	80024e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	0018      	movs	r0, r3
 800084a:	f002 faa0 	bl	8002d8e <HAL_SPI_GetState>
 800084e:	0003      	movs	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d1f7      	bne.n	8000844 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6998      	ldr	r0, [r3, #24]
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	00dc      	lsls	r4, r3, #3
 800085c:	2320      	movs	r3, #32
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	881a      	ldrh	r2, [r3, #0]
 8000862:	6839      	ldr	r1, [r7, #0]
 8000864:	0023      	movs	r3, r4
 8000866:	f001 ff99 	bl	800279c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	0018      	movs	r0, r3
 8000872:	f002 fa8c 	bl	8002d8e <HAL_SPI_GetState>
 8000876:	0003      	movs	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d1f7      	bne.n	800086c <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	0019      	movs	r1, r3
 8000888:	f001 f8fe 	bl	8001a88 <HAL_GPIO_WritePin>
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b005      	add	sp, #20
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	889b      	ldrh	r3, [r3, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	0019      	movs	r1, r3
 80008b0:	f001 f8ea 	bl	8001a88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6998      	ldr	r0, [r3, #24]
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	00dc      	lsls	r4, r3, #3
 80008bc:	1dbb      	adds	r3, r7, #6
 80008be:	881a      	ldrh	r2, [r3, #0]
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	0023      	movs	r3, r4
 80008c4:	f001 fe0c 	bl	80024e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 fa5d 	bl	8002d8e <HAL_SPI_GetState>
 80008d4:	0003      	movs	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d1f7      	bne.n	80008ca <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6998      	ldr	r0, [r3, #24]
 80008de:	23fa      	movs	r3, #250	; 0xfa
 80008e0:	00dc      	lsls	r4, r3, #3
 80008e2:	2320      	movs	r3, #32
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	0023      	movs	r3, r4
 80008ec:	f001 fdf8 	bl	80024e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fa49 	bl	8002d8e <HAL_SPI_GetState>
 80008fc:	0003      	movs	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d1f7      	bne.n	80008f2 <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	889b      	ldrh	r3, [r3, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	0019      	movs	r1, r3
 800090e:	f001 f8bb 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b005      	add	sp, #20
 8000918:	bd90      	pop	{r4, r7, pc}

0800091a <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800091a:	b590      	push	{r4, r7, lr}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	04db      	lsls	r3, r3, #19
 8000928:	115b      	asrs	r3, r3, #5
 800092a:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	0c1a      	lsrs	r2, r3, #16
 8000930:	240b      	movs	r4, #11
 8000932:	193b      	adds	r3, r7, r4
 8000934:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000936:	193b      	adds	r3, r7, r4
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2106      	movs	r1, #6
 800093e:	0018      	movs	r0, r3
 8000940:	f000 f8fb 	bl	8000b3a <LoRa_write>
	HAL_Delay(5);
 8000944:	2005      	movs	r0, #5
 8000946:	f000 fe1f 	bl	8001588 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	0a1a      	lsrs	r2, r3, #8
 800094e:	193b      	adds	r3, r7, r4
 8000950:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8000952:	193b      	adds	r3, r7, r4
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2107      	movs	r1, #7
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f8ed 	bl	8000b3a <LoRa_write>
	HAL_Delay(5);
 8000960:	2005      	movs	r0, #5
 8000962:	f000 fe11 	bl	8001588 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 800096c:	193b      	adds	r3, r7, r4
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2108      	movs	r1, #8
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f8e0 	bl	8000b3a <LoRa_write>
	HAL_Delay(5);
 800097a:	2005      	movs	r0, #5
 800097c:	f000 fe04 	bl	8001588 <HAL_Delay>
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b005      	add	sp, #20
 8000986:	bd90      	pop	{r4, r7, pc}

08000988 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	2b0c      	cmp	r3, #12
 8000996:	dd01      	ble.n	800099c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000998:	230c      	movs	r3, #12
 800099a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	2b06      	cmp	r3, #6
 80009a0:	dc01      	bgt.n	80009a6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80009a2:	2307      	movs	r3, #7
 80009a4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80009a6:	250f      	movs	r5, #15
 80009a8:	197c      	adds	r4, r7, r5
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	211e      	movs	r1, #30
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f8a5 	bl	8000afe <LoRa_read>
 80009b4:	0003      	movs	r3, r0
 80009b6:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 80009b8:	200a      	movs	r0, #10
 80009ba:	f000 fde5 	bl	8001588 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	197b      	adds	r3, r7, r5
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	220f      	movs	r2, #15
 80009cc:	4013      	ands	r3, r2
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	200e      	movs	r0, #14
 80009d2:	183b      	adds	r3, r7, r0
 80009d4:	188a      	adds	r2, r1, r2
 80009d6:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	211e      	movs	r1, #30
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 f8aa 	bl	8000b3a <LoRa_write>
	HAL_Delay(10);
 80009e6:	200a      	movs	r0, #10
 80009e8:	f000 fdce 	bl	8001588 <HAL_Delay>
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b004      	add	sp, #16
 80009f2:	bdb0      	pop	{r4, r5, r7, pc}

080009f4 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	000a      	movs	r2, r1
 80009fe:	1cfb      	adds	r3, r7, #3
 8000a00:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000a02:	1cfb      	adds	r3, r7, #3
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2109      	movs	r1, #9
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f895 	bl	8000b3a <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f000 fdb9 	bl	8001588 <HAL_Delay>
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	000a      	movs	r2, r1
 8000a28:	1cfb      	adds	r3, r7, #3
 8000a2a:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8000a34:	1cfb      	adds	r3, r7, #3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b2c      	cmp	r3, #44	; 0x2c
 8000a3a:	d802      	bhi.n	8000a42 <LoRa_setOCP+0x24>
		current = 45;
 8000a3c:	1cfb      	adds	r3, r7, #3
 8000a3e:	222d      	movs	r2, #45	; 0x2d
 8000a40:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8000a42:	1cfb      	adds	r3, r7, #3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2bf0      	cmp	r3, #240	; 0xf0
 8000a48:	d902      	bls.n	8000a50 <LoRa_setOCP+0x32>
		current = 240;
 8000a4a:	1cfb      	adds	r3, r7, #3
 8000a4c:	22f0      	movs	r2, #240	; 0xf0
 8000a4e:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000a50:	1cfb      	adds	r3, r7, #3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b78      	cmp	r3, #120	; 0x78
 8000a56:	d80c      	bhi.n	8000a72 <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000a58:	1cfb      	adds	r3, r7, #3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b2d      	subs	r3, #45	; 0x2d
 8000a5e:	2105      	movs	r1, #5
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fbdb 	bl	800021c <__divsi3>
 8000a66:	0003      	movs	r3, r0
 8000a68:	001a      	movs	r2, r3
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e00f      	b.n	8000a92 <LoRa_setOCP+0x74>
	else if(current <= 240)
 8000a72:	1cfb      	adds	r3, r7, #3
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2bf0      	cmp	r3, #240	; 0xf0
 8000a78:	d80b      	bhi.n	8000a92 <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8000a7a:	1cfb      	adds	r3, r7, #3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	331e      	adds	r3, #30
 8000a80:	210a      	movs	r1, #10
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fbca 	bl	800021c <__divsi3>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8000a92:	210f      	movs	r1, #15
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	3220      	adds	r2, #32
 8000a9c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	210b      	movs	r1, #11
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f847 	bl	8000b3a <LoRa_write>
	HAL_Delay(10);
 8000aac:	200a      	movs	r0, #10
 8000aae:	f000 fd6b 	bl	8001588 <HAL_Delay>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000aba:	b5b0      	push	{r4, r5, r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000ac2:	250f      	movs	r5, #15
 8000ac4:	197c      	adds	r4, r7, r5
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	211e      	movs	r1, #30
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f817 	bl	8000afe <LoRa_read>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8000ad4:	200e      	movs	r0, #14
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	197a      	adds	r2, r7, r5
 8000ada:	7812      	ldrb	r2, [r2, #0]
 8000adc:	2107      	movs	r1, #7
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	211e      	movs	r1, #30
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f825 	bl	8000b3a <LoRa_write>
	HAL_Delay(10);
 8000af0:	200a      	movs	r0, #10
 8000af2:	f000 fd49 	bl	8001588 <HAL_Delay>
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}

08000afe <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000afe:	b590      	push	{r4, r7, lr}
 8000b00:	b087      	sub	sp, #28
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	000a      	movs	r2, r1
 8000b08:	1cfb      	adds	r3, r7, #3
 8000b0a:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000b0c:	1cfb      	adds	r3, r7, #3
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	227f      	movs	r2, #127	; 0x7f
 8000b12:	4013      	ands	r3, r2
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	210e      	movs	r1, #14
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000b1c:	240f      	movs	r4, #15
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	1879      	adds	r1, r7, r1
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f7ff fe70 	bl	800080e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	781b      	ldrb	r3, [r3, #0]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b005      	add	sp, #20
 8000b38:	bd90      	pop	{r4, r7, pc}

08000b3a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af02      	add	r7, sp, #8
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	0008      	movs	r0, r1
 8000b44:	0011      	movs	r1, r2
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	1c02      	adds	r2, r0, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	1cbb      	adds	r3, r7, #2
 8000b4e:	1c0a      	adds	r2, r1, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000b52:	1cfb      	adds	r3, r7, #3
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	4252      	negs	r2, r2
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	701a      	strb	r2, [r3, #0]
	data = value;
 8000b64:	200f      	movs	r0, #15
 8000b66:	183b      	adds	r3, r7, r0
 8000b68:	1cba      	adds	r2, r7, #2
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f7ff fe8b 	bl	8000894 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b087      	sub	sp, #28
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	0008      	movs	r0, r1
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	0019      	movs	r1, r3
 8000b94:	240b      	movs	r4, #11
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	1c02      	adds	r2, r0, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	1c0a      	adds	r2, r1, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	4252      	negs	r2, r2
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	2417      	movs	r4, #23
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	889b      	ldrh	r3, [r3, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	f000 ff61 	bl	8001a88 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6998      	ldr	r0, [r3, #24]
 8000bca:	23fa      	movs	r3, #250	; 0xfa
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	1939      	adds	r1, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f001 fc85 	bl	80024e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 f8d6 	bl	8002d8e <HAL_SPI_GetState>
 8000be2:	0003      	movs	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d1f7      	bne.n	8000bd8 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6998      	ldr	r0, [r3, #24]
 8000bec:	230a      	movs	r3, #10
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	23fa      	movs	r3, #250	; 0xfa
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	f001 fc71 	bl	80024e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 f8c2 	bl	8002d8e <HAL_SPI_GetState>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d1f7      	bne.n	8000c00 <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	889b      	ldrh	r3, [r3, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	f000 ff34 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b007      	add	sp, #28
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

	return 1;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000c3a:	b5b0      	push	{r4, r5, r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	0019      	movs	r1, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	1c0a      	adds	r2, r1, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fd5b 	bl	8000716 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000c60:	2513      	movs	r5, #19
 8000c62:	197c      	adds	r4, r7, r5
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	210e      	movs	r1, #14
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff48 	bl	8000afe <LoRa_read>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000c72:	197b      	adds	r3, r7, r5
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	210d      	movs	r1, #13
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff ff5d 	bl	8000b3a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2122      	movs	r1, #34	; 0x22
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ff56 	bl	8000b3a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	2100      	movs	r1, #0
 8000c98:	f7ff ff75 	bl	8000b86 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fd38 	bl	8000716 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000ca6:	2513      	movs	r5, #19
 8000ca8:	197c      	adds	r4, r7, r5
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2112      	movs	r1, #18
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff25 	bl	8000afe <LoRa_read>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	2112      	movs	r1, #18
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ff36 	bl	8000b3a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fd1e 	bl	8000716 <LoRa_gotoMode>
			return 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e014      	b.n	8000d08 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	1d3a      	adds	r2, r7, #4
 8000ce2:	8812      	ldrh	r2, [r2, #0]
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	801a      	strh	r2, [r3, #0]
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d107      	bne.n	8000d00 <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fd0d 	bl	8000716 <LoRa_gotoMode>
				return 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e003      	b.n	8000d08 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fc41 	bl	8001588 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000d06:	e7ce      	b.n	8000ca6 <LoRa_transmit+0x6c>
	}

}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}

08000d10 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2105      	movs	r1, #5
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fcfa 	bl	8000716 <LoRa_gotoMode>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2c:	b089      	sub	sp, #36	; 0x24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000d38:	231f      	movs	r3, #31
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	e007      	b.n	8000d56 <LoRa_receive+0x2c>
		data[i]=0;
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	18d3      	adds	r3, r2, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf2      	blt.n	8000d46 <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2101      	movs	r1, #1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fcd6 	bl	8000716 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000d6a:	2513      	movs	r5, #19
 8000d6c:	197c      	adds	r4, r7, r5
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2112      	movs	r1, #18
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fec3 	bl	8000afe <LoRa_read>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	4013      	ands	r3, r2
 8000d84:	d03f      	beq.n	8000e06 <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	22ff      	movs	r2, #255	; 0xff
 8000d8a:	2112      	movs	r1, #18
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fed4 	bl	8000b3a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000d92:	2612      	movs	r6, #18
 8000d94:	19bc      	adds	r4, r7, r6
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2113      	movs	r1, #19
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff feaf 	bl	8000afe <LoRa_read>
 8000da0:	0003      	movs	r3, r0
 8000da2:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000da4:	197c      	adds	r4, r7, r5
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2110      	movs	r1, #16
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fea7 	bl	8000afe <LoRa_read>
 8000db0:	0003      	movs	r3, r0
 8000db2:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000db4:	197b      	adds	r3, r7, r5
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	210d      	movs	r1, #13
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff febc 	bl	8000b3a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	18fa      	adds	r2, r7, r3
 8000dc6:	19bb      	adds	r3, r7, r6
 8000dc8:	1df9      	adds	r1, r7, #7
 8000dca:	780c      	ldrb	r4, [r1, #0]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2d8      	uxtb	r0, r3
 8000dd0:	b2e1      	uxtb	r1, r4
 8000dd2:	4288      	cmp	r0, r1
 8000dd4:	d900      	bls.n	8000dd8 <LoRa_receive+0xae>
 8000dd6:	1c23      	adds	r3, r4, #0
 8000dd8:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e00c      	b.n	8000dfa <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	18d4      	adds	r4, r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2100      	movs	r1, #0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fe87 	bl	8000afe <LoRa_read>
 8000df0:	0003      	movs	r3, r0
 8000df2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dbec      	blt.n	8000de0 <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2105      	movs	r1, #5
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fc83 	bl	8000716 <LoRa_gotoMode>
    return min;
 8000e10:	231f      	movs	r3, #31
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	781b      	ldrb	r3, [r3, #0]
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b009      	add	sp, #36	; 0x24
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e1e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e20:	b085      	sub	sp, #20
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff fefd 	bl	8000c28 <LoRa_isvalid>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d100      	bne.n	8000e34 <LoRa_init+0x16>
 8000e32:	e0b3      	b.n	8000f9c <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2100      	movs	r1, #0
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fc6c 	bl	8000716 <LoRa_gotoMode>
			HAL_Delay(10);
 8000e3e:	200a      	movs	r0, #10
 8000e40:	f000 fba2 	bl	8001588 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000e44:	260f      	movs	r6, #15
 8000e46:	19bc      	adds	r4, r7, r6
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fe56 	bl	8000afe <LoRa_read>
 8000e52:	0003      	movs	r3, r0
 8000e54:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8000e56:	200a      	movs	r0, #10
 8000e58:	f000 fb96 	bl	8001588 <HAL_Delay>
			data = read | 0x80;
 8000e5c:	250e      	movs	r5, #14
 8000e5e:	197b      	adds	r3, r7, r5
 8000e60:	0034      	movs	r4, r6
 8000e62:	193a      	adds	r2, r7, r4
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	4249      	negs	r1, r1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2101      	movs	r1, #1
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff fe5f 	bl	8000b3a <LoRa_write>
			HAL_Delay(100);
 8000e7c:	2064      	movs	r0, #100	; 0x64
 8000e7e:	f000 fb83 	bl	8001588 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1a      	ldr	r2, [r3, #32]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fd45 	bl	800091a <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	222a      	movs	r2, #42	; 0x2a
 8000e94:	5c9a      	ldrb	r2, [r3, r2]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fdaa 	bl	80009f4 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	222b      	movs	r2, #43	; 0x2b
 8000ea4:	5c9a      	ldrb	r2, [r3, r2]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff fdb7 	bl	8000a1e <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2223      	movs	r2, #35	; 0x23
 8000eb4:	210c      	movs	r1, #12
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fe3f 	bl	8000b3a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fdfb 	bl	8000aba <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2224      	movs	r2, #36	; 0x24
 8000ec8:	5c9b      	ldrb	r3, [r3, r2]
 8000eca:	001a      	movs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff fd59 	bl	8000988 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	211f      	movs	r1, #31
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fe2c 	bl	8000b3a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2225      	movs	r2, #37	; 0x25
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	b2d9      	uxtb	r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2226      	movs	r2, #38	; 0x26
 8000ef6:	5c9b      	ldrb	r3, [r3, r2]
 8000ef8:	18db      	adds	r3, r3, r3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	197b      	adds	r3, r7, r5
 8000efe:	188a      	adds	r2, r1, r2
 8000f00:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000f02:	197b      	adds	r3, r7, r5
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	211d      	movs	r1, #29
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff fe15 	bl	8000b3a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fe0b 	bl	8000b3a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2121      	movs	r1, #33	; 0x21
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff fe03 	bl	8000b3a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000f34:	0026      	movs	r6, r4
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff fdde 	bl	8000afe <LoRa_read>
 8000f42:	0003      	movs	r3, r0
 8000f44:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8000f46:	197b      	adds	r3, r7, r5
 8000f48:	0034      	movs	r4, r6
 8000f4a:	193a      	adds	r2, r7, r4
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	213f      	movs	r1, #63	; 0x3f
 8000f50:	430a      	orrs	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000f54:	197b      	adds	r3, r7, r5
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fdec 	bl	8000b3a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2101      	movs	r1, #1
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fbd5 	bl	8000716 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fb08 	bl	8001588 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000f78:	0025      	movs	r5, r4
 8000f7a:	193c      	adds	r4, r7, r4
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2142      	movs	r1, #66	; 0x42
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fdbc 	bl	8000afe <LoRa_read>
 8000f86:	0003      	movs	r3, r0
 8000f88:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8000f8a:	197b      	adds	r3, r7, r5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d101      	bne.n	8000f96 <LoRa_init+0x178>
				return LORA_OK;
 8000f92:	23c8      	movs	r3, #200	; 0xc8
 8000f94:	e004      	b.n	8000fa0 <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8000f96:	23ca      	movs	r3, #202	; 0xca
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	e001      	b.n	8000fa0 <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8000f9c:	23f8      	movs	r3, #248	; 0xf8
 8000f9e:	33ff      	adds	r3, #255	; 0xff
	}
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b005      	add	sp, #20
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b08f      	sub	sp, #60	; 0x3c
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fa7b 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f875 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f903 	bl	80011c0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000fba:	f000 f8c9 	bl	8001150 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000fbe:	f000 f9ad 	bl	800131c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// MODULE SETTINGS ----------------------------------------------
	myLoRa = newLoRa();
 8000fc2:	4c30      	ldr	r4, [pc, #192]	; (8001084 <main+0xdc>)
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff fb58 	bl	800067c <newLoRa>
 8000fcc:	003a      	movs	r2, r7
 8000fce:	0023      	movs	r3, r4
 8000fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fd2:	c313      	stmia	r3!, {r0, r1, r4}
 8000fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fd6:	c313      	stmia	r3!, {r0, r1, r4}
 8000fd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fda:	c313      	stmia	r3!, {r0, r1, r4}
 8000fdc:	ca03      	ldmia	r2!, {r0, r1}
 8000fde:	c303      	stmia	r3!, {r0, r1}

	myLoRa.hSPIx                 = &hspi3;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <main+0xdc>)
 8000fe2:	4a29      	ldr	r2, [pc, #164]	; (8001088 <main+0xe0>)
 8000fe4:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = NSS_GPIO_Port;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <main+0xdc>)
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <main+0xe4>)
 8000fea:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = NSS_Pin;
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <main+0xdc>)
 8000fee:	4a28      	ldr	r2, [pc, #160]	; (8001090 <main+0xe8>)
 8000ff0:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = RESET_GPIO_Port;
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <main+0xdc>)
 8000ff4:	4a25      	ldr	r2, [pc, #148]	; (800108c <main+0xe4>)
 8000ff6:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RESET_Pin;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <main+0xdc>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	01d2      	lsls	r2, r2, #7
 8000ffe:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <main+0xdc>)
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <main+0xe4>)
 8001004:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin	= DIO0_Pin;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <main+0xdc>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0192      	lsls	r2, r2, #6
 800100c:	829a      	strh	r2, [r3, #20]

	myLoRa.frequency             = 433;							  // default = 433 MHz
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <main+0xdc>)
 8001010:	22b2      	movs	r2, #178	; 0xb2
 8001012:	32ff      	adds	r2, #255	; 0xff
 8001014:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <main+0xdc>)
 8001018:	2224      	movs	r2, #36	; 0x24
 800101a:	2107      	movs	r1, #7
 800101c:	5499      	strb	r1, [r3, r2]
	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <main+0xdc>)
 8001020:	2225      	movs	r2, #37	; 0x25
 8001022:	2107      	movs	r1, #7
 8001024:	5499      	strb	r1, [r3, r2]
	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <main+0xdc>)
 8001028:	2226      	movs	r2, #38	; 0x26
 800102a:	2101      	movs	r1, #1
 800102c:	5499      	strb	r1, [r3, r2]
	myLoRa.power					       = POWER_20db;				// default = 20db
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <main+0xdc>)
 8001030:	222a      	movs	r2, #42	; 0x2a
 8001032:	21ff      	movs	r1, #255	; 0xff
 8001034:	5499      	strb	r1, [r3, r2]
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <main+0xdc>)
 8001038:	222b      	movs	r2, #43	; 0x2b
 800103a:	2178      	movs	r1, #120	; 0x78
 800103c:	5499      	strb	r1, [r3, r2]
	myLoRa.preamble				       = 10;		  					// default = 8;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <main+0xdc>)
 8001040:	220a      	movs	r2, #10
 8001042:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <main+0xdc>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fb47 	bl	80006da <LoRa_reset>
	LoRa_init(&myLoRa);
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <main+0xdc>)
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fee5 	bl	8000e1e <LoRa_init>

	// START CONTINUOUS RECEIVING -----------------------------------
	LoRa_startReceiving(&myLoRa);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <main+0xdc>)
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff fe5a 	bl	8000d10 <LoRa_startReceiving>

		// SENDING DATA - - - - - - - - - - - - - - - - - - - - - - - - -
		//send_data[0] = 0x3B; // MY ADDRESS

		char*  send_data;
		send_data = "Hello world!";
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <main+0xec>)
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
		LoRa_transmit(&myLoRa, (uint8_t*)send_data, 12, 100);
 8001060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <main+0xdc>)
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	220c      	movs	r2, #12
 8001068:	f7ff fde7 	bl	8000c3a <LoRa_transmit>

		//uart_send_string("Data sent");
		HAL_Delay(1500);
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <main+0xf0>)
 800106e:	0018      	movs	r0, r3
 8001070:	f000 fa8a 	bl	8001588 <HAL_Delay>

		// RECEIVING DATA - - - - - - - - - - - - - - - - - - - - - - - -
		LoRa_receive(&myLoRa, read_data, 128);
 8001074:	4909      	ldr	r1, [pc, #36]	; (800109c <main+0xf4>)
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <main+0xdc>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff fe55 	bl	8000d2a <LoRa_receive>
  {
 8001080:	e7ec      	b.n	800105c <main+0xb4>
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000080 	.word	0x20000080
 8001088:	20000028 	.word	0x20000028
 800108c:	50001000 	.word	0x50001000
 8001090:	ffff8000 	.word	0xffff8000
 8001094:	08003094 	.word	0x08003094
 8001098:	000005dc 	.word	0x000005dc
 800109c:	200000ac 	.word	0x200000ac

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b095      	sub	sp, #84	; 0x54
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	2418      	movs	r4, #24
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	0018      	movs	r0, r3
 80010ac:	2338      	movs	r3, #56	; 0x38
 80010ae:	001a      	movs	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	f001 ffdb 	bl	800306c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	0018      	movs	r0, r3
 80010ba:	2314      	movs	r3, #20
 80010bc:	001a      	movs	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f001 ffd4 	bl	800306c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <SystemClock_Config+0xa4>)
 80010c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <SystemClock_Config+0xa4>)
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	0549      	lsls	r1, r1, #21
 80010ce:	430a      	orrs	r2, r1
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <SystemClock_Config+0xa8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1d      	ldr	r2, [pc, #116]	; (800114c <SystemClock_Config+0xac>)
 80010d8:	401a      	ands	r2, r3
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <SystemClock_Config+0xa8>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0109      	lsls	r1, r1, #4
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e4:	0021      	movs	r1, r4
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2202      	movs	r2, #2
 80010ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2201      	movs	r2, #1
 80010f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2210      	movs	r2, #16
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2202      	movs	r2, #2
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = 8;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2208      	movs	r2, #8
 8001108:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	187b      	adds	r3, r7, r1
 800110c:	0018      	movs	r0, r3
 800110e:	f000 fcd9 	bl	8001ac4 <HAL_RCC_OscConfig>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001116:	f000 f923 	bl	8001360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	220f      	movs	r2, #15
 800111e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2203      	movs	r2, #3
 8001124:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	00d2      	lsls	r2, r2, #3
 8001132:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]


}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b015      	add	sp, #84	; 0x54
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40021000 	.word	0x40021000
 8001148:	40007000 	.word	0x40007000
 800114c:	ffffe7ff 	.word	0xffffe7ff

08001150 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI1;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <MX_SPI3_Init+0x6c>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI3_Init+0x68>)
 800115c:	2282      	movs	r2, #130	; 0x82
 800115e:	0052      	lsls	r2, r2, #1
 8001160:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_SPI3_Init+0x68>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI3_Init+0x68>)
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_SPI3_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_SPI3_Init+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI3_Init+0x68>)
 800119c:	220a      	movs	r2, #10
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <MX_SPI3_Init+0x68>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 f908 	bl	80023b8 <HAL_SPI_Init>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011ac:	f000 f8d8 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000028 	.word	0x20000028
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08d      	sub	sp, #52	; 0x34
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	241c      	movs	r4, #28
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	0018      	movs	r0, r3
 80011cc:	2314      	movs	r3, #20
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f001 ff4b 	bl	800306c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MX_GPIO_Init+0x150>)
 80011d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011da:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <MX_GPIO_Init+0x150>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	430a      	orrs	r2, r1
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <MX_GPIO_Init+0x150>)
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <MX_GPIO_Init+0x150>)
 80011f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <MX_GPIO_Init+0x150>)
 80011f4:	2110      	movs	r1, #16
 80011f6:	430a      	orrs	r2, r1
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <MX_GPIO_Init+0x150>)
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	2210      	movs	r2, #16
 8001200:	4013      	ands	r3, r2
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_GPIO_Init+0x150>)
 8001208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <MX_GPIO_Init+0x150>)
 800120c:	2102      	movs	r1, #2
 800120e:	430a      	orrs	r2, r1
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <MX_GPIO_Init+0x150>)
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <MX_GPIO_Init+0x150>)
 8001220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <MX_GPIO_Init+0x150>)
 8001224:	2108      	movs	r1, #8
 8001226:	430a      	orrs	r2, r1
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <MX_GPIO_Init+0x150>)
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	2208      	movs	r2, #8
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <MX_GPIO_Init+0x150>)
 8001238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123a:	4b35      	ldr	r3, [pc, #212]	; (8001310 <MX_GPIO_Init+0x150>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <MX_GPIO_Init+0x150>)
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_GPIO_Init+0x150>)
 8001250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <MX_GPIO_Init+0x150>)
 8001254:	2104      	movs	r1, #4
 8001256:	430a      	orrs	r2, r1
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_GPIO_Init+0x150>)
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RESET_Pin|NSS_Pin, GPIO_PIN_SET);
 8001266:	23c0      	movs	r3, #192	; 0xc0
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	482a      	ldr	r0, [pc, #168]	; (8001314 <MX_GPIO_Init+0x154>)
 800126c:	2201      	movs	r2, #1
 800126e:	0019      	movs	r1, r3
 8001270:	f000 fc0a 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEVEL1_Pin|LEVEL2_Pin|LEVEL3_Pin|LEVEL4_Pin, GPIO_PIN_RESET);
 8001274:	23f0      	movs	r3, #240	; 0xf0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	4827      	ldr	r0, [pc, #156]	; (8001318 <MX_GPIO_Init+0x158>)
 800127a:	2200      	movs	r2, #0
 800127c:	0019      	movs	r1, r3
 800127e:	f000 fc03 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0192      	lsls	r2, r2, #6
 8001288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2288      	movs	r2, #136	; 0x88
 800128e:	0352      	lsls	r2, r2, #13
 8001290:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	193b      	adds	r3, r7, r4
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001298:	193b      	adds	r3, r7, r4
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_GPIO_Init+0x154>)
 800129c:	0019      	movs	r1, r3
 800129e:	0010      	movs	r0, r2
 80012a0:	f000 fa74 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin;
 80012a4:	0021      	movs	r1, r4
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	22c0      	movs	r2, #192	; 0xc0
 80012aa:	0212      	lsls	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	000c      	movs	r4, r1
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2201      	movs	r2, #1
 80012b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_GPIO_Init+0x154>)
 80012c6:	0019      	movs	r1, r3
 80012c8:	0010      	movs	r0, r2
 80012ca:	f000 fa5f 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEVEL1_Pin LEVEL2_Pin LEVEL3_Pin LEVEL4_Pin */
  GPIO_InitStruct.Pin = LEVEL1_Pin|LEVEL2_Pin|LEVEL3_Pin|LEVEL4_Pin;
 80012ce:	0021      	movs	r1, r4
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	22f0      	movs	r2, #240	; 0xf0
 80012d4:	0212      	lsls	r2, r2, #8
 80012d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2201      	movs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <MX_GPIO_Init+0x158>)
 80012ee:	0019      	movs	r1, r3
 80012f0:	0010      	movs	r0, r2
 80012f2:	f000 fa4b 	bl	800178c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2007      	movs	r0, #7
 80012fc:	f000 fa14 	bl	8001728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001300:	2007      	movs	r0, #7
 8001302:	f000 fa26 	bl	8001752 <HAL_NVIC_EnableIRQ>

}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b00d      	add	sp, #52	; 0x34
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	50001000 	.word	0x50001000
 8001318:	50000c00 	.word	0x50000c00

0800131c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;
char uart_buf[256];  // buffer to store UART messages

/* UART initialization function */
void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <MX_USART2_UART_Init+0x40>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 8001328:	22e1      	movs	r2, #225	; 0xe1
 800132a:	0252      	lsls	r2, r2, #9
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <MX_USART2_UART_Init+0x3c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]

}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000012c 	.word	0x2000012c
 800135c:	40004400 	.word	0x40004400

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_MspInit+0x24>)
 8001372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x24>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_MspInit+0x24>)
 800137e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_MspInit+0x24>)
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0549      	lsls	r1, r1, #21
 8001386:	430a      	orrs	r2, r1
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	240c      	movs	r4, #12
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	0018      	movs	r0, r3
 80013a2:	2314      	movs	r3, #20
 80013a4:	001a      	movs	r2, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	f001 fe60 	bl	800306c <memset>
  if(hspi->Instance==SPI1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d129      	bne.n	800140a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x84>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_SPI_MspInit+0x84>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	0149      	lsls	r1, r1, #5
 80013c0:	430a      	orrs	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_SPI_MspInit+0x84>)
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_SPI_MspInit+0x84>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_SPI_MspInit+0x84>)
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013dc:	0021      	movs	r1, r4
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	22f0      	movs	r2, #240	; 0xf0
 80013e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2202      	movs	r2, #2
 80013e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2203      	movs	r2, #3
 80013f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	187a      	adds	r2, r7, r1
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f000 f9c1 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b009      	add	sp, #36	; 0x24
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40013000 	.word	0x40013000
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f886 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001456:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001458:	f7ff fff7 	bl	800144a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001482:	f001 fdcf 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff fd8f 	bl	8000fa8 <main>

0800148a <LoopForever>:

LoopForever:
    b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
   ldr   r0, =_estack
 800148c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001498:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 800149c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a0:	200001b8 	.word	0x200001b8

080014a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_COMP_IRQHandler>
	...

080014a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_Init+0x3c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Init+0x3c>)
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 f811 	bl	80014e8 <HAL_InitTick>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e001      	b.n	80014d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d2:	f7ff ff4b 	bl	800136c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_InitTick+0x5c>)
 80014f2:	681c      	ldr	r4, [r3, #0]
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_InitTick+0x60>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	0019      	movs	r1, r3
 80014fa:	23fa      	movs	r3, #250	; 0xfa
 80014fc:	0098      	lsls	r0, r3, #2
 80014fe:	f7fe fe03 	bl	8000108 <__udivsi3>
 8001502:	0003      	movs	r3, r0
 8001504:	0019      	movs	r1, r3
 8001506:	0020      	movs	r0, r4
 8001508:	f7fe fdfe 	bl	8000108 <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	0018      	movs	r0, r3
 8001510:	f000 f92f 	bl	8001772 <HAL_SYSTICK_Config>
 8001514:	1e03      	subs	r3, r0, #0
 8001516:	d001      	beq.n	800151c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00f      	b.n	800153c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d80b      	bhi.n	800153a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	2301      	movs	r3, #1
 8001526:	425b      	negs	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f8fc 	bl	8001728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_InitTick+0x64>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b003      	add	sp, #12
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	20000000 	.word	0x20000000
 8001548:	20000008 	.word	0x20000008
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	001a      	movs	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	18d2      	adds	r2, r2, r3
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_IncTick+0x20>)
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	20000008 	.word	0x20000008
 8001570:	200001b4 	.word	0x200001b4

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	200001b4 	.word	0x200001b4

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fff0 	bl	8001574 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	001a      	movs	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	189b      	adds	r3, r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	f7ff ffe0 	bl	8001574 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	20000008 	.word	0x20000008

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b7f      	cmp	r3, #127	; 0x7f
 80015e2:	d809      	bhi.n	80015f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	001a      	movs	r2, r3
 80015ea:	231f      	movs	r3, #31
 80015ec:	401a      	ands	r2, r3
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_EnableIRQ+0x30>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	4091      	lsls	r1, r2
 80015f4:	000a      	movs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
  }
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b7f      	cmp	r3, #127	; 0x7f
 8001618:	d828      	bhi.n	800166c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <__NVIC_SetPriority+0xd4>)
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	33c0      	adds	r3, #192	; 0xc0
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	589b      	ldr	r3, [r3, r2]
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	0011      	movs	r1, r2
 8001630:	2203      	movs	r2, #3
 8001632:	400a      	ands	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	21ff      	movs	r1, #255	; 0xff
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	43d2      	mvns	r2, r2
 800163e:	401a      	ands	r2, r3
 8001640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	401a      	ands	r2, r3
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	2303      	movs	r3, #3
 8001652:	4003      	ands	r3, r0
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	481f      	ldr	r0, [pc, #124]	; (80016d8 <__NVIC_SetPriority+0xd4>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	33c0      	adds	r3, #192	; 0xc0
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800166a:	e031      	b.n	80016d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	0019      	movs	r1, r3
 8001674:	230f      	movs	r3, #15
 8001676:	400b      	ands	r3, r1
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3306      	adds	r3, #6
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1dfa      	adds	r2, r7, #7
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	0011      	movs	r1, r2
 800168c:	2203      	movs	r2, #3
 800168e:	400a      	ands	r2, r1
 8001690:	00d2      	lsls	r2, r2, #3
 8001692:	21ff      	movs	r1, #255	; 0xff
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	401a      	ands	r2, r3
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	2303      	movs	r3, #3
 80016ae:	4003      	ands	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <__NVIC_SetPriority+0xd8>)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	001c      	movs	r4, r3
 80016bc:	230f      	movs	r3, #15
 80016be:	4023      	ands	r3, r4
 80016c0:	3b08      	subs	r3, #8
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	430a      	orrs	r2, r1
 80016c6:	3306      	adds	r3, #6
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	18c3      	adds	r3, r0, r3
 80016cc:	3304      	adds	r3, #4
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b003      	add	sp, #12
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d301      	bcc.n	80016f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f4:	2301      	movs	r3, #1
 80016f6:	e010      	b.n	800171a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <SysTick_Config+0x44>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	3a01      	subs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001700:	2301      	movs	r3, #1
 8001702:	425b      	negs	r3, r3
 8001704:	2103      	movs	r1, #3
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff7c 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x44>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x44>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	210f      	movs	r1, #15
 8001734:	187b      	adds	r3, r7, r1
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	0002      	movs	r2, r0
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ff33 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff ffaf 	bl	80016e0 <SysTick_Config>
 8001782:	0003      	movs	r3, r0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017a2:	e155      	b.n	8001a50 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2101      	movs	r1, #1
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4091      	lsls	r1, r2
 80017ae:	000a      	movs	r2, r1
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d100      	bne.n	80017bc <HAL_GPIO_Init+0x30>
 80017ba:	e146      	b.n	8001a4a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d005      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	43da      	mvns	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	2201      	movs	r2, #1
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	4013      	ands	r3, r2
 800183e:	2b03      	cmp	r3, #3
 8001840:	d017      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	4013      	ands	r3, r2
 800187a:	2b02      	cmp	r3, #2
 800187c:	d123      	bne.n	80018c6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	58d3      	ldr	r3, [r2, r3]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2207      	movs	r2, #7
 8001890:	4013      	ands	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	43da      	mvns	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2107      	movs	r1, #7
 80018aa:	400b      	ands	r3, r1
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	6939      	ldr	r1, [r7, #16]
 80018c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	43da      	mvns	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	029b      	lsls	r3, r3, #10
 8001902:	4013      	ands	r3, r2
 8001904:	d100      	bne.n	8001908 <HAL_GPIO_Init+0x17c>
 8001906:	e0a0      	b.n	8001a4a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_GPIO_Init+0x2dc>)
 800190a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190c:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <HAL_GPIO_Init+0x2dc>)
 800190e:	2101      	movs	r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001914:	4a55      	ldr	r2, [pc, #340]	; (8001a6c <HAL_GPIO_Init+0x2e0>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	589b      	ldr	r3, [r3, r2]
 8001920:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2203      	movs	r2, #3
 8001926:	4013      	ands	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	409a      	lsls	r2, r3
 800192e:	0013      	movs	r3, r2
 8001930:	43da      	mvns	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	23a0      	movs	r3, #160	; 0xa0
 800193c:	05db      	lsls	r3, r3, #23
 800193e:	429a      	cmp	r2, r3
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x1f6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x2e4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x1f2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <HAL_GPIO_Init+0x2e8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x1ee>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2ec>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x1ea>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_GPIO_Init+0x2f0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x1e6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a46      	ldr	r2, [pc, #280]	; (8001a80 <HAL_GPIO_Init+0x2f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x1e2>
 800196a:	2305      	movs	r3, #5
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x1f8>
 800196e:	2306      	movs	r3, #6
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x1f8>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x1f8>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x1f8>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x1f8>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x1f8>
 8001982:	2300      	movs	r3, #0
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	2103      	movs	r1, #3
 8001988:	400a      	ands	r2, r1
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <HAL_GPIO_Init+0x2e0>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43da      	mvns	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	035b      	lsls	r3, r3, #13
 80019ba:	4013      	ands	r3, r2
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43da      	mvns	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	039b      	lsls	r3, r3, #14
 80019e4:	4013      	ands	r3, r2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	029b      	lsls	r3, r3, #10
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	40da      	lsrs	r2, r3
 8001a58:	1e13      	subs	r3, r2, #0
 8001a5a:	d000      	beq.n	8001a5e <HAL_GPIO_Init+0x2d2>
 8001a5c:	e6a2      	b.n	80017a4 <HAL_GPIO_Init+0x18>
  }
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b006      	add	sp, #24
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	50000400 	.word	0x50000400
 8001a74:	50000800 	.word	0x50000800
 8001a78:	50000c00 	.word	0x50000c00
 8001a7c:	50001000 	.word	0x50001000
 8001a80:	50001c00 	.word	0x50001c00
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	0008      	movs	r0, r1
 8001a92:	0011      	movs	r1, r2
 8001a94:	1cbb      	adds	r3, r7, #2
 8001a96:	1c02      	adds	r2, r0, #0
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	1c7b      	adds	r3, r7, #1
 8001a9c:	1c0a      	adds	r2, r1, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	1c7b      	adds	r3, r7, #1
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa8:	1cbb      	adds	r3, r7, #2
 8001aaa:	881a      	ldrh	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ab2:	1cbb      	adds	r3, r7, #2
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f000 fbbf 	bl	8002256 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad8:	4bc9      	ldr	r3, [pc, #804]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	220c      	movs	r2, #12
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae2:	4bc7      	ldr	r3, [pc, #796]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_OscConfig+0x36>
 8001af8:	e07e      	b.n	8001bf8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d007      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d112      	bne.n	8001b2c <HAL_RCC_OscConfig+0x68>
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d10d      	bne.n	8001b2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4bbb      	ldr	r3, [pc, #748]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5a>
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x132>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d167      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f000 fb95 	bl	8002256 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_OscConfig+0x84>
 8001b38:	4bb1      	ldr	r3, [pc, #708]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4bb0      	ldr	r3, [pc, #704]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	0249      	lsls	r1, r1, #9
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e027      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	23a0      	movs	r3, #160	; 0xa0
 8001b4e:	02db      	lsls	r3, r3, #11
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10e      	bne.n	8001b72 <HAL_RCC_OscConfig+0xae>
 8001b54:	4baa      	ldr	r3, [pc, #680]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4ba9      	ldr	r3, [pc, #676]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	02c9      	lsls	r1, r1, #11
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	4ba7      	ldr	r3, [pc, #668]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4ba6      	ldr	r3, [pc, #664]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0249      	lsls	r1, r1, #9
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e012      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b72:	4ba3      	ldr	r3, [pc, #652]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4ba2      	ldr	r3, [pc, #648]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b78:	49a2      	ldr	r1, [pc, #648]	; (8001e04 <HAL_RCC_OscConfig+0x340>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	025b      	lsls	r3, r3, #9
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b9b      	ldr	r3, [pc, #620]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001b92:	499d      	ldr	r1, [pc, #628]	; (8001e08 <HAL_RCC_OscConfig+0x344>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d015      	beq.n	8001bcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fce8 	bl	8001574 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001baa:	f7ff fce3 	bl	8001574 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d902      	bls.n	8001bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	f000 fb4c 	bl	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bbe:	4b90      	ldr	r3, [pc, #576]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d0ef      	beq.n	8001baa <HAL_RCC_OscConfig+0xe6>
 8001bca:	e015      	b.n	8001bf8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fcd2 	bl	8001574 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fccd 	bl	8001574 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	; 0x64
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e336      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001be8:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	029b      	lsls	r3, r3, #10
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x112>
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <HAL_RCC_OscConfig+0x140>
 8001c02:	e099      	b.n	8001d38 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c12:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c18:	2120      	movs	r1, #32
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	2220      	movs	r2, #32
 8001c22:	4393      	bics	r3, r2
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d13e      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1ec>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d13b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c38:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_RCC_OscConfig+0x188>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e304      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x348>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	021a      	lsls	r2, r3, #8
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2209      	movs	r2, #9
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c74:	f000 fafa 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8001c78:	0001      	movs	r1, r0
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	220f      	movs	r2, #15
 8001c82:	4013      	ands	r3, r2
 8001c84:	4a62      	ldr	r2, [pc, #392]	; (8001e10 <HAL_RCC_OscConfig+0x34c>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	000a      	movs	r2, r1
 8001c8a:	40da      	lsrs	r2, r3
 8001c8c:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_RCC_OscConfig+0x350>)
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c90:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x354>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2513      	movs	r5, #19
 8001c96:	197c      	adds	r4, r7, r5
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff fc25 	bl	80014e8 <HAL_InitTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d046      	beq.n	8001d38 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001caa:	197b      	adds	r3, r7, r5
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	e2d2      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d027      	beq.n	8001d06 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cb6:	4b52      	ldr	r3, [pc, #328]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2209      	movs	r2, #9
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fc54 	bl	8001574 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fc4f 	bl	8001574 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e2b8      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f1      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <HAL_RCC_OscConfig+0x348>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	021a      	lsls	r2, r3, #8
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	e018      	b.n	8001d38 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	438a      	bics	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff fc2f 	bl	8001574 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc2a 	bl	8001574 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e293      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2204      	movs	r2, #4
 8001d34:	4013      	ands	r3, r2
 8001d36:	d1f1      	bne.n	8001d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d100      	bne.n	8001d44 <HAL_RCC_OscConfig+0x280>
 8001d42:	e0a2      	b.n	8001e8a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d140      	bne.n	8001dcc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x29e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e279      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a2d      	ldr	r2, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x358>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	0a19      	lsrs	r1, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	061a      	lsls	r2, r3, #24
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	0b5b      	lsrs	r3, r3, #13
 8001d90:	3301      	adds	r3, #1
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	0212      	lsls	r2, r2, #8
 8001d96:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	210f      	movs	r1, #15
 8001da0:	400b      	ands	r3, r1
 8001da2:	491b      	ldr	r1, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x34c>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCC_OscConfig+0x350>)
 8001daa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_RCC_OscConfig+0x354>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2513      	movs	r5, #19
 8001db2:	197c      	adds	r4, r7, r5
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fb97 	bl	80014e8 <HAL_InitTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dbe:	197b      	adds	r3, r7, r5
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d061      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001dc6:	197b      	adds	r3, r7, r5
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	e244      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d040      	beq.n	8001e56 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0049      	lsls	r1, r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fbc7 	bl	8001574 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dea:	e019      	b.n	8001e20 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dec:	f7ff fbc2 	bl	8001574 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d912      	bls.n	8001e20 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e22b      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000
 8001e04:	fffeffff 	.word	0xfffeffff
 8001e08:	fffbffff 	.word	0xfffbffff
 8001e0c:	ffffe0ff 	.word	0xffffe0ff
 8001e10:	080030a4 	.word	0x080030a4
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e20:	4bca      	ldr	r3, [pc, #808]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0df      	beq.n	8001dec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2c:	4bc7      	ldr	r3, [pc, #796]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4ac7      	ldr	r2, [pc, #796]	; (8002150 <HAL_RCC_OscConfig+0x68c>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	4bc4      	ldr	r3, [pc, #784]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e40:	4bc2      	ldr	r3, [pc, #776]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	0a19      	lsrs	r1, r3, #8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	061a      	lsls	r2, r3, #24
 8001e4e:	4bbf      	ldr	r3, [pc, #764]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	e019      	b.n	8001e8a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e56:	4bbd      	ldr	r3, [pc, #756]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4bbc      	ldr	r3, [pc, #752]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e5c:	49bd      	ldr	r1, [pc, #756]	; (8002154 <HAL_RCC_OscConfig+0x690>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb87 	bl	8001574 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fb82 	bl	8001574 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1eb      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e7e:	4bb3      	ldr	r3, [pc, #716]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4013      	ands	r3, r2
 8001e92:	d036      	beq.n	8001f02 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d019      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9c:	4bab      	ldr	r3, [pc, #684]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea0:	4baa      	ldr	r3, [pc, #680]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fb64 	bl	8001574 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fb5f 	bl	8001574 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1c8      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec4:	4ba1      	ldr	r3, [pc, #644]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec8:	2202      	movs	r2, #2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d0f1      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3ee>
 8001ece:	e018      	b.n	8001f02 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed0:	4b9e      	ldr	r3, [pc, #632]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed4:	4b9d      	ldr	r3, [pc, #628]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	438a      	bics	r2, r1
 8001eda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fb4a 	bl	8001574 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fb45 	bl	8001574 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1ae      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efc:	2202      	movs	r2, #2
 8001efe:	4013      	ands	r3, r2
 8001f00:	d1f1      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <HAL_RCC_OscConfig+0x44a>
 8001f0c:	e0ae      	b.n	800206c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2023      	movs	r0, #35	; 0x23
 8001f10:	183b      	adds	r3, r7, r0
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b8d      	ldr	r3, [pc, #564]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	055b      	lsls	r3, r3, #21
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b8a      	ldr	r3, [pc, #552]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0549      	lsls	r1, r1, #21
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f30:	183b      	adds	r3, r7, r0
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x694>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d11a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b85      	ldr	r3, [pc, #532]	; (8002158 <HAL_RCC_OscConfig+0x694>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x694>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0049      	lsls	r1, r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fb10 	bl	8001574 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff fb0b 	bl	8001574 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e174      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x694>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4d0>
 8001f84:	4b71      	ldr	r3, [pc, #452]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f88:	4b70      	ldr	r3, [pc, #448]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0049      	lsls	r1, r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	651a      	str	r2, [r3, #80]	; 0x50
 8001f92:	e031      	b.n	8001ff8 <HAL_RCC_OscConfig+0x534>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4f2>
 8001f9c:	4b6b      	ldr	r3, [pc, #428]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fa2:	496c      	ldr	r1, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x690>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	651a      	str	r2, [r3, #80]	; 0x50
 8001fa8:	4b68      	ldr	r3, [pc, #416]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fac:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fae:	496b      	ldr	r1, [pc, #428]	; (800215c <HAL_RCC_OscConfig+0x698>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8001fb4:	e020      	b.n	8001ff8 <HAL_RCC_OscConfig+0x534>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	23a0      	movs	r3, #160	; 0xa0
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x51c>
 8001fc2:	4b62      	ldr	r3, [pc, #392]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc6:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	00c9      	lsls	r1, r1, #3
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
 8001fd0:	4b5e      	ldr	r3, [pc, #376]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0049      	lsls	r1, r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x534>
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fe6:	495b      	ldr	r1, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x690>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff0:	4b56      	ldr	r3, [pc, #344]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8001ff2:	495a      	ldr	r1, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x698>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7ff fab8 	bl	8001574 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002008:	e009      	b.n	800201e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fab3 	bl	8001574 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_OscConfig+0x69c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e11b      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201e:	4b4b      	ldr	r3, [pc, #300]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d0ef      	beq.n	800200a <HAL_RCC_OscConfig+0x546>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff faa2 	bl	8001574 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002034:	e009      	b.n	800204a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fa9d 	bl	8001574 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x69c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e105      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204a:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCC_OscConfig+0x688>)
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d1ef      	bne.n	8002036 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002056:	2323      	movs	r3, #35	; 0x23
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002066:	493f      	ldr	r1, [pc, #252]	; (8002164 <HAL_RCC_OscConfig+0x6a0>)
 8002068:	400a      	ands	r2, r1
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2220      	movs	r2, #32
 8002072:	4013      	ands	r3, r2
 8002074:	d049      	beq.n	800210a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d026      	beq.n	80020cc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x688>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002090:	2101      	movs	r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
 8002096:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_RCC_OscConfig+0x6a4>)
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCC_OscConfig+0x6a4>)
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0189      	lsls	r1, r1, #6
 80020a0:	430a      	orrs	r2, r1
 80020a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fa66 	bl	8001574 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ae:	f7ff fa61 	bl	8001574 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0ca      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_RCC_OscConfig+0x688>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0f1      	beq.n	80020ae <HAL_RCC_OscConfig+0x5ea>
 80020ca:	e01e      	b.n	800210a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_RCC_OscConfig+0x688>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCC_OscConfig+0x688>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	438a      	bics	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_RCC_OscConfig+0x6a4>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_OscConfig+0x6a4>)
 80020de:	4923      	ldr	r1, [pc, #140]	; (800216c <HAL_RCC_OscConfig+0x6a8>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fa46 	bl	8001574 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ee:	f7ff fa41 	bl	8001574 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0aa      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d1f1      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d100      	bne.n	8002114 <HAL_RCC_OscConfig+0x650>
 8002112:	e09f      	b.n	8002254 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d100      	bne.n	800211c <HAL_RCC_OscConfig+0x658>
 800211a:	e078      	b.n	800220e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	2b02      	cmp	r3, #2
 8002122:	d159      	bne.n	80021d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_OscConfig+0x688>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x688>)
 800212a:	4911      	ldr	r1, [pc, #68]	; (8002170 <HAL_RCC_OscConfig+0x6ac>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fa20 	bl	8001574 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002138:	e01c      	b.n	8002174 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff fa1b 	bl	8001574 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d915      	bls.n	8002174 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e084      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
 800214c:	40021000 	.word	0x40021000
 8002150:	ffff1fff 	.word	0xffff1fff
 8002154:	fffffeff 	.word	0xfffffeff
 8002158:	40007000 	.word	0x40007000
 800215c:	fffffbff 	.word	0xfffffbff
 8002160:	00001388 	.word	0x00001388
 8002164:	efffffff 	.word	0xefffffff
 8002168:	40010000 	.word	0x40010000
 800216c:	ffffdfff 	.word	0xffffdfff
 8002170:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	049b      	lsls	r3, r3, #18
 800217c:	4013      	ands	r3, r2
 800217e:	d1dc      	bne.n	800213a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a37      	ldr	r2, [pc, #220]	; (8002264 <HAL_RCC_OscConfig+0x7a0>)
 8002186:	4013      	ands	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	431a      	orrs	r2, r3
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0449      	lsls	r1, r1, #17
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff f9e1 	bl	8001574 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f9dc 	bl	8001574 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e045      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	049b      	lsls	r3, r3, #18
 80021d2:	4013      	ands	r3, r2
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x6f4>
 80021d6:	e03d      	b.n	8002254 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 80021de:	4922      	ldr	r1, [pc, #136]	; (8002268 <HAL_RCC_OscConfig+0x7a4>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f9c6 	bl	8001574 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff f9c1 	bl	8001574 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e02a      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	049b      	lsls	r3, r3, #18
 8002208:	4013      	ands	r3, r2
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x72a>
 800220c:	e022      	b.n	8002254 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e01d      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_OscConfig+0x79c>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	429a      	cmp	r2, r3
 800222e:	d10f      	bne.n	8002250 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	23f0      	movs	r3, #240	; 0xf0
 8002234:	039b      	lsls	r3, r3, #14
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	23c0      	movs	r3, #192	; 0xc0
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b00a      	add	sp, #40	; 0x28
 800225c:	bdb0      	pop	{r4, r5, r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40021000 	.word	0x40021000
 8002264:	ff02ffff 	.word	0xff02ffff
 8002268:	feffffff 	.word	0xfeffffff

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b08e      	sub	sp, #56	; 0x38
 8002270:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002272:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227a:	230c      	movs	r3, #12
 800227c:	4013      	ands	r3, r2
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d014      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 8002282:	d900      	bls.n	8002286 <HAL_RCC_GetSysClockFreq+0x1a>
 8002284:	e07b      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x112>
 8002286:	2b04      	cmp	r3, #4
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x24>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800228e:	e076      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002290:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2210      	movs	r2, #16
 8002296:	4013      	ands	r3, r2
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800229e:	e07c      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022a0:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCC_GetSysClockFreq+0x140>)
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a4:	e079      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022aa:	e076      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	0c9a      	lsrs	r2, r3, #18
 80022b0:	230f      	movs	r3, #15
 80022b2:	401a      	ands	r2, r3
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x148>)
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	0d9a      	lsrs	r2, r3, #22
 80022be:	2303      	movs	r3, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	3301      	adds	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	025b      	lsls	r3, r3, #9
 80022ce:	4013      	ands	r3, r2
 80022d0:	d01a      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	4a35      	ldr	r2, [pc, #212]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80022dc:	2300      	movs	r3, #0
 80022de:	69b8      	ldr	r0, [r7, #24]
 80022e0:	69f9      	ldr	r1, [r7, #28]
 80022e2:	f7fe f8a7 	bl	8000434 <__aeabi_lmul>
 80022e6:	0002      	movs	r2, r0
 80022e8:	000b      	movs	r3, r1
 80022ea:	0010      	movs	r0, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f7fe f87b 	bl	80003f4 <__aeabi_uldivmod>
 80022fe:	0002      	movs	r2, r0
 8002300:	000b      	movs	r3, r1
 8002302:	0013      	movs	r3, r2
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
 8002306:	e037      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2210      	movs	r2, #16
 800230e:	4013      	ands	r3, r2
 8002310:	d01a      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800231c:	2300      	movs	r3, #0
 800231e:	68b8      	ldr	r0, [r7, #8]
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	f7fe f887 	bl	8000434 <__aeabi_lmul>
 8002326:	0002      	movs	r2, r0
 8002328:	000b      	movs	r3, r1
 800232a:	0010      	movs	r0, r2
 800232c:	0019      	movs	r1, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f7fe f85b 	bl	80003f4 <__aeabi_uldivmod>
 800233e:	0002      	movs	r2, r0
 8002340:	000b      	movs	r3, r1
 8002342:	0013      	movs	r3, r2
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
 8002346:	e017      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	0018      	movs	r0, r3
 800234c:	2300      	movs	r3, #0
 800234e:	0019      	movs	r1, r3
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_RCC_GetSysClockFreq+0x140>)
 8002352:	2300      	movs	r3, #0
 8002354:	f7fe f86e 	bl	8000434 <__aeabi_lmul>
 8002358:	0002      	movs	r2, r0
 800235a:	000b      	movs	r3, r1
 800235c:	0010      	movs	r0, r2
 800235e:	0019      	movs	r1, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	001c      	movs	r4, r3
 8002364:	2300      	movs	r3, #0
 8002366:	001d      	movs	r5, r3
 8002368:	0022      	movs	r2, r4
 800236a:	002b      	movs	r3, r5
 800236c:	f7fe f842 	bl	80003f4 <__aeabi_uldivmod>
 8002370:	0002      	movs	r2, r0
 8002372:	000b      	movs	r3, r1
 8002374:	0013      	movs	r3, r2
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800237c:	e00d      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0b5b      	lsrs	r3, r3, #13
 8002384:	2207      	movs	r2, #7
 8002386:	4013      	ands	r3, r2
 8002388:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	3301      	adds	r3, #1
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0212      	lsls	r2, r2, #8
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002398:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b00e      	add	sp, #56	; 0x38
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	003d0900 	.word	0x003d0900
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200
 80023b4:	080030b4 	.word	0x080030b4

080023b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e083      	b.n	80024d2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	2382      	movs	r3, #130	; 0x82
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	429a      	cmp	r2, r3
 80023dc:	d009      	beq.n	80023f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
 80023e4:	e005      	b.n	80023f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2251      	movs	r2, #81	; 0x51
 80023fc:	5c9b      	ldrb	r3, [r3, r2]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2250      	movs	r2, #80	; 0x50
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f7fe ffc0 	bl	8001394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2251      	movs	r2, #81	; 0x51
 8002418:	2102      	movs	r1, #2
 800241a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	438a      	bics	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	2382      	movs	r3, #130	; 0x82
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	2384      	movs	r3, #132	; 0x84
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	400b      	ands	r3, r1
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	400b      	ands	r3, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2102      	movs	r1, #2
 8002454:	400b      	ands	r3, r1
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2101      	movs	r1, #1
 800245e:	400b      	ands	r3, r1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6999      	ldr	r1, [r3, #24]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	400b      	ands	r3, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2138      	movs	r1, #56	; 0x38
 8002474:	400b      	ands	r3, r1
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	400b      	ands	r3, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	0011      	movs	r1, r2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	019b      	lsls	r3, r3, #6
 800248c:	401a      	ands	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2210      	movs	r2, #16
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <HAL_SPI_Init+0x124>)
 80024be:	400a      	ands	r2, r1
 80024c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2251      	movs	r2, #81	; 0x51
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	fffff7ff 	.word	0xfffff7ff

080024e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024f0:	231f      	movs	r3, #31
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2250      	movs	r2, #80	; 0x50
 80024fc:	5c9b      	ldrb	r3, [r3, r2]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_SPI_Transmit+0x26>
 8002502:	2302      	movs	r3, #2
 8002504:	e145      	b.n	8002792 <HAL_SPI_Transmit+0x2b2>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2250      	movs	r2, #80	; 0x50
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800250e:	f7ff f831 	bl	8001574 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002516:	2316      	movs	r3, #22
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	1dba      	adds	r2, r7, #6
 800251c:	8812      	ldrh	r2, [r2, #0]
 800251e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2251      	movs	r2, #81	; 0x51
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d004      	beq.n	8002536 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800252c:	231f      	movs	r3, #31
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
    goto error;
 8002534:	e126      	b.n	8002784 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_SPI_Transmit+0x64>
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
    goto error;
 800254c:	e11a      	b.n	8002784 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2251      	movs	r2, #81	; 0x51
 8002552:	2103      	movs	r1, #3
 8002554:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1dba      	adds	r2, r7, #6
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1dba      	adds	r2, r7, #6
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	429a      	cmp	r2, r3
 800259a:	d110      	bne.n	80025be <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2140      	movs	r1, #64	; 0x40
 80025a8:	438a      	bics	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	01c9      	lsls	r1, r1, #7
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d007      	beq.n	80025dc <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d152      	bne.n	800268e <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_SPI_Transmit+0x11a>
 80025f0:	2316      	movs	r3, #22
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d143      	bne.n	8002682 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	1c9a      	adds	r2, r3, #2
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800261e:	e030      	b.n	8002682 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d112      	bne.n	8002654 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	1c9a      	adds	r2, r3, #2
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	86da      	strh	r2, [r3, #54]	; 0x36
 8002652:	e016      	b.n	8002682 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002654:	f7fe ff8e 	bl	8001574 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d802      	bhi.n	800266a <HAL_SPI_Transmit+0x18a>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_SPI_Transmit+0x190>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d108      	bne.n	8002682 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002670:	231f      	movs	r3, #31
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2203      	movs	r2, #3
 8002676:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2251      	movs	r2, #81	; 0x51
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002680:	e080      	b.n	8002784 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1c9      	bne.n	8002620 <HAL_SPI_Transmit+0x140>
 800268c:	e053      	b.n	8002736 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <HAL_SPI_Transmit+0x1c0>
 8002696:	2316      	movs	r3, #22
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d145      	bne.n	800272c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026c6:	e031      	b.n	800272c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d113      	bne.n	80026fe <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	7812      	ldrb	r2, [r2, #0]
 80026e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80026fc:	e016      	b.n	800272c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fe:	f7fe ff39 	bl	8001574 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d802      	bhi.n	8002714 <HAL_SPI_Transmit+0x234>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	d102      	bne.n	800271a <HAL_SPI_Transmit+0x23a>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2251      	movs	r2, #81	; 0x51
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
          goto error;
 800272a:	e02b      	b.n	8002784 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1c8      	bne.n	80026c8 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fc2b 	bl	8002f98 <SPI_EndRxTxTransaction>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002772:	231f      	movs	r3, #31
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	e003      	b.n	8002784 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2251      	movs	r2, #81	; 0x51
 8002780:	2101      	movs	r1, #1
 8002782:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2250      	movs	r2, #80	; 0x50
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800278c:	231f      	movs	r3, #31
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	781b      	ldrb	r3, [r3, #0]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b008      	add	sp, #32
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	1dbb      	adds	r3, r7, #6
 80027aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ac:	2117      	movs	r1, #23
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2251      	movs	r2, #81	; 0x51
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d003      	beq.n	80027c8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80027c6:	e109      	b.n	80029dc <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	2382      	movs	r3, #130	; 0x82
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d113      	bne.n	80027fc <HAL_SPI_Receive+0x60>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2251      	movs	r2, #81	; 0x51
 80027e0:	2104      	movs	r1, #4
 80027e2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027e4:	1dbb      	adds	r3, r7, #6
 80027e6:	881c      	ldrh	r4, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	0023      	movs	r3, r4
 80027f4:	f000 f900 	bl	80029f8 <HAL_SPI_TransmitReceive>
 80027f8:	0003      	movs	r3, r0
 80027fa:	e0f6      	b.n	80029ea <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2250      	movs	r2, #80	; 0x50
 8002800:	5c9b      	ldrb	r3, [r3, r2]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_SPI_Receive+0x6e>
 8002806:	2302      	movs	r3, #2
 8002808:	e0ef      	b.n	80029ea <HAL_SPI_Receive+0x24e>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2250      	movs	r2, #80	; 0x50
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002812:	f7fe feaf 	bl	8001574 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_SPI_Receive+0x8c>
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002828:	2317      	movs	r3, #23
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002830:	e0d4      	b.n	80029dc <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2251      	movs	r2, #81	; 0x51
 8002836:	2104      	movs	r1, #4
 8002838:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1dba      	adds	r2, r7, #6
 800284a:	8812      	ldrh	r2, [r2, #0]
 800284c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1dba      	adds	r2, r7, #6
 8002852:	8812      	ldrh	r2, [r2, #0]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	429a      	cmp	r2, r3
 800287e:	d10f      	bne.n	80028a0 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	438a      	bics	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4956      	ldr	r1, [pc, #344]	; (80029f4 <HAL_SPI_Receive+0x258>)
 800289c:	400a      	ands	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d007      	beq.n	80028be <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d000      	beq.n	80028c8 <HAL_SPI_Receive+0x12c>
 80028c6:	e06c      	b.n	80029a2 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028c8:	e033      	b.n	8002932 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d115      	bne.n	8002904 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	001a      	movs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002902:	e016      	b.n	8002932 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002904:	f7fe fe36 	bl	8001574 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d802      	bhi.n	800291a <HAL_SPI_Receive+0x17e>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_SPI_Receive+0x184>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002920:	2317      	movs	r3, #23
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2203      	movs	r2, #3
 8002926:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2251      	movs	r2, #81	; 0x51
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002930:	e054      	b.n	80029dc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1c6      	bne.n	80028ca <HAL_SPI_Receive+0x12e>
 800293c:	e036      	b.n	80029ac <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	2b01      	cmp	r3, #1
 800294a:	d113      	bne.n	8002974 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	b292      	uxth	r2, r2
 8002958:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	1c9a      	adds	r2, r3, #2
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002972:	e016      	b.n	80029a2 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002974:	f7fe fdfe 	bl	8001574 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d802      	bhi.n	800298a <HAL_SPI_Receive+0x1ee>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Receive+0x1f4>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	2317      	movs	r3, #23
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2203      	movs	r2, #3
 8002996:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2251      	movs	r2, #81	; 0x51
 800299c:	2101      	movs	r1, #1
 800299e:	5499      	strb	r1, [r3, r2]
          goto error;
 80029a0:	e01c      	b.n	80029dc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1c8      	bne.n	800293e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fa86 	bl	8002ec4 <SPI_EndRxTransaction>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80029ca:	2317      	movs	r3, #23
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e003      	b.n	80029dc <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2251      	movs	r2, #81	; 0x51
 80029d8:	2101      	movs	r1, #1
 80029da:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2250      	movs	r2, #80	; 0x50
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029e4:	2317      	movs	r3, #23
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b007      	add	sp, #28
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	ffffbfff 	.word	0xffffbfff

080029f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	001a      	movs	r2, r3
 8002a06:	1cbb      	adds	r3, r7, #2
 8002a08:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a0e:	232b      	movs	r3, #43	; 0x2b
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2250      	movs	r2, #80	; 0x50
 8002a1a:	5c9b      	ldrb	r3, [r3, r2]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x2c>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e1b0      	b.n	8002d86 <HAL_SPI_TransmitReceive+0x38e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2250      	movs	r2, #80	; 0x50
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2c:	f7fe fda2 	bl	8001574 <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a34:	2023      	movs	r0, #35	; 0x23
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	2151      	movs	r1, #81	; 0x51
 8002a3c:	5c52      	ldrb	r2, [r2, r1]
 8002a3e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a46:	231a      	movs	r3, #26
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	1cba      	adds	r2, r7, #2
 8002a4c:	8812      	ldrh	r2, [r2, #0]
 8002a4e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d011      	beq.n	8002a7c <HAL_SPI_TransmitReceive+0x84>
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	2382      	movs	r3, #130	; 0x82
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d107      	bne.n	8002a72 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <HAL_SPI_TransmitReceive+0x7a>
 8002a6a:	183b      	adds	r3, r7, r0
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d004      	beq.n	8002a7c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002a72:	232b      	movs	r3, #43	; 0x2b
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a7a:	e17d      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x98>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x98>
 8002a88:	1cbb      	adds	r3, r7, #2
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002a90:	232b      	movs	r3, #43	; 0x2b
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a98:	e16e      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2251      	movs	r2, #81	; 0x51
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d003      	beq.n	8002aae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2251      	movs	r2, #81	; 0x51
 8002aaa:	2105      	movs	r1, #5
 8002aac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1cba      	adds	r2, r7, #2
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1cba      	adds	r2, r7, #2
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1cba      	adds	r2, r7, #2
 8002ad4:	8812      	ldrh	r2, [r2, #0]
 8002ad6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1cba      	adds	r2, r7, #2
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d007      	beq.n	8002b0a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2140      	movs	r1, #64	; 0x40
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d000      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x120>
 8002b16:	e07f      	b.n	8002c18 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x134>
 8002b20:	231a      	movs	r3, #26
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d000      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x134>
 8002b2a:	e06a      	b.n	8002c02 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	1c9a      	adds	r2, r3, #2
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b50:	e057      	b.n	8002c02 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d11b      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x1a0>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x1a0>
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d113      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d119      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x1e2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d014      	beq.n	8002bda <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	1c9a      	adds	r2, r3, #2
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bda:	f7fe fccb 	bl	8001574 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d80b      	bhi.n	8002c02 <HAL_SPI_TransmitReceive+0x20a>
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	3301      	adds	r3, #1
 8002bee:	d008      	beq.n	8002c02 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8002bf0:	232b      	movs	r3, #43	; 0x2b
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2251      	movs	r2, #81	; 0x51
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]
        goto error;
 8002c00:	e0ba      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1a2      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x15a>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d19d      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x15a>
 8002c16:	e083      	b.n	8002d20 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x234>
 8002c20:	231a      	movs	r3, #26
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d000      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x234>
 8002c2a:	e06f      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c52:	e05b      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d11c      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x2a4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d017      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x2a4>
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d114      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d119      	bne.n	8002cde <HAL_SPI_TransmitReceive+0x2e6>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d014      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cde:	f7fe fc49 	bl	8001574 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d802      	bhi.n	8002cf4 <HAL_SPI_TransmitReceive+0x2fc>
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x302>
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8002cfa:	232b      	movs	r3, #43	; 0x2b
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2203      	movs	r2, #3
 8002d00:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2251      	movs	r2, #81	; 0x51
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]
        goto error;
 8002d0a:	e035      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d19e      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x25c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d199      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f936 	bl	8002f98 <SPI_EndRxTxTransaction>
 8002d2c:	1e03      	subs	r3, r0, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8002d30:	232b      	movs	r3, #43	; 0x2b
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d3e:	e01b      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8002d66:	232b      	movs	r3, #43	; 0x2b
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e003      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2251      	movs	r2, #81	; 0x51
 8002d74:	2101      	movs	r1, #1
 8002d76:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2250      	movs	r2, #80	; 0x50
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d80:	232b      	movs	r3, #43	; 0x2b
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b00c      	add	sp, #48	; 0x30
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2251      	movs	r2, #81	; 0x51
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	b2db      	uxtb	r3, r3
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002db8:	f7fe fbdc 	bl	8001574 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	18d3      	adds	r3, r2, r3
 8002dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dc8:	f7fe fbd4 	bl	8001574 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	015b      	lsls	r3, r3, #5
 8002dd6:	0d1b      	lsrs	r3, r3, #20
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	4353      	muls	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dde:	e058      	b.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	d055      	beq.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002de6:	f7fe fbc5 	bl	8001574 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d902      	bls.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x54>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d142      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	21e0      	movs	r1, #224	; 0xe0
 8002e08:	438a      	bics	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	2382      	movs	r3, #130	; 0x82
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d113      	bne.n	8002e40 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2140      	movs	r1, #64	; 0x40
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	019b      	lsls	r3, r3, #6
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d110      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	491a      	ldr	r1, [pc, #104]	; (8002ec0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0189      	lsls	r1, r1, #6
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2251      	movs	r2, #81	; 0x51
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2250      	movs	r2, #80	; 0x50
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e017      	b.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	425a      	negs	r2, r3
 8002ea2:	4153      	adcs	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	1dfb      	adds	r3, r7, #7
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d197      	bne.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b008      	add	sp, #32
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	ffffdfff 	.word	0xffffdfff

08002ec4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	2382      	movs	r3, #130	; 0x82
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d113      	bne.n	8002f04 <SPI_EndRxTransaction+0x40>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d005      	beq.n	8002ef4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	438a      	bics	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	2382      	movs	r3, #130	; 0x82
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d12b      	bne.n	8002f68 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d012      	beq.n	8002f42 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	0013      	movs	r3, r2
 8002f26:	2200      	movs	r2, #0
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	f7ff ff3d 	bl	8002da8 <SPI_WaitFlagStateUntilTimeout>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d02d      	beq.n	8002f8e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	2220      	movs	r2, #32
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e026      	b.n	8002f90 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2101      	movs	r1, #1
 8002f50:	f7ff ff2a 	bl	8002da8 <SPI_WaitFlagStateUntilTimeout>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d01a      	beq.n	8002f8e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e013      	b.n	8002f90 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	0013      	movs	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	2101      	movs	r1, #1
 8002f76:	f7ff ff17 	bl	8002da8 <SPI_WaitFlagStateUntilTimeout>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d007      	beq.n	8002f8e <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	2220      	movs	r2, #32
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e000      	b.n	8002f90 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <SPI_EndRxTxTransaction+0x84>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	491d      	ldr	r1, [pc, #116]	; (8003020 <SPI_EndRxTxTransaction+0x88>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7fd f8ac 	bl	8000108 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	0013      	movs	r3, r2
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	2382      	movs	r3, #130	; 0x82
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d112      	bne.n	8002ff4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	0013      	movs	r3, r2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	f7ff fee4 	bl	8002da8 <SPI_WaitFlagStateUntilTimeout>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d016      	beq.n	8003012 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	2220      	movs	r2, #32
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e00f      	b.n	8003014 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	4013      	ands	r3, r2
 800300a:	2b80      	cmp	r3, #128	; 0x80
 800300c:	d0f2      	beq.n	8002ff4 <SPI_EndRxTxTransaction+0x5c>
 800300e:	e000      	b.n	8003012 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b006      	add	sp, #24
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000000 	.word	0x20000000
 8003020:	016e3600 	.word	0x016e3600

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	2600      	movs	r6, #0
 8003028:	4d0c      	ldr	r5, [pc, #48]	; (800305c <__libc_init_array+0x38>)
 800302a:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302c:	1b64      	subs	r4, r4, r5
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	42a6      	cmp	r6, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	2600      	movs	r6, #0
 8003036:	f000 f821 	bl	800307c <_init>
 800303a:	4d0a      	ldr	r5, [pc, #40]	; (8003064 <__libc_init_array+0x40>)
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <__libc_init_array+0x44>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	42a6      	cmp	r6, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	00b3      	lsls	r3, r6, #2
 800304a:	58eb      	ldr	r3, [r5, r3]
 800304c:	4798      	blx	r3
 800304e:	3601      	adds	r6, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	00b3      	lsls	r3, r6, #2
 8003054:	58eb      	ldr	r3, [r5, r3]
 8003056:	4798      	blx	r3
 8003058:	3601      	adds	r6, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	080030c8 	.word	0x080030c8
 8003060:	080030c8 	.word	0x080030c8
 8003064:	080030c8 	.word	0x080030c8
 8003068:	080030cc 	.word	0x080030cc

0800306c <memset>:
 800306c:	0003      	movs	r3, r0
 800306e:	1882      	adds	r2, r0, r2
 8003070:	4293      	cmp	r3, r2
 8003072:	d100      	bne.n	8003076 <memset+0xa>
 8003074:	4770      	bx	lr
 8003076:	7019      	strb	r1, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	e7f9      	b.n	8003070 <memset+0x4>

0800307c <_init>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr

08003088 <_fini>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr
